<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ProgramBlock>
    <ScriptSetup>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});</ScriptSetup>
    <ScriptSource>// `PROGRAM_OPTIONS_STRING` will contain the name of the group where this program is run from
Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .On();</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>6</Address>
    <Name>Group Lights ON</Name>
    <Description>Turn on all the lights in the current group.</Description>
    <Group>Scenarios</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:42.110096Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});
</ScriptSetup>
    <ScriptSource>// `PROGRAM_OPTIONS_STRING` will contain the name of the group where this program is run from
Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .Off();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>7</Address>
    <Name>Group Lights OFF</Name>
    <Description>Turn off all the lights in the current group.</Description>
    <Group>Scenarios</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:46.638737Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature("", "Dimmer", "HomeGenie.LevelMemory", "Recall last light level when switched on", "checkbox")
  .AddFeature("", "Dimmer", "HomeGenie.LevelMemory.SimulateOnly", "Simulate only", "checkbox")
  .Run();
</ScriptSetup>
    <ScriptSource>When.ModuleParameterChanged( (module, parameter) =&gt; {
  // stores the Status.MemoryLevel value for recalling last light dimmer level
  // when switched on
  if (module.HasFeature("HomeGenie.LevelMemory") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; parameter.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var memory = module.Parameter("Status.MemoryLevel");
    //
    if (level.DecimalValue != level.Statistics.Last.Value)
    {
      bool justswitchedon = (level.Statistics.Last.Value == 0 &amp;&amp; level.DecimalValue &gt; 0);
      if (justswitchedon)
      {
        // set current level to memory level if different
        if (level.DecimalValue != memory.DecimalValue &amp;&amp; memory.DecimalValue &gt; 0)
        {
          var newlevel = (int)(memory.DecimalValue * 100);
          if (module.HasFeature("HomeGenie.LevelMemory.SimulateOnly"))
          {
            module.RaiseEvent("Status.Level", memory.Value, "Memory Level");
          }
          else
          {
            module.Level = newlevel;
          }
          var message = String.Format("{0}&lt;br&gt;{1} set to {2}%", module.Instance.Name, module.Instance.Address, newlevel);
          Program.Notify(message);
          // returning false, prevent from routing event to other listeners
          return false;
        }
      }
      if (level.DecimalValue &gt; 0)
      {
        memory.Value = level.Value;
      }
    }
  }
  // returning true, will route event to other listeners
  return true;
});
Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>16</Address>
    <Name>Level Memory</Name>
    <Description>Store and recall last dimmer level when device is switched on.</Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory</Property>
        <Description>Recall last light level when switched on</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory.SimulateOnly</Property>
        <Description>Simulate only</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:47.201061Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.197476Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>// Add "Emulate UPnP device" feature
Program.AddFeature(
  description:
    // Description of this feature
  	"Emulate UPnP device (WeMo)",
  parameterName:
    // Name of the module's parameter where to store this feature data
  	"UpnpDevice.EmulateWemo",
  type:
    // Display in the UI as a checkbox
  	"checkbox",
  forDomains:
    // Show this feature for all domains
  	"",
  forModuleTypes:
    // Show this feature for all module types
  	"Switch,Light,Dimmer"
);
// Run the 'Program Code'
Program.Run();
</ScriptSetup>
    <ScriptSource>var FEATURE_EMULATE_WEMO = "UpnpDevice.EmulateWemo";
var PARAM_UPNP_INFO_UDN = "UpnpDevice.Info.UDN";
// List that holds allocated UPnP devices
var upnpDevices = new Dictionary&lt;Module,UPnPDevice&gt;();

Func&lt;ModuleHelper, UPnPDevice&gt; createUpnpModule = (module)=&gt;{
  // Create the UPnP device to control the 'module'
  var upnpDevice = UPnPDevice.CreateRootDevice(3600, 1, null);
  // use the same ID even when restarted
  if (module.HasParameter(PARAM_UPNP_INFO_UDN))
  {
    upnpDevice.UniqueDeviceName = module.Parameter(PARAM_UPNP_INFO_UDN).Value;
  }
  else
  {
    module.Parameter(PARAM_UPNP_INFO_UDN).Value = upnpDevice.UniqueDeviceName;
  }
  upnpDevice.ModelNumber = "3.1234";
  // Socket, Lightswitch - TODO: Insight, Motion
  var modelName = "";
  if (module.Instance.DeviceType == ModuleTypes.Light || module.Instance.DeviceType == ModuleTypes.Dimmer)
  {
    modelName = "Lightswitch";
    upnpDevice.StandardDeviceType = "urn:Belkin:device:lightswitch";
    upnpDevice.ModelDescription = "Belkin Light Switch 1.0";
  }
  else
  {
    modelName = "Socket";
    upnpDevice.StandardDeviceType = "urn:Belkin:device:controllee";
    upnpDevice.ModelDescription = "Belkin Plugin Socket 1.0";
  }
  upnpDevice.ModelName = modelName;
  // Prepend modelName (device type) to the UDN
  upnpDevice.UniqueDeviceName = modelName + "-" + upnpDevice.UniqueDeviceName;
  upnpDevice.FriendlyName = module.Instance.Name;
  upnpDevice.Manufacturer = "Belkin International Inc.";
  upnpDevice.ManufacturerURL = "http://www.belkin.com";
  upnpDevice.Major = 1; upnpDevice.Minor = 0;
  upnpDevice.SerialNumber = "EMU-1234567890";
  upnpDevice.UserAgentTag = "redsonic";

  // Create an instance of the BasicEvent service
  dynamic instance = new ExpandoObject();

  // Declare the "BasicEvent1" service
  var service = new UPnPService(
    // Version
    1.0,
    // Service ID
    "urn:Belkin:serviceId:basicevent1",
    // Service Type
    "urn:Belkin:service:basicevent:1",
    // Standard Service?
    true,
    // Service Object Instance
    instance
  );
  service.ControlURL = "/upnp/control/basicevent1";
  service.EventURL = "/upnp/event/basicevent1";
  service.SCPDURL = "/eventservice.xml";

  string stateVarName = "BinaryState";
  var stateVariable = new UPnPStateVariable(stateVarName, typeof(bool), true);
  stateVariable.AddAssociation("GetBinaryState", stateVarName);
  stateVariable.AddAssociation("SetBinaryState", stateVarName);
  stateVariable.Value = false;
  service.AddStateVariable(stateVariable);

  instance.GetBinaryState = new Func&lt;bool&gt;(() =&gt; (bool)service.GetStateVariable(stateVarName) /* module.IsOn */);
  instance.SetBinaryState = new Action&lt;int&gt;((BinaryState) =&gt; {
    service.SetStateVariable(stateVarName, BinaryState != 0);
    if (BinaryState == 1) module.On();
    else module.Off();
  });

  // Add the methods
  service.AddMethod("GetBinaryState", stateVarName);
  service.AddMethod("SetBinaryState", stateVarName);

  // Add the service
  upnpDevice.AddService(service);
  // Start the WeMo switch device UPnP simulator
  upnpDevice.StartDevice();

  return upnpDevice;
};

When.ModuleParameterChanged((m, p)=&gt;{
  // The checkbox option "UpnpDevice.EmulateWemo" has been changed
  if (p.Is(FEATURE_EMULATE_WEMO))
  {
    // Remove the UPnP device if already allocated
    if (upnpDevices.ContainsKey(m.Instance))
    {
      upnpDevices[m.Instance].StopDevice();
      upnpDevices.Remove(m.Instance);
      Program.Notify("Removed UPnP device for {0}", m.Instance.Name);
    }
    // Check if the option is ON (not empty = On)
    if (!String.IsNullOrEmpty(p.Value))
    {
      Program.Notify("Added UPnP device for {0}", m.Instance.Name);
      upnpDevices.Add(m.Instance, createUpnpModule(m));
    }
  }
  else if (upnpDevices.ContainsKey(m.Instance) &amp;&amp; p.Is("Status.Level"))
  {
    // Update status level of the associated UPnP device
    upnpDevices[m.Instance].Services[0].SetStateVariable("BinaryState", (p.DecimalValue != 0));
  }
  return true;
});

When.ProgramStopping(()=&gt;{
  // Stop allocated UPnP devices
  foreach(var upnp in upnpDevices.Values)
  {
    Program.Notify("Removed UPnP device for {0}", upnp.FriendlyName);
    upnp.StopDevice();
  }
  return true;
});

// Allocates UPnP devices for modules with this option active
Modules.WithFeature(FEATURE_EMULATE_WEMO).Each((m)=&gt;{
  upnpDevices.Add(m.Instance, createUpnpModule(m));
  return false; // continue iterating
});

// Continue running the program in the background
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>20</Address>
    <Name>UPnP Emulation</Name>
    <Description>Make the device discoverable by third party applications and services supporting UPnP (Universal Plug and Play).</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>UpnpDevice.EmulateWemo</Property>
        <Description>Emulate UPnP device (WeMo)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddOption("BridgeAddress", "192.168.0.?", "Philips Hue Bridge IP Address", "text")
  .AddOption("BridgeUsername","newdeveloper", "Philips Hue Bridge API username", "text")
  // Create 5 virtual modules with the domain "HomeAutomation.PhilipsHue" and with address from 1 to 5
  // "Dimmer" is the type and "GenericColorLight" is the widget to be used to display the virtual module
  // See directory "html/pages/control/widgets/" for widget list
  .AddVirtualModules("HomeAutomation.PhilipsHue", "Dimmer", "homegenie/generic/colorlight", 1, 5)
  .Run();
</ScriptSetup>
    <ScriptSource>Func&lt;string, string, bool&gt; bridgeApiCall = (string lightnum, string jsonargs) =&gt;
{
  if (Program.Option("BridgeAddress").Value == "" || Program.Option("BridgeAddress").Value.EndsWith("?"))
  {
    return false;
  }
  string webserviceurl = "http://" +
    Program.Option("BridgeAddress").Value + "/api/" +
    Program.Option("BridgeUsername").Value + "/lights/" + lightnum + "/state";
  Net.WebService(webserviceurl).Put( jsonargs ).Call();
  return true;
};

var GetHsb = new Func&lt;string,dynamic&gt;((hsb)=&gt;{
  dynamic color = new ExpandoObject();
  string[] parts = hsb.Split(',');
  color.H = (parts[0] != "" ? parts[0] : "1");
  color.S = (parts.Length &gt; 1 &amp;&amp; parts[1] != "" ? parts[1] : "0");
  color.B = (parts.Length &gt; 2 &amp;&amp; parts[2] != "" ? parts[2] : "1");
  return color;
});

// - http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/...
When.WebServiceCallReceived("HomeAutomation.PhilipsHue", ( args ) =&gt; {
  var request = Program.ParseApiCall(args);
  try
  {
    string lightNumber = request.Address;
    string parameter = Uri.UnescapeDataString(request.GetOption(0));
	var hueModules = Modules.InDomain("HomeAutomation.PhilipsHue");
    var module = hueModules.WithAddress(lightNumber).Get();
    //
    switch(request.Command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
        {
          bridgeApiCall(lightNumber, "{ \"on\" : true }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          module.RaiseEvent("Status.Level", color.B, "Hue Light");
        }
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        bridgeApiCall(lightNumber, "{ \"on\" : false }");
        module.RaiseEvent("Status.Level", "0", "Hue Light");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          bridgeApiCall(lightNumber, "{ \"on\" : true }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          module.RaiseEvent("Status.Level", color.B, "Hue Light");
        }
        else
        {
          bridgeApiCall(lightNumber, "{ \"on\" : false }");
          module.RaiseEvent("Status.Level", "0", "Hue Light");
        }
        break;
      case "Control.Level":
        {
          if (module.IsOff) bridgeApiCall(lightNumber, "{ \"on\" : true }");
          bridgeApiCall(lightNumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString(CultureInfo.InvariantCulture) + " }");
          var color = GetHsb(module.Parameter("Status.ColorHsb").Value);
          var bri = (double.Parse(parameter) / 100D).ToString(CultureInfo.InvariantCulture);
          module.RaiseEvent("Status.ColorHsb", color.H+','+color.S+','+bri, "Hue Light");
          module.RaiseEvent("Status.Level", bri, "Hue Light");
        }
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = parameter.Split(',');
        double transition = 5;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10));
        bridgeApiCall(lightNumber, "{ \"on\" : true" +
                      ", \"hue\" : " + (int)(double.Parse(values[0], CultureInfo.InvariantCulture) * 65536) +
                      ", \"sat\" : " + (int)(double.Parse(values[1], CultureInfo.InvariantCulture) * 255) +
                      ", \"bri\" : " + (int)(double.Parse(values[2], CultureInfo.InvariantCulture) * 255) +
                      ", \"transitiontime\" : " + transition.ToString() +  "}");
        module.RaiseEvent("Status.Level", (double.Parse(values[2], CultureInfo.InvariantCulture)).ToString(), "Hue Light");
        module.RaiseEvent("Status.ColorHsb", parameter, "Hue Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Alert/Long
      case "Control.Alert":
        // eg. Modules.WithName("Light 1").Command("Control.Alert").Set(""); for a short alert Set("Long"); for a 30 second alert
        string alertType = "select";
        if (parameter == "Long") {alertType = "lselect";}
        bridgeApiCall(lightNumber, "{\"alert\" : \"" + alertType + "\"}");
        break;
    }
    return new ResponseText("OK");
  } catch (Exception e) {

    Program.Notify("ERROR: "+e.Message);

  }
  return new ResponseText("ERROR");
});
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>26</Address>
    <Name>Philips Hue Bridge</Name>
    <Description>Adds Philips Hue lights control capability to HomeGenie.
In order for this to work, you must register "homegenie" username
(default is "newdeveloper") with your Philips Hue Bridge first.
For instructions see: http://developers.meethue.com/gettingstarted.html .</Description>
    <Group>Devices and Things</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:50.675733Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.223102Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>//Program.Title = "Belking WeMo";
Program.Setup(()=&gt;{
    Program
      .AddOption("WeMo.Refresh", "60", "1. Time in seconds between each refresh", "slider:1:120:1")
      .AddOption("WeMo.MaxDevices", "10", "2. Number of WeMo devices", "slider:1:20:1")
      // AddFeature will attach option to modules in HomeAutomation.WeMo device
      .AddFeature("HomeAutomation.WeMo", "Switch,Light,Dimmer", "WeMo.IpAddress", "IP Address", "text")
      .AddFeature("HomeAutomation.WeMo", "Switch,Light,Dimmer", "WeMo.AlarmAD", "Synchronize on/off with Alarm System armed status", "checkbox");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>const uint STATE_ON = 1;
const uint STATE_OFF = 0;
const string WEMO_DOMAIN = "HomeAutomation.WeMo";
var WeMo_Refresh = Program.Option("WeMo.Refresh");
var WeMo_MaxDevices = Program.Option("WeMo.MaxDevices");
var WeMo_Modules = Modules.InDomain(WEMO_DOMAIN);
var WeMo_Modules_AD = Modules.InDomain(WEMO_DOMAIN).WithFeature("WeMo.AlarmAD");

// create virtual modules for HomeAutomation.WeMo domain
for (int i = 1; i &lt;= WeMo_MaxDevices.DecimalValue; i++)
{
  Program.AddVirtualModule(WEMO_DOMAIN, i.ToString(), "Switch", "homegenie/generic/switch");
}

Action&lt;string, uint&gt; BinarySwitch = (string ipAddress, uint binaryState) =&gt;
{
  var request = Net.WebService("http://" + ipAddress + ":49153/upnp/control/basicevent1")
    .AddHeader("Accept", "")
    .AddHeader("Content-type", "text/xml; charset=\"utf-8\"")
    .AddHeader("SOAPACTION", "\"urn:Belkin:service:basicevent:1#SetBinaryState\"")
    .Post(
    "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;&lt;s:Body&gt;&lt;u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"&gt;&lt;BinaryState&gt;" +
    binaryState + "&lt;/BinaryState&gt;&lt;/u:SetBinaryState&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;");
  var result = request.GetData();
  if (String.IsNullOrEmpty(result))
  {
    Program.Notify("ERROR: no response received!");
  }
};

When.ModuleParameterChanged((module, parameter) =&gt; {
  // synchronize WeMo on/off status with Alarm System
  if (module.Is("Security Alarm System") &amp;&amp; parameter.Is("Status.Level"))
  {
    WeMo_Modules_AD.Each((wemo) =&gt; {
      var ip = wemo.Parameter("WeMo.IpAddress").Value;
      if (ip.Length &gt; 8)
      {
        wemo.RaiseEvent("Status.Level", parameter.Value, "WeMo");
        BinarySwitch(ip, parameter.DecimalValue == 0 ? STATE_OFF : STATE_ON);
      }
      return false;
    });
  }
  // true =&gt; continue propagating the event to other listeners
  return true;
});

When.WebServiceCallReceived(WEMO_DOMAIN, (args) =&gt; {
  var cmd = new MigInterfaceCommand(args.ToString());
  var module = Modules.InDomain(WEMO_DOMAIN).WithAddress(cmd.Address).Get();
  var ipAddress = module.Parameter("WeMo.IpAddress").Value;
  if (ipAddress.Length &gt;= 8)
  {
    switch (cmd.Command)
    {
      case "Control.On":
      module.RaiseEvent("Status.Level", "1", "WeMo");
      BinarySwitch(ipAddress, STATE_ON);
      break;
      case "Control.Off":
      module.RaiseEvent("Status.Level", "0", "WeMo");
      BinarySwitch(ipAddress, STATE_OFF);
      break;
      default:
      // command not recognized
      return new ResponseStatus(Status.Error);
    }
  }
  else
  {
    module.RaiseEvent("Status.Error", "Module not configured!", "WeMo");
  }
  return new ResponseStatus(Status.Ok);
});

Action&lt;ModuleHelper&gt; pollWemoStatus = (module) =&gt;
{
  var ip = module.Parameter("WeMo.IpAddress").Value;
  if (ip.Length &gt; 8)
  {
    var request2 = Net.WebService("http://" + ip + ":49153/upnp/control/basicevent1")
      .AddHeader("Accept", "")
      .AddHeader("Content-type", "text/xml; charset=\"utf-8\"")
      .AddHeader("SOAPACTION", "\"urn:Belkin:service:basicevent:1#GetBinaryState\"")
      .Post(
      "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;&lt;s:Body&gt;&lt;u:GetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"&gt;&lt;BinaryState&gt;1&lt;/BinaryState&gt;&lt;/u:GetBinaryState&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;");
    var result2 = request2.GetData();

    if (!result2.Contains("1") &amp;&amp; !result2.Contains("0"))
    {
      Program.Notify("ERROR: no response from " + ip + " (" + module.Instance.Address + ")");
    }
    else if (result2.Contains("0"))
    {
      if (module.IsOn)
      {
        module.RaiseEvent("Status.Level", "0", "WeMo");
      }
    }
    else if (result2.Contains("1"))
    {
      if (module.IsOff)
      {
        module.RaiseEvent("Status.Level", "1", "WeMo");
      }
    }
  }
};

while (Program.IsEnabled)
{
  WeMo_Modules.Each((wemo) =&gt; {
    pollWemoStatus(wemo);
    return false;
  });
  Pause(WeMo_Refresh.DecimalValue);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>30</Address>
    <Name>WeMo</Name>
    <Description>Belkin Wemo integration</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.WeMo</ForDomains>
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>WeMo.IpAddress</Property>
        <Description>IP Address</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.WeMo</ForDomains>
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>WeMo.AlarmAD</Property>
        <Description>Synchronize on/off with Alarm System armed status</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
  <ScriptSetup>// list the program as custom weather widget
Program.UseWidget( "homegenie/environment/weather" )
  // set input fields parameters
  // &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
  .AddOption("Location", "London, UK", "City name", "wunderground.city")
  .AddOption("Language", "EN", "Language", "text")
  .AddOption("ApiKey", "?", "OpenWeatherMap API key (APPID)", "text")
  .AddOption("UpdateInterval", "30", "Update interval (minutes)", "slider:15:1440:15");

// initialize widget program parameters
Program.Parameter("Astronomy.Sunset").Value = "";
Program.Parameter("Astronomy.Sunrise").Value = "";
Program.Parameter("Conditions.City").Value = "";
Program.Parameter("Conditions.Temperature").Value = "";
Program.Parameter("Conditions.DisplayLocation").Value = "";
Program.Parameter("Conditions.IconType").Value = "";
Program.Parameter("Conditions.Description").Value = "";

Program.Parameter("EventsLogger.EnableLogging").Value = "On";
Program.Run();
</ScriptSetup>
  <ScriptSource>Action&lt;dynamic&gt; UpdateWeatherParameters = (data) =&gt; {
  Program.RaiseEvent("Conditions.City", data.city, "");
  Program.RaiseEvent("Conditions.DisplayLocation", data.city, "");
  Program.RaiseEvent("Conditions.Country", data.country, "");
  Program.RaiseEvent("Conditions.Description", data.weather_description, "");
  Program.RaiseEvent("Conditions.IconType", data.weather_icon, "");
  Program.RaiseEvent("Conditions.Status", data.weather_status, ""); // eg. cloudy, sunny, etc..
  Program.RaiseEvent("Conditions.LastUpdated", data.update_dt, "");
  // Add values to standard Sensor.* parameters
  Program.RaiseEvent("Sensor.Temperature", data.temperature, "");
  Program.RaiseEvent("Sensor.Temperature.Unit", "Celsius", "");
  Program.RaiseEvent("Sensor.Pressure", data.pressure, "");
  Program.RaiseEvent("Sensor.Pressure.Unit", "Mb", "");
  Program.RaiseEvent("Sensor.Wind.Speed", data.wind_speed, "");
  Program.RaiseEvent("Sensor.Wind.Speed.Unit", "Kph", "");
  Program.RaiseEvent("Sensor.Wind.Direction", data.wind_direction, "");
  Program.RaiseEvent("Sensor.Precipitation.Rain", data.rain_1h_mm, "");
  Program.RaiseEvent("Sensor.Precipitation.Rain.Unit", "1h", "");
  Program.RaiseEvent("Sensor.Precipitation.Snow", data.snow_1h_mm, "");
  Program.RaiseEvent("Sensor.Precipitation.Snow.Unit", "1h", "");
  // TODO: Program.Parameter("Sensor.UV").Value = "...";
};
Action&lt;int,dynamic&gt; UpdateForecastParameters = (day, data) =&gt; {
  Program.RaiseEvent("Conditions.Forecast." + day + ".Description", data.weather_description, "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Year", data.dt.Year.ToString("YYYY"), "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Month", data.dt.ToString("MMM"), "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Day", data.dt.ToString("dd"), "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Weekday", data.dt.ToString("dddd"), "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".IconType", data.weather_icon, "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Temperature", data.temperature, "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Temperature.Min", data.temperature_min, "");
  Program.RaiseEvent("Conditions.Forecast." + day + ".Temperature.Max", data.temperature_max, "");
};
Func&lt;string,string&gt; GetWeatherIcon = (type) =&gt; {
  var icon = type;
  switch(type)
  {
    case "clear": // 	clear sky
      icon = "01d";
      break;
    case "partlycloudy": // 	few clouds
      icon = "02d";
      break;
    case "scatteredclouds": // scattered clouds
      icon = "03d";
      break;
    case "cloudy": // broken clouds (?)
      icon = "04d";
      break;
    case "showerrain": // 	shower rain
      icon = "09d";
      break;
    case "rain": // rain
      icon = "10d";
      break;
    case "thunderstorms": // thunderstorms
      icon = "11d";
      break;
    case "snow": // snow
      icon = "13d";
      break;
    case "hazy": // mist
      icon = "50d";
      break;
    // Night icons
    case "clear_night": // 	clear sky
      icon = "01n";
      break;
    case "partlycloudy_night": // 	few clouds
      icon = "02n";
      break;
    case "scatteredclouds_night": // scattered clouds
      icon = "03n";
      break;
    case "cloudy_night": // broken clouds (?)
      icon = "04n";
      break;
    case "showerrain_night": // 	shower rain
      icon = "09n";
      break;
    case "rain_night": // rain
      icon = "10n";
      break;
    case "thunderstorms_night": // thunderstorms
      icon = "11n";
      break;
    case "snow_night": // snow
      icon = "13n";
      break;
    case "hazy_night": // mist
      icon = "50n";
      break;
  }
  return icon;
};
Func&lt;dynamic, dynamic&gt; CollectWeatherData = (weatherData) =&gt; {
  dynamic data = new ExpandoObject();
  data.dt = Utility.JavaTimeStampToDateTime(1000D*(int)weatherData.dt);
  data.update_dt = data.dt.ToLongDateString() + " " + TimeZoneInfo.ConvertTime(data.dt, TimeZoneInfo.Local).ToLongTimeString();
  data.temperature = weatherData.main.temp.ToString();
  data.temperature_min = weatherData.main.temp_min.ToString();
  data.temperature_max = weatherData.main.temp_max.ToString();
  data.pressure = weatherData.main.pressure.ToString();
  var rain_1h_mm = "0";
  var rain_3h_mm = "0";
  if (weatherData.rain != null) {
    if (weatherData.rain["1h"] != null)
      rain_1h_mm = weatherData.rain["1h"].ToString();
    if (weatherData.rain["3h"] != null)
      rain_3h_mm = weatherData.rain["3h"].ToString();
  }
  data.rain_1h_mm = rain_1h_mm;
  var snow_1h_mm = "0";
  var snow_3h_mm = "0";
  if (weatherData.snow != null) {
    if (weatherData.snow["1h"] != null)
      snow_1h_mm = weatherData.snow["1h"].ToString();
    if (weatherData.snow["3h"] != null)
      snow_3h_mm = weatherData.snow["3h"].ToString();
  }
  data.snow_1h_mm = snow_1h_mm;
  data.wind_speed = weatherData.wind.speed.ToString();
  data.wind_direction = "";
  if (weatherData.wind.deg != null)
  	data.wind_direction = weatherData.wind.deg.ToString();
  data.weather_status = weatherData.weather[0].main.ToString();
  data.weather_description = weatherData.weather[0].description.ToString();
  data.weather_icon = GetWeatherIcon(weatherData.weather[0].icon.ToString());
  // city and country fields are not present in forecast data
  if (weatherData.name != null)
  	data.city = weatherData.name.ToString();
  if (weatherData.sys != null &amp;&amp; weatherData.sys.country != null)
  	data.country = weatherData.sys.country.ToString();
  return data;
};

When.WebServiceCallReceived("HomeAutomation.OpenWeatherMap", (args) =&gt; {
  var request = Program.ParseApiCall(args);
  if (request.Address == "2.5" &amp;&amp; request.Command == "Search.Location") {
    var query = request.GetOption(0);
    if (query.IndexOf("?") &gt; 0) {
      query = query.Substring(0, query.IndexOf("?"));
    }
    var googleApiUrl = "https://maps.googleapis.com/maps/api/place/autocomplete/json?types=(cities)&amp;input=" + query + "&amp;key=AIzaSyCSSMsdcyihgUsHWYCwGcGXBSNu1kWgCGQ";
    var result = Net.WebService(googleApiUrl).GetData();
    var matches = new List&lt;dynamic&gt;();
    foreach (var match in result.predictions) {
      matches.Add(match);
    }
    return matches;
  }
  return new ResponseText("ERROR");
});

while (Program.IsEnabled)
{
  string location = Program.Option("Location").Value;
  string language = Program.Option("Language").Value;
  string apikey = Program.Option("ApiKey").Value.Trim();

  if (!apikey.Contains("?") &amp;&amp; apikey.Length &gt; 0)
  {
    try
    {
      string webserviceurl = "https://api.openweathermap.org/data/2.5/weather?q=" + location + "&amp;lang=" + language + "&amp;units=metric&amp;appid=" + apikey;
      var weatherData = Net.WebService(webserviceurl).GetData();

      var sunset = Utility.JavaTimeStampToDateTime(1000D*(int)weatherData.sys.sunset);
      var sunrise = Utility.JavaTimeStampToDateTime(1000D*(int)weatherData.sys.sunrise);

      Program.RaiseEvent("Astronomy.Sunset", TimeZoneInfo.ConvertTime(sunset, TimeZoneInfo.Local).ToShortTimeString(), "");
      Program.RaiseEvent("Astronomy.Sunrise", TimeZoneInfo.ConvertTime(sunrise, TimeZoneInfo.Local).ToShortTimeString(), "");

      var data = CollectWeatherData(weatherData);
      UpdateWeatherParameters(data);

      // get forecast data
	  webserviceurl = "https://api.openweathermap.org/data/2.5/forecast?q=" + location + "&amp;lang="+language+"&amp;units=metric&amp;appid=" + apikey;
      var forecast = Net.WebService(webserviceurl).GetData();

      var forecastDay = 1;
      var nextDay = DateTime.UtcNow.AddDays(1); nextDay = nextDay.Date + new TimeSpan(12, 0, 0);
      foreach(var fc in forecast.list)
      {
        var forecastTime = Utility.JavaTimeStampToDateTime(1000D*(int)fc.dt);
        if (forecastTime.Equals(nextDay)) {
          // collect forecast data for current forecastDay

          var forecastData = CollectWeatherData(fc);
          UpdateForecastParameters(forecastDay, forecastData);

          nextDay = nextDay.AddDays(1);
          forecastDay++;
        }
        // process up to 3 days
        if (forecastDay &gt; 3) break;
      }
      Program.RaiseEvent("Program.UiRefresh", "Data Updated", "");

    }
    catch (Exception e)
    {

      Program.Notify("ERROR: unable to get data from service. " + e.Message);
      Console.WriteLine( e.Message );
      Pause(10);

    }
  }
  //
  var delayMins = Program.Option("UpdateInterval").DecimalValue;
  if (delayMins &lt; 1) delayMins = 1;
  Pause(delayMins*60);
}
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>34</Address>
  <Name>OpenWeatherMap</Name>
  <Description>Current weather and forecast information from &lt;strong&gt;Open Weather Map&lt;/strong&gt; service.
To activate this widget enter a valid &lt;strong&gt;API key&lt;/strong&gt; below. Follow instructions from &lt;u&gt;https://openweathermap.org/appid&lt;/u&gt; to get your free API key.
</Description>
  <Group>Weather and Environment</Group>
  <Features />
  <AutoRestartEnabled>false</AutoRestartEnabled>
  <ActivationTime>2021-03-28T15:47:42.0936685Z</ActivationTime>
  <TriggerTime>2021-03-28T15:47:42.1178686Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.AddOption("PollInterval", "15", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Shutter", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptSetup>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level
  Modules.WithFeature("HomeGenie.ZWaveLevelPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    var nif = "";
    // node information frame
    if (module.HasParameter("ZWaveNode.NodeInfo"))
      nif = (" " + module.Parameter("ZWaveNode.NodeInfo").Value + " ");
    if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
    {
      module.Command("SwitchMultilevel.Get").Execute();
    }
    else if (nif.Contains(" 25 ")) // 0x25 Switch Binary
    {
      module.Command("SwitchBinary.Get").Execute();
    }
    else
    {
      module.Command("Basic.Get").Execute();
    }
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>39</Address>
    <Name>Level Poll</Name>
    <Description>Periodically query lights and switches level.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature("", "Dimmer", "EnergyManagement.EnergySavingMode", "Energy Saving Mode enabled light", "checkbox")
  .AddFeature("", "Dimmer", "EnergyManagement.EnergySavingLevel", "Keep level below this value (%)", "slider:20:80:1")
  .Run();
</ScriptSetup>
    <ScriptSource>// We want to do further processing whenever a module changes
When.ModuleParameterChanged( (module, parameter) =&gt; {
  if (module.HasFeature("EnergyManagement.EnergySavingMode") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; parameter.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var newlevel = module.Parameter("EnergyManagement.EnergySavingLevel").DecimalValue;
    if (newlevel &lt;= 0)
    {
      module.Parameter("EnergyManagement.EnergySavingLevel").Value = "40";
      newlevel = 40;
    }
    //
    if (level.DecimalValue &gt; (newlevel / 100D))
    {
      Program.Notify(module.Instance.Address + "&lt;br&gt;" + module.Instance.Name + " set to " + newlevel + "%");
      module.Level = newlevel;
      return false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>82</Address>
    <Name>Energy Saving Mode</Name>
    <Description>When enabled, ensures that dimmer level is kept below a given percentage value.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingMode</Property>
        <Description>Energy Saving Mode enabled light</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:20:80:1</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingLevel</Property>
        <Description>Keep level below this value (%)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:53.424125Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.246957Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddVirtualModules("Media.IpCamera", "Sensor", "homegenie/generic/camerainput", 1, 10)
  .AddFeature("Media.IpCamera", "Sensor", "IpCamera.ImageURL", "Camera image API URL (see your camera docs)", "text")
  .AddFeature("Media.IpCamera", "Sensor", "IpCamera.Username", "Username (optional)", "text")
  .AddFeature("Media.IpCamera", "Sensor", "IpCamera.Password", "Password (optional)", "password")
  .Run();
</ScriptSetup>
    <ScriptSource>var cameraModules = Modules.InDomain("Media.IpCamera");
// initialize camera modules
cameraModules.Each((module) =&gt; {
  module.Parameter("Image.URL").Value = "/api/Media.IpCamera/" + module.Instance.Address + "/Camera.GetPicture/";
  return false;
});

// - http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/...
When.WebServiceCallReceived("Media.IpCamera/", ( args ) =&gt; {
  var request = Program.ParseApiCall(args);
  object data = "{ 'ResponseValue' : 'ERROR' }";
  try
  {
    //string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    var module = cameraModules.WithAddress(request.Address).Get();
    switch(request.Command)
    {
      // eg. http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/Camera.GetPicture
      case "Camera.GetPicture":
        data = Net
          .WebService(module.Parameter("IpCamera.ImageURL").Value)
          .WithCredentials(module.Parameter("IpCamera.Username").Value, module.Parameter("IpCamera.Password").Value)
          .GetBytes();
        break;
      case "Camera.MotionDetected":
        data = "{ 'ResponseValue' : 'OK' }";
        // blink Sensor.MotionDetect parameter
        module.RaiseEvent("Sensor.MotionDetect", "255", "Generic IP Camera");
        Pause(1);
        module.RaiseEvent("Sensor.MotionDetect", "0", "Generic IP Camera");
        break;
    }
  } catch (Exception e) {
    Program.Notify("IpCamera ERROR!", e.Message);
  }
  return data;
});
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>88</Address>
    <Name>Generic IP Camera</Name>
    <Description>Generic IP Camera driver.</Description>
    <Group>Devices and Things</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>var sensorTypes = "Sensor,DoorWindow,DoorLock : Status.Level,Sensor.MotionDetect,Sensor.Alarm,Sensor.DoorWindow";
var alarmTypes = "Siren,Light,Dimmer,Switch";
Program.Setup(() =&gt; {
  Program
    .UseWidget("homegenie/generic/securitysystem")

    .AddFeature("", sensorTypes, "HomeGenie.SecuritySensor", "Use as Security Sensor", "checkbox")
    .AddFeature("", sensorTypes, "HomeGenie.SecurityTriggerHome", "Also trigger when armed Home", "checkbox")
    .AddFeature("", alarmTypes, "HomeGenie.SecurityAlarm", "Use as Security Alarm", "checkbox")

    .AddOption("System.ArmDelay", "10", "1. Arm Delay (seconds)", "slider:0:60:1")
    .AddOption("System.SirenStartTime", "0", "2. Sirens Start Delay (seconds)", "slider:0:30:1")
    .AddOption("System.SirenMaxTime", "30", "3. Sirens Max Time (seconds, 0=infinite)", "slider:0:1800:1")

    .AddOption("Email.Recipients", "", "4. Comma separated list of recipients e-mails for alarm notifications", "text")

    .AddOption("Trigger.ArmedProgram", "", "5. Program to run when armed", "program.text")
    .AddOption("Trigger.DisarmedProgram", "", "6. Program to run when disarmed", "program.text")
    .AddOption("Trigger.TriggeredProgram", "", "7. Program to run when triggered", "program.text");
});
Program.Parameter("EventsLogger.EnableLogging").Value = "On";
Program.Run();
</ScriptSetup>
    <ScriptSource>//
// init program parameters
//
var STATUS_DISARMED = "Disarmed";
var STATUS_ARMED_AWAY = "Away";
var STATUS_ARMED_HOME = "Home";

// Events History
var history = new List&lt;dynamic&gt;();
var historyLimit = 24; // hours
var AddHistoryEvent = new Action&lt;Module, ModuleParameter&gt;((mod, param)=&gt;{
  dynamic evt = new ExpandoObject();
  evt.Domain = mod.Domain;
  evt.Address = mod.Address;
  evt.Name = mod.Name;
  evt.Parameter = param.Name;
  evt.Value = param.Value;
  evt.Timestamp = param.UpdateTime;
  // remove any previous event of the same type (the history only keep the last occurrence of a same event)
  history.RemoveAll(e =&gt; e.Domain == evt.Domain &amp;&amp; e.Address == evt.Address &amp;&amp; e.Parameter == evt.Parameter &amp;&amp; e.Value == evt.Value);
  history.Add(evt);
  // keeep size within historyLimit (minutes)
  while ((DateTime.UtcNow - history[history.Count - 1].Timestamp).TotalHours &gt; historyLimit)
  {
    history.RemoveAll(sv =&gt; (DateTime.UtcNow - sv.Timestamp).TotalHours &gt; historyLimit);
  }
  // this event will cause the widget to update its data
  Program.RaiseEvent("Program.UiRefresh", "refresh", "Security system sensor event");
});

var _armdisarm = new Action&lt;bool&gt;((armHome)=&gt;{
  Program.RunAsyncTask(()=&gt; {
    if (Program.Parameter("Status.Level").Value == "0")
    {
      // disarming
      Program.RaiseEvent("HomeGenie.SecurityTriggered", "0", "Security System");
    }
    else
    {
      // arming
      Pause( Program.Option("System.ArmDelay").DecimalValue );
    }
    var status = "";
    if (Program.Parameter("Status.Level").Value == "0")
      status = STATUS_DISARMED;
    else
      status = (armHome ? STATUS_ARMED_HOME : STATUS_ARMED_AWAY);
    Program.RaiseEvent("HomeGenie.SecurityArmed", status, "Security System");
    // run armed/disarmed program
    if (Program.Parameter("Status.Level").Value != "0")
    {
      var armedProgram = Program.Option("Trigger.ArmedProgram").Value;
      if (armedProgram != "")
      {
        Program.Run(armedProgram);
      }
    }
    else
    {
      var disarmedProgram = Program.Option("Trigger.DisarmedProgram").Value;
      if (disarmedProgram != "")
      {
        Program.Run(disarmedProgram);
      }
    }
  });
});

// module events handling
When.ModuleParameterChanged((module, parameter)=&gt; {
  bool moduleAlarmed = false;
  if (module.HasFeature("HomeGenie.SecuritySensor")
      &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value != "1"
      &amp;&amp; (   parameter.Name == "Status.Level"
          || parameter.Name == "Status.DoorLock"
          || parameter.Name == "Sensor.Generic"
          || parameter.Name == "Sensor.Alarm"
          || parameter.Name == "Sensor.Tamper"
          || parameter.Name == "Sensor.MotionDetect"
          || parameter.Name == "Sensor.DoorWindow"
          || parameter.Name == "Sensor.Flood"
          || parameter.Name == "Sensor.Smoke"
          || parameter.Name == "Sensor.Heat"
          || parameter.Name == "Sensor.CarbonMonoxide"
          || parameter.Name == "Sensor.CarbonDioxide" ))
  {
    AddHistoryEvent(module.Instance, parameter);
    if (parameter.DecimalValue &gt; 0 &amp;&amp; Program.Parameter("HomeGenie.SecurityArmed").Value != STATUS_DISARMED)
    {
      if (Program.Parameter("HomeGenie.SecurityArmed").Value == STATUS_ARMED_AWAY ||
          (Program.Parameter("HomeGenie.SecurityArmed").Value == STATUS_ARMED_HOME &amp;&amp; module.HasFeature("HomeGenie.SecurityTriggerHome")))
        moduleAlarmed = true;
    }
  }
  if (moduleAlarmed)
  {
    Program.RaiseEvent("HomeGenie.SecurityTriggerSource",
                       	module.Instance.Name + " " + parameter.Name + " (" +
                        module.Instance.Domain + "." +
                        module.Instance.Address + ")", ""
                      );
    Program.RaiseEvent("HomeGenie.SecurityTriggered", "1", "Security System");
    var triggeredProgram = Program.Option("Trigger.TriggeredProgram").Value;
    if (triggeredProgram != "")
    {
      Program.Run(triggeredProgram);
    }
    return false;
  }
  return true;
});

// web service calls handling
When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args) =&gt; {
  var request = Program.ParseApiCall(args);
  object res = null;
  try
  {
    if (request.Address == Program.Module.Address)
    {
      switch(request.Command)
      {
        case "Control.On":
        case "Control.ArmAway":
        	Program.RaiseEvent("Status.Level", "1", "Security System");
        	_armdisarm(false);
        	res = new ResponseText("ARMING AWAY");
        	break;
        case "Control.ArmHome":
        	Program.RaiseEvent("Status.Level", "1", "Security System");
        	_armdisarm(true);
        	res = new ResponseText("ARMING HOME");
        	break;
        case "Control.Off":
        case "Control.Disarm":
        	Program.RaiseEvent("Status.Level", "0", "Security System");
        	_armdisarm(false);
        	res = new ResponseText("DISARMED");
        	break;
        case "Events.List":
        	res = history; // objects are automatically serialized to JSON
        	break;
      }
      if (request.Command != "Events.List") {
      	Program.UpdateModuleDatabase();
      }
    }
  }
  catch (Exception ex)
  {
    res = new ResponseText("ERROR: " + ex.Message + " " + ex.StackTrace);
  }
  return res;
});

// main program loop
var sirenModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Siren");
var alarmModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Dimmer,Switch,Light");

if (Program.Parameter("Status.Level").Value != "0") {
  var triggeredProgram = Program.Option("Trigger.TriggeredProgram").Value;
  if (triggeredProgram != "")
  {
    Program.Run(triggeredProgram);
  }
}

while (Program.IsEnabled)
{
  if (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
  {
    var watchTimer = new System.Diagnostics.Stopwatch();
    watchTimer.Start();

    // send e-mail
    var subject = "HomeGenie Security System Alarmed";
    var messagetext = "Security System Alarm triggered by " + Program.Parameter("HomeGenie.SecurityTriggerSource").Value;
    var recipients = Program.Option("Email.Recipients").Value;
    if (recipients != "")
    {
      Program.RunAsyncTask(()=&gt;{
        Net.SendMessage(recipients, subject, messagetext);
      });
    }

    // Flashing lights thread starts asynchronously
    Program.RunAsyncTask(()=&gt;{
      while (Program.IsEnabled &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
      {
        // flashing SecurityAlarm lights
        alarmModules.Toggle();
        Pause(1);
        alarmModules.Toggle();
        Pause(1);
      }
      alarmModules.Off();
    });

    // Sirens loop
    int sirenStatus = 0;
    while (Program.IsEnabled &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
    {
      if (sirenStatus == 0 &amp;&amp; watchTimer.Elapsed.TotalSeconds &gt;= Program.Option("System.SirenStartTime").DecimalValue)
      {
        watchTimer.Stop();
        sirenModules.On();
        watchTimer = new System.Diagnostics.Stopwatch();
        watchTimer.Start();
        sirenStatus = 1;
      }
      else if (sirenStatus == 1 &amp;&amp; Program.Option("System.SirenMaxTime").DecimalValue &gt; 0 &amp;&amp; watchTimer.Elapsed.TotalSeconds &gt;= Program.Option("System.SirenMaxTime").DecimalValue)
      {
        // turn off sirens if max time was set and elapsed
        sirenModules.Off();
        sirenStatus = 2;
      }
    }
    sirenModules.Off();
    watchTimer.Stop();
  }
  Pause(1);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>90</Address>
    <Name>Security Alarm System</Name>
    <Description>Basic Security Alarm System</Description>
    <Group>Security</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow,DoorLock : Status.Level,Sensor.MotionDetect,Sensor.Alarm,Sensor.DoorWindow</ForTypes>
        <Property>HomeGenie.SecuritySensor</Property>
        <Description>Use as Security Sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow,DoorLock : Status.Level,Sensor.MotionDetect,Sensor.Alarm,Sensor.DoorWindow</ForTypes>
        <Property>HomeGenie.SecurityTriggerHome</Property>
        <Description>Also trigger when armed Home</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Siren,Light,Dimmer,Switch</ForTypes>
        <Property>HomeGenie.SecurityAlarm</Property>
        <Description>Use as Security Alarm</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:54.529825Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.334367Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.AddFeature("HomeAutomation.ZWave", "DoorWindow,DoorLock,Thermostat,Sensor", "HomeGenie.ZWaveWakeUpAlwaysAwake", "Set node as always awake", "checkbox");
Program.AddFeature("HomeAutomation.ZWave", "DoorWindow,DoorLock,Thermostat,Sensor", "HomeGenie.ZWaveWakeUpSleep", "Send to sleep after given delay (seconds, 0=disabled)", "slider:0:60:1");
Program.Run();
</ScriptSetup>
    <ScriptSource>When.ModuleParameterChanged((module, parameter) =&gt; {

  if (parameter.Name == "ZWaveNode.WakeUpNotify")
  {
    var nodeinfo = module.Parameter("ZWaveNode.NodeInfo");
    if (nodeinfo != null)
    {
      // nif contains all command classes supported by this module
      string nif = " " + nodeinfo.Value + " ";
      if (nif.Contains(" 84 ") || nif.Contains(" 25 ") || nif.Contains(" 26 ") || nif.Contains(" 43 "))
      {
        if (nif.Contains(" 60 ")) // MultiInstance
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " MultiInstance Get");
          // query first 4 instances
          for (int instance = 1; instance &lt; 4; instance ++)
          {
            if (nif.Contains(" 30 ")) // Sensor Binary
            {
              module.Command("MultiInstance.Get").Execute("Sensor.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 31 ")) // Sensor MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Sensor.MultiLevel/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 25 ")) // Switch Binary
            {
              module.Command("MultiInstance.Get").Execute("Switch.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 26 ")) // Switch MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Switch.MultiLevel/" + instance);
              Pause(.2);
            }
          }
        }
        else if (nif.Contains(" 27 ")) // Any switch
        {
          if (nif.Contains(" 26 "))
            Pause(3); // Pause 3 second to ensure dimmers get to final value
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
        //
        // query Thermostat set point
        if (nif.Contains(" 43 ")) // Thermostat
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Thermostat SetPoint Get Heating");
          module.Command("Thermostat.SetPointGet").Execute("Heating");
          Pause(.2);
        }
        //
        // query Battery level
        if (nif.Contains(" 80 ")) // Battery
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Battery Get");
          module.Command("Battery.Get").Execute();
          Pause(.2);
        }
        //
        // query Basic value
        if (nif.Contains(" 20 ")) // Basic
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
        if (module.HasFeature("HomeGenie.ZWaveWakeUpAlwaysAwake"))
        {
          module.Command("WakeUp.SetAlwaysAwake").Set("1");
        }
        else
        {
          module.Command("WakeUp.SetAlwaysAwake").Set("0");
	      // no more info, send the node to sleep
          var sendToSleepDelay = module.Parameter("HomeGenie.ZWaveWakeUpSleep").DecimalValue;
          if (sendToSleepDelay &gt; 0)
          {
            Pause(sendToSleepDelay);
            Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Send to Sleep");
            module.Command("WakeUp.SendToSleep").Execute();
          }
        }
      }
    }
  }

  return true; // continue processing event
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>91</Address>
    <Name>Query on Wake Up</Name>
    <Description>Query sensors' data and battery level when a node wakes up.</Description>
    <Group>Z-Wave</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>DoorWindow,DoorLock,Thermostat,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveWakeUpAlwaysAwake</Property>
        <Description>Set node as always awake</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:60:1</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>DoorWindow,DoorLock,Thermostat,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveWakeUpSleep</Property>
        <Description>Send to sleep after given delay (seconds, 0=disabled)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:55.073254Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.303551Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddOption("Email.Sender", "", "1. E-Mail address", "text")
  .AddOption("Email.SmtpServer", "", "2. SMTP Mail Server address", "text")
  .AddOption("Email.SmtpUserName", "", "3. SMTP username (optional)", "text")
  .AddOption("Email.SmtpPassword", "", "4. SMTP password (optional)", "password")
  .AddOption("Email.SmtpPort", "25", "5. SMTP Mail Server port", "text")
  .AddOption("Email.SmtpUseSsl", "false", "6. SMTP Mail Server use SSL", "checkbox")
  .Run();
</ScriptSetup>
    <ScriptSource>// detect when an option of this program is changed and store the new value to system settings
When.ModuleParameterChanged((module, parameter)=&gt;{
  if (module.Instance.Equals(Program.Module) &amp;&amp; parameter.Name.StartsWith("ConfigureOptions.")) {
	var settingName = parameter.Name.Substring(17); // skip "ConfigureOptions." part
    Settings.Parameter("Messaging."+settingName).Value = parameter.Value;
  }
  return true;
});
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>142</Address>
    <Name>E-Mail Account</Name>
    <Description>Store e-mail account information for sending/receiving emails.</Description>
    <Group>Messaging and Social</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature("", "Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", "MobileNotification.SendChanges", "Push notifications to Windows Phone client", "checkbox")
  .Run();
</ScriptSetup>
    <ScriptSource>string notificationurl = "";
var monitor = Program.WithName("Energy Monitor");

Func&lt;bool&gt; updateTileData = ()=&gt; {

  var devs = monitor.Parameter("EnergyMonitor.OperatingDevices").DecimalValue;
  // Create the Tile message.
  string tileMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
    "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
    "&lt;wp:Tile&gt;" +
    "&lt;wp:Count&gt;0&lt;/wp:Count&gt;" +
    //          "&lt;wp:BackgroundImage&gt;&lt;/wp:BackgroundImage&gt;" +
    //          "&lt;wp:Count&gt;" + (notificationcount++).ToString() + "&lt;/wp:Count&gt;" +
    //          "&lt;wp:Title&gt;HomeGenie Beta&lt;/wp:Title&gt;" +
    "&lt;wp:BackBackgroundImage&gt;&lt;/wp:BackBackgroundImage&gt;" +
    "&lt;wp:BackTitle&gt;Counter " + monitor.Parameter("EnergyMonitor.KwCounter").Value + " Kw&lt;/wp:BackTitle&gt;";
  if (devs &gt; 0)
  {
    tileMessage += "&lt;wp:BackContent&gt;" + devs + " device" + (devs &gt; 1 ? "s" : "") +
      "\nLoad\n" + monitor.Parameter("EnergyMonitor.KwLoad").Value + " Kw&lt;/wp:BackContent&gt;";
  }
  else
  {
    tileMessage += "&lt;wp:BackContent&gt;&lt;/wp:BackContent&gt;";
  }
  tileMessage += "&lt;/wp:Tile&gt; " + "&lt;/wp:Notification&gt;";

  //var response =
  Net.WebService(notificationurl)
    .AddHeader("Content-type", "text/xml")
    .AddHeader("X-WindowsPhone-Target", "token")
    .AddHeader("X-NotificationClass", "1")
    .Post(tileMessage)
    .Call();

  return true;

};

When.WebServiceCallReceived("HomeAutomaion.HomeGenie/Messaging", ( args ) =&gt; {
  var notificationdata = ((string)args).Substring(("HomeAutomaion.HomeGenie/Messaging/WindowsPhone.RegisterNotificationUrl/").Length);
  //var deviceid = notificationdata.Substring(0, notificationdata.IndexOf('/'));
  notificationurl = notificationdata.Substring(notificationdata.IndexOf('/') + 1);
  //
  if (notificationurl != "") updateTileData();
  //
  return "{ 'ResponseValue' : 'OK' }";
});

When.ModuleParameterChanged( (module, property) =&gt; {

  if (notificationurl != "" &amp;&amp; module.HasFeature("MobileNotification.SendChanges") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
  {
    if (property.DecimalValue != property.Statistics.Last.Value) // TODO: check time from lastvalue as well to prevent flooding
    {
      var pname = property.Name;
      if (pname.IndexOf('.') &gt; 0)
      {
        pname = pname.Substring(pname.IndexOf('.') + 1);
      }
      // Create the Tile message.
      string toastMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
        "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
        "&lt;wp:Toast&gt;" +
        "&lt;wp:Text1&gt;" + module.Instance.Name + "&lt;/wp:Text1&gt;" +
        "&lt;wp:Text2&gt;" + pname + " = " + property.Value + "&lt;/wp:Text2&gt;" +
        "&lt;wp:Param&gt;/GroupsPage.xaml?NavigatedFrom=Toast Notification&lt;/wp:Param&gt;" +
        "&lt;/wp:Toast&gt; " +
        "&lt;/wp:Notification&gt;";

      //var response =
      Net.WebService(notificationurl)
        .AddHeader("Content-type", "text/xml")
        .AddHeader("X-WindowsPhone-Target", "toast")
        .AddHeader("X-NotificationClass", "2")
        .Post(toastMessage)
        .Call();
    }

  }

  // returning true, will route event to other listeners
  return true;

});

while(Program.IsEnabled)
{
  if (notificationurl != "")
  {
    updateTileData();
    Pause(300);
  }
  Pause(5);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>200</Address>
    <Name>Windows Phone Push Notification Service</Name>
    <Description>Windows Phone push notification service.
It sends toast and tile updates to Windows Phone client.
Currently limited to one client channel.</Description>
    <Group>Messaging and Social</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow</ForTypes>
        <Property>MobileNotification.SendChanges</Property>
        <Description>Push notifications to Windows Phone client</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(() =&gt; {
  Program
    .AddVirtualModule("HomeAutomation.EnergyMonitor", "1", "Sensor", "homegenie/generic/energymonitor")
    .AddFeature("", "Light,Dimmer,Switch : /^Status.Level$/", "EnergyManagement.MonitorStatus", "Monitor status", "checkbox")
    .AddFeature("", "Light,Dimmer,Switch,Sensor : /^Meter.Watts$|^Status.Level$/", "EnergyManagement.MonitorWatts", "Monitor watts", "checkbox");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>var energyMonitor = Modules.InDomain("HomeAutomation.EnergyMonitor").WithAddress("1").Get();
var kwCounter = energyMonitor.Parameter("EnergyMonitor.KwCounter");
var kwCounterToday = energyMonitor.Parameter("EnergyMonitor.KwCounter.Today");
var wattCounter = energyMonitor.Parameter("EnergyMonitor.WattCounter");
var wattCounterToday = energyMonitor.Parameter("EnergyMonitor.WattCounter.Today");
var kwLoad = energyMonitor.Parameter("EnergyMonitor.KwLoad");
var wattLoad = energyMonitor.Parameter("EnergyMonitor.WattLoad");
var operatingDevices = energyMonitor.Parameter("EnergyMonitor.OperatingDevices");
var operatingLights = energyMonitor.Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = energyMonitor.Parameter("EnergyMonitor.OperatingSwitches");

// initialize
energyMonitor.Instance.Name = "Energy Monitor";
kwLoad.Value = "0";
wattLoad.Value = "0";
operatingDevices.Value = "0";
operatingLights.Value = "0";
operatingSwitches.Value = "0";

// select all modules supporting metering
var monitorModules = Modules.WithFeature("EnergyManagement.MonitorStatus,EnergyManagement.MonitorWatts");
var updateRequired = false;
var counterUpdateTimestamp = DateTime.Now;

var raiseEvent = new Func&lt;ModuleParameter,bool&gt;((p) =&gt; {
  energyMonitor.RaiseEvent(p.Name, p.Value, "");
  return true;
});

When.ModuleParameterChanged((module, property) =&gt; {
  if (module.HasFeature("EnergyManagement.MonitorStatus") || module.HasFeature("EnergyManagement.MonitorWatts")) {
    if (property.Is("Status.Level") || property.Is("Meter.Watts")) {
		updateRequired = true;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

double counterUpdateInterval = 10;
var UpdateEnergyLoad = new Func&lt;bool&gt;(()=&gt;{
  var totalLoad = 0d;
  int devcount = 0, lightcount = 0, switchcount = 0;
  var now = DateTime.UtcNow;
  bool updateCounter = (DateTime.Now - counterUpdateTimestamp).TotalSeconds &gt;= counterUpdateInterval;
  monitorModules.Each((mod)=&gt;{
    if (mod.Parameter("Meter.Watts").DecimalValue &gt; 0 || mod.Parameter("Status.Level").DecimalValue &gt; 0)
    {
      if (mod.HasFeature("EnergyManagement.MonitorWatts") &amp;&amp; mod.Parameter("Meter.Watts").IdleTime &lt; 300) // drop value if not updated in the last 5 minutes
      {
        if (updateCounter) {
          var avgWatt = mod.Parameter("Meter.Watts").Statistics.History
            .FindAll(sv =&gt; (sv.Timestamp - now).TotalSeconds &lt; counterUpdateInterval)
            .Select(sv =&gt; sv.Value)
            .Average();
          totalLoad += avgWatt;
        } else {
          totalLoad += mod.Parameter("Meter.Watts").DecimalValue;
        }
      }
      if (mod.HasFeature("EnergyManagement.MonitorStatus"))
      {
        if (mod.IsOfDeviceType("Light") || mod.IsOfDeviceType("Dimmer"))
        {
          lightcount++;
        }
        else
        {
          switchcount++;
        }
        devcount++;
      }
    }
    return false;
  });
  // Update kw and watt counters (every 60 seconds)
  if (updateCounter)
  {
    counterUpdateTimestamp = DateTime.Now;
    var totalWattCounter = wattCounter.DecimalValue + (totalLoad / 60 / (60 / counterUpdateInterval));
    wattCounter.SetData(totalWattCounter);
    kwCounter.SetData(totalWattCounter / 1000D);
    var todayWattCounter = wattCounterToday.DecimalValue + (totalLoad / 60 / (60 / counterUpdateInterval));
    wattCounterToday.SetData(todayWattCounter);
    kwCounterToday.SetData(todayWattCounter / 1000D);
    raiseEvent(wattCounter);
    raiseEvent(kwCounter);
    raiseEvent(wattCounterToday);
    raiseEvent(kwCounterToday);
  }
  // Update current load/devices stats
  kwLoad.Value = (totalLoad / 1000D).ToString("0.000", CultureInfo.InvariantCulture);
  raiseEvent(kwLoad);
  wattLoad.Value = totalLoad.ToString("0.000", CultureInfo.InvariantCulture);
  raiseEvent(wattLoad);
  operatingDevices.Value = devcount.ToString("0");
  raiseEvent(operatingDevices);
  operatingLights.Value = lightcount.ToString("0");
  raiseEvent(operatingLights);
  operatingSwitches.Value = switchcount.ToString("0");
  raiseEvent(operatingSwitches);
  // TODO: deprecate Program.UiRefresh field
  energyMonitor.RaiseEvent("Program.UiRefresh", "Energy Monitor data updated", "");
  return true;
});

When.WebServiceCallReceived("HomeAutomation.EnergyMonitor", (args)=&gt;{
  var api = new MigInterfaceCommand((string)args);
  if (api.Command == "Counter.Reset")
  {
    kwCounter.Value = "0";
    wattCounter.Value = "0";
    UpdateEnergyLoad();
  }
  dynamic response = new System.Dynamic.ExpandoObject();
  response.KiloWattLoad = kwLoad.Value;
  response.KiloWattCouter = kwCounter.Value;
  response.WattCounter = wattCounter.Value;
  response.KiloWattCounterToday = kwCounterToday.Value;
  response.WattCounterToday = wattCounterToday.Value;
  response.WattLoad = wattLoad.Value;
  response.OperatingDevices = operatingDevices.Value;
  response.OperatingLights = operatingLights.Value;
  response.OperatingSwitches = operatingSwitches.Value;
  return "[" + Newtonsoft.Json.JsonConvert.SerializeObject(response) + "]";
});

var midNightReset = false;
while (Program.IsEnabled)
{
  if (updateRequired || (DateTime.Now - counterUpdateTimestamp).TotalSeconds &gt;= 6) {
  	updateRequired = false;
    UpdateEnergyLoad();
  }
  // Reset daily counters within first minute after midnight
  if ((DateTime.Now - DateTime.Today).TotalSeconds &lt; 60 &amp;&amp; !midNightReset)
  {
    wattCounterToday.Value = "0";
    kwCounterToday.Value = "0";
    midNightReset = true;
  }
  else if ((DateTime.Now - DateTime.Today).TotalSeconds &gt;= 60 &amp;&amp; midNightReset)
  {
    midNightReset = false;
  }
  Pause(5);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>81</Address>
    <Name>Energy Monitor</Name>
    <Description>Collects and display information about
device status and energy consumption.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch : /^Status.Level$/</ForTypes>
        <Property>EnergyManagement.MonitorStatus</Property>
        <Description>Monitor status</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor : /^Meter.Watts$|^Status.Level$/</ForTypes>
        <Property>EnergyManagement.MonitorWatts</Property>
        <Description>Monitor watts</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:56.692695Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.402106Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Run();
</ScriptSetup>
    <ScriptSource>var checkVirtualModules = new Func&lt;ModuleHelper, bool&gt;((module)=&gt;{
  var defaultType = "Switch";
  var parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchBinary.Count");
  if (parameter.DecimalValue == 0)
  {
    // if not SwitchBinary, try SwitchMultilevel
    defaultType = "Dimmer";
    parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchMultiLevel.Count");
  }
  // ADD A VIRTUAL MODULE FOR EACH INSTANCE
  for (int m = 1; m &lt;= parameter.DecimalValue; m++)
  {
    string address = module.Instance.Address + "." + m.ToString();
    var virtualModule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(address).Get();
    if (!virtualModule.Exists)
    {
      Program.AddVirtualModule("HomeAutomation.ZWave", address, defaultType, "");
      Program.Notify("MultiChannel Z-Wave", "Adding virtual module " + address);
    }
  }
  return true;
});

When.ModuleParameterChanged((module, parameter) =&gt; {
  lock(this)
    if (!parameter.Name.EndsWith(".Count") &amp;&amp; (parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchMultiLevel.") || parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchBinary.")))
  {
    var path = parameter.Name.Split('.');
    //var eventType = path[2]; 	// "SwitchMultiLevel" or "SwitchBinary"
    var instance = path[3];		// the instance number

    var id = 0;
    if (int.TryParse(instance, out id))
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(module.Instance.Address + "." + instance).Get();
      virtualmodule.RaiseEvent("Status.Level", parameter.Value, "ZWaveNode");
    }

  }
  else if (parameter.Name == "ZWaveNode.NodeInfo")
  {
    var nif = (" " + parameter.Value + " "); // node information frame
    if (nif.Contains(" 60 ")) // MultiInstance/Channel
    {
      // ReQUEST instances count
      if (nif.Contains(" 25 ")) // 0x25 Switch Binary
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.Binary");
      }
      if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.MultiLevel");
      }
      checkVirtualModules(module);
    }
  }

  return true; // continue processing event
});

When.WebServiceCallReceived("HomeAutomation.ZWave", (args) =&gt; {

  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string nodeid = reqs[1];
    string instance = "";
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    //
    // Check if it's a node supporting MultiInstance/Channel
    // if the node address is in the form &lt;mainnode_id&gt;.&lt;instance&gt;
    // then this is a command for a multiinstance virtual module
    if (nodeid.IndexOf('.') &gt; 0)
    {
      instance = nodeid.Substring(nodeid.IndexOf('.') + 1);
      nodeid = nodeid.Substring(0, nodeid.IndexOf('.'));
    }
    if (instance != "")
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid + "." + instance).Get();
      var parentmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid).Get();
      //
      switch(command)
      {
        case "Control.On":
          parentmodule.Command("MultiInstance.Set").Execute("Switch.Binary/" + instance + "/255");
          virtualmodule.RaiseEvent("Status.Level", "1", "ZWaveNode");
          break;
        case "Control.Off":
          parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
          virtualmodule.RaiseEvent("Status.Level", "0", "ZWaveNode");
          break;
        case "Control.Toggle":
          if (virtualmodule.Parameter("Status.Level").DecimalValue == 0)
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/255");
            virtualmodule.RaiseEvent("Status.Level", "1", "ZWaveNode");
          }
          else
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
            virtualmodule.RaiseEvent("Status.Level", "0", "ZWaveNode");
          }
          break;
        case "Control.Level":
          parentmodule.Command("MultiInstance.Set").Set("Switch.MultiLevel/" + instance + "/" + parameter);
          virtualmodule.RaiseEvent("Status.Level", (double.Parse(parameter) / 100D).ToString(), "ZWaveNode");
          break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";
    }
  } catch (Exception e) {

    Program.Notify("ZWave MultiInstance module ERROR!", e.Message);

  }

  return "";
});

// setup multi channel virtual modules at startup
Modules.InDomain("HomeAutomation.ZWave").Each((module)=&gt;{
  checkVirtualModules(module);
  return false;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>93</Address>
    <Name>Multi Instance/Channel Virtual Modules</Name>
    <Description>Adds a virtual module for each instance of a multi instance node.
It requires that a manufacturer specific get has been issued on the node.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:57.25539Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.361112Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.Enable", "Enable Smart Light Control", "checkbox")
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.OnMotionDetect", "Controlled by motion sensor (optional)", "module.text:any:sensor:status.level,sensor.motiondetect")
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.CheckLuminosity", "Controlled by luminance sensor (optional)", "module.text:any:any:sensor.luminance")
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.MinLuminance", "Trigger if luminance is below", "slider:0:1000:1")
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.SwitchOffTimeout", "Turn off after inactivity timeout (seconds)", "slider:30:3600:30")
  .Run();
</ScriptSetup>
    <ScriptSource>var SMART_LIGHT_ENABLE = "HomeGenie.SmartLights.Enable";
var MOT_SENSOR_NAME = "HomeGenie.SmartLights.OnMotionDetect";
var LUM_SENSOR_NAME = "HomeGenie.SmartLights.CheckLuminosity";
var TURNOFF_TIMEOUT = "HomeGenie.SmartLights.SwitchOffTimeout";
var MIN_LUMINANCE = "HomeGenie.SmartLights.MinLuminance";
var LAST_EVENT = "HomeGenie.SmartLights.LastEvent";

var smart_devices = Modules.WithFeature(SMART_LIGHT_ENABLE);

var GetDomainAddress = new Func&lt;string, dynamic&gt;((domainAddress)=&gt;{
  dynamic v = new ExpandoObject();
  v.Domain = "0";
  v.Address = "0";
  if (domainAddress.IndexOf(":") &gt; 0)
  {
    v.Domain = domainAddress.Substring(0, domainAddress.LastIndexOf(':'));
    v.Address = domainAddress.Substring(domainAddress.LastIndexOf(':') + 1);
  }
  return v;
});

When.ModuleParameterIsChanging((module, parameter) =&gt; {

  if (module.IsOfDeviceType("Sensor"))
  {
    if (parameter.Name == "Sensor.MotionDetect" || parameter.Name == "Status.Level")
    {
      var motionlevel = parameter.DecimalValue;
      if (motionlevel &gt; 0)
      {
        smart_devices.Each((mod)=&gt; {

          var da = GetDomainAddress(mod.Parameter(MOT_SENSOR_NAME).Value);
          if (da.Domain == module.Instance.Domain &amp;&amp; da.Address == module.Instance.Address)
          {
            mod.Parameter(LAST_EVENT).Value = DateTime.UtcNow.Ticks.ToString();
            //if (mod.IsOff)
            {
              da = GetDomainAddress(mod.Parameter(LUM_SENSOR_NAME).Value);
              var lumsensor = Modules.InDomain(da.Domain).WithAddress(da.Address).Get();
              if (lumsensor.Instance != null)
              {
                var luminosity = lumsensor.Parameter("Sensor.Luminance").DecimalValue;
                if (luminosity &lt; mod.Parameter(MIN_LUMINANCE).DecimalValue)
                {
                  Program.Notify(module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
                  mod.On();
                }
              }
              else
              {
                Program.Notify(module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
                mod.On();
              }
            }
          }

          return false;
        });
      }
    }
  }

  return true;
});

while (Program.IsEnabled)
{
  smart_devices.Each((mod)=&gt; {
    var timeout = mod.Parameter(TURNOFF_TIMEOUT).DecimalValue;
    // default timeout is 30 seconds
    if (timeout == 0) timeout = 30;
    if (mod.IsOn)
    {
      var lastevent = mod.Parameter(LAST_EVENT).UpdateTime;
      var lastupdate = mod.Parameter("Status.Level").UpdateTime;
      var checktime = lastevent.Ticks;
      if (checktime &lt; lastupdate.Ticks) checktime = lastupdate.Ticks;
      var elapsed = new TimeSpan(DateTime.UtcNow.Ticks - checktime);
      if (elapsed.TotalSeconds &gt; timeout) {
        Program.Notify(mod.Instance.Address + " " + mod.Instance.Name + "&lt;br&gt;switched OFF.");
        mod.Off();
      }
    }
    return false;
  });
  Pause(5);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>145</Address>
    <Name>Smart Lights</Name>
    <Description>Control device by motion detection and enviroment light. </Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.Enable</Property>
        <Description>Enable Smart Light Control</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:sensor:status.level,sensor.motiondetect</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.OnMotionDetect</Property>
        <Description>Controlled by motion sensor (optional)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:any:sensor.luminance</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.CheckLuminosity</Property>
        <Description>Controlled by luminance sensor (optional)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1000:1</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.MinLuminance</Property>
        <Description>Trigger if luminance is below</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:30:3600:30</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.SwitchOffTimeout</Property>
        <Description>Turn off after inactivity timeout (seconds)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:57.872984Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.37837Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>IPHostEntry host;
string localIP = "1";
host = Dns.GetHostEntry(Dns.GetHostName());
foreach (IPAddress ip in host.AddressList)
{
  if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
  {
    localIP = ip.ToString();
    localIP = localIP.Substring(localIP.LastIndexOf(".") + 1);
  }
}
Program.Setup(() =&gt; {
  Program
    .AddOption("ClientId", "hg-" + localIP, "0. Enter unique ID for this client", "text")
    .AddOption("ServerAddress", "", "1. MQTT server address", "text")
    .AddOption("ServerPort", "1883", "2. MQTT server port", "text")
    .AddOption("TLS", "", "3. Connect using TLS/SSL", "checkbox")
    .AddOption("WebSockets", "", "4. Connect using WebSockets", "checkbox")
    .AddOption("ServerTopic", "#", "5. Topic", "text")
    .AddOption("Username", "", "6. Username (optional)", "text")
    .AddOption("Password", "", "7. Password (optional)", "text")
    .AddFeature("", "", "MQTT.SensorPublish", "Publish this module events", "checkbox");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>string server = Program.Option("ServerAddress").Value.Trim();
int port = 1883; int.TryParse(Program.Option("ServerPort").Value, out port);
string topic = Program.Option("ServerTopic").Value.Trim();
string clientid = Program.Option("ClientId").Value.Trim();
string username = Program.Option("Username").Value.Trim();
string password = Program.Option("Password").Value.Trim();
bool useWebSockets = Program.Option("WebSockets").Value == "On" ? true : false;
bool useTls = Program.Option("TLS").Value == "On" ? true : false;

var MqttIsConnected = false;
MqttClient.Reset();

if (server == "")
{
  Program.Notify("Please configure server address");
  Pause(5);
  return;
}

MqttClient.Subscribe(topic, (mtopic, bytespayload) =&gt; {
  var parts = mtopic.Split('/');
  var cid = parts[0];
  //
  if (parts.Length == 4)
  {
    try
    {
      var domain = parts[1];
      var address = parts[2];
      var type = parts[3];
      // convert binary message to string
      string mpayload = Encoding.UTF8.GetString(bytespayload);

      var module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();

      switch (type)
      {
        case "command":
        if (domain == "MQTT.Listeners" &amp;&amp; address == clientid)
        {
          var cmdobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;dynamic&gt;(mpayload);
          var targetmodule = Modules.InDomain(cmdobj.Domain.ToString()).WithAddress(cmdobj.Address.ToString());
          if (targetmodule.Get().Instance != null)
          {
            string command = cmdobj.Command.ToString();
            switch (command)
            {
              case "Module.Describe":
              var modinstance = targetmodule.Get().Instance;
              MqttClient.Publish(clientid + "/" + modinstance.Domain + "/" + modinstance.Address + "/description", Service.Utility.Module2Json(modinstance, false));
              break;
              default:
              targetmodule.Command(command).Execute();
              break;
            }
          }
        }
        break;
        case "description":
        if (cid != clientid &amp;&amp; module.Instance != null)
        {
          var modobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;Module&gt;(mpayload);
          module.Instance.Name = modobj.Name;
          module.Instance.Description = modobj.Description;
          module.Instance.DeviceType = modobj.DeviceType;
          var parentid = module.Parameter("VirtualModule.ParentId").Value;
          module.Instance.Properties = modobj.Properties;
          module.Parameter("VirtualModule.ParentId").Value = parentid;
          module.Parameter("MQTT.SourceNode").Value = cid;
          Program.Notify("Created remote module " + module.Instance.Domain + " " + module.Instance.Address);
        }
        break;
        case "event":
        if (cid != clientid)
        {
          var property = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;ModuleParameter&gt;(mpayload);
          if (module.Instance == null)
          {
            Program.AddVirtualModule("MQTT:" + cid + "." + domain, address, "Sensor", "");
            module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();
          }
          else if (!module.HasParameter("MQTT.SourceNode"))
          {
            MqttClient.Publish(clientid + "/MQTT.Listeners/" + cid + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : 'Module.Describe' }");
          }
          module.RaiseEvent(property.Name, property.Value, "");
        }
        break;
      }
    } catch (Exception e) {
      Program.Notify("ERROR: " + e.Message);
      MqttIsConnected = false;
    }
  }
  //Console.WriteLine("MQTT {0} : {1}", mtopic, mpayload);
});

When.WebServiceCallReceived("MQTT:", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  string domain = reqs[0];
  string address = reqs[1];
  var commands = new List&lt;string&gt;(reqs);
  // remove domain and address to obtain the command parts only
  commands.RemoveAt(0); commands.RemoveAt(0);
  string command = String.Join("/", commands.ToArray());
  try
  {
    int mqttend = domain.IndexOf(".");
    int mqttdel = domain.IndexOf(":");
    var mqttdest  = domain.Substring(mqttdel + 1, mqttend - mqttdel - 1);
    domain = domain.Substring(mqttend + 1);
    MqttClient.Publish(clientid + "/MQTT.Listeners/" + mqttdest + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : '" + command + "' }");
    return new ResponseText("OK");
  } catch (Exception e) {
    Program.Notify("ERROR: " + e.Message);
    MqttIsConnected = false;
  }
  return new ResponseText("ERROR");
});

// We want to do further processing whenever a module changes
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.HasFeature("MQTT.SensorPublish") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.") || property.Name.StartsWith("Meter.")) &amp;&amp; !module.Instance.Domain.StartsWith("MQTT:"))
  {
    try{
      byte[] bytes = Encoding.Default.GetBytes(Newtonsoft.Json.JsonConvert.SerializeObject(property));
      string payload = Encoding.UTF8.GetString(bytes);
      MqttClient.Publish(clientid + "/" + module.Instance.Domain + "/" + module.Instance.Address + "/event", Encoding.UTF8.GetBytes(Newtonsoft.Json.JsonConvert.SerializeObject(property)));
    } catch  (Exception e){
      Program.Notify("ERROR: " + e.Message);
      MqttIsConnected = false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

while (Program.IsRunning) {
  if (!MqttIsConnected) {
    MqttIsConnected = true;
    Program.Notify("Connecting to '" + server + ":" + port + "' ...");
    try
    {
      if (username != "")
      {
        MqttClient.WithCredentials(username, password);
      }

      MqttClient
        .Service(server)
        .UsingWebSockets(useWebSockets)
        .WithTls(useTls)
        .Connect(port, clientid, (connected)=&gt;{
          MqttIsConnected = connected;
          if (connected) {
              Program.Notify("Connected!");
          } else {
              Program.Notify("Disconnected!");
          }
        });
    }
    catch (Exception e)
    {
      Program.Notify(e.Message);
      Pause(5);
      return;
    }
  }
  Pause(30);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>77</Address>
    <Name>MQTT Network</Name>
    <Description>Share modules with other HomeGenie servers connected to the same MQTT network.
      Other servers will automatically inherit the published module once an event is generated from it.</Description>
    <Group>Interconnections</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes />
        <Property>MQTT.SensorPublish</Property>
        <Description>Publish this module events</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(()=&gt;{
  Program
    .AddFeature("HomeAutomation.PhilipsHue", "Dimmer", "Scenarios.SunriseColors", "Link to Sunrise Colors Scenario", "checkbox")
  	.UseWidget("homegenie/generic/program");
});</ScriptSetup>
    <ScriptSource>// CSharp Automation Program Plugin

// Initialize scenario
var colorLights = Modules.WithFeature("Scenarios.SunriseColors")
  .Off()
  .Command("Control.ColorHsb");

// First transition to red, 5 seconds
colorLights.Set("0,1,.8,5");
Pause(5);

// Second transition to orange, 5 seconds
colorLights.Set("0.08,1,.8,5");
Pause(5);

// Last transition to bright white, 10 seconds
colorLights.Set("0.13,0,1,10");
Pause(10);</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>8</Address>
    <Name>Sunrise Colors Scenario</Name>
    <Description>Example scenario for Philips Hue lights.</Description>
    <Group>Scenarios</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.PhilipsHue</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>Scenarios.SunriseColors</Property>
        <Description>Link to Sunrise Colors Scenario</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:59.04763Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddOption("ThermostatsCount", "1", "Virtual thermostats modules to create", "slider:1:10:1")
  .AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.TemperatureModule", "Module to read temperature from", "module.text:any:any:sensor.temperature")
  .AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.SwitchModule", "Module to switch on/off on set point", "module.text:any:switch,light,dimmer,thermostat,shutter:any")
  .Run();
</ScriptSetup>
    <ScriptSource>const int HOLDING_MODE_DIFF = 1;
const string MODULES_DOMAIN = "HomeAutomation.BasicThermostat";
const string PARAMETER_TEMPERATURE_MODULE = "VirtualThermostat.TemperatureModule";
const string PARAMETER_SWITCH_MODULE = "VirtualThermostat.SwitchModule";
const string EVENT_DESCRIPTION = "Basic Thermostat";

var thermostatsCount = (int)Program.Option("ThermostatsCount").DecimalValue;
if (thermostatsCount &lt;= 0) thermostatsCount = 1;
Program.AddVirtualModules(MODULES_DOMAIN, "Thermostat", "homegenie/generic/thermostat", 1, thermostatsCount);
var thermostatModules = Modules.InDomain(MODULES_DOMAIN).OfDeviceType("Thermostat");

var holdingMode = new bool[thermostatsCount];

var ThermostatLogicRun = new Func&lt;ModuleHelper, bool&gt;((thermostat)=&gt;{

  var temperature = thermostat.Parameter("Sensor.Temperature");
  var operatingState = thermostat.Parameter("Thermostat.OperatingState");
  var thermostatMode = thermostat.Parameter("Thermostat.Mode");
  var heatSetPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
  var index = int.Parse(thermostat.Instance.Address) - 1;
  string domainAddress = "";
  string domain = "";
  string address = "";

  try
  {
    // Get a reference to the temperature module
    domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var temperatureModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || temperatureModule.Instance == null)
    {
      thermostat.RaiseEvent("Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid temperature module.");
      return false;
    }
    // Update Thermostat module Temperature field
    temperature.Value = temperatureModule.Parameter("Sensor.Temperature").Value;

    // get a reference to the switch/relay module
    domain = address = "";
    domainAddress = thermostat.Parameter(PARAMETER_SWITCH_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var switchModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule.Instance == null)
    {
      thermostat.RaiseEvent("Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid switch module.");
      return false;
    }

    // Heat Mode logic
    if (thermostatMode.Value == "Heat")
    {
      if (temperature.DecimalValue &lt; heatSetPoint.DecimalValue - (holdingMode[index] ? HOLDING_MODE_DIFF : 0))
      {
        if (switchModule.IsOff) holdingMode[index] = false;
        if (operatingState.Value != "Heating")
        {
          thermostat.RaiseEvent("Thermostat.OperatingState", "Heating", EVENT_DESCRIPTION);
        }
        // Heating
        switchModule.On();
      }
      else
      {
        if (switchModule.IsOn) holdingMode[index] = true;
        if (operatingState.Value != "PendingHeat")
        {
          thermostat.RaiseEvent("Thermostat.OperatingState", "PendingHeat", EVENT_DESCRIPTION);
        }
        // Waiting
        switchModule.Off();
      }
    }
    else
    {
      if (operatingState.Value != "Off" &amp;&amp; operatingState.Value != "Idle")
      {
        thermostat.RaiseEvent("Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
        holdingMode[index] = false;
      }
      // Off
      switchModule.Off();
    }
  }
  catch (Exception e)
  {
    Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "ERROR: " + e.Message);
  }

  return true;
});

When.ModuleParameterChanged((module, parameter)=&gt;{
  if (parameter.Is("Sensor.Temperature"))
  {
    thermostatModules.Each((thermostat)=&gt;{
      var domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
      if (domainAddress != "" &amp;&amp; domainAddress.IndexOf(":") &gt; 0)
      {
        var separatorIndex = domainAddress.LastIndexOf(':');
        if (separatorIndex &gt; 0)
        {
          var domain = domainAddress.Substring(0, separatorIndex).ToLower();
          var address = domainAddress.Substring(separatorIndex + 1).ToLower();
          if (module.Instance.Domain.ToLower() == domain &amp;&amp; module.Instance.Address.ToLower() == address)
          {
            thermostat.RaiseEvent("Sensor.Temperature", parameter.Value, EVENT_DESCRIPTION);
            ThermostatLogicRun(thermostat);
          }
        }
      }
      return false;
    });
  }
  return true;
});

// implement Web API calls as defined in the Thermostat widget
When.WebServiceCallReceived(MODULES_DOMAIN, (args)=&gt;{
  var request = Program.ParseApiCall(args);
  var option = request.GetOption(0);
  var thermostat = Modules.InDomain(MODULES_DOMAIN).WithAddress(request.Address).Get();
  var index = int.Parse(thermostat.Instance.Address) - 1;
  var res = "ERROR"; // default response text
  switch (request.Command)
  {
    case "Thermostat.SetPointSet":
    // Basic thermostat currently only supports Heating mode
    if (option == "Heating")
    {
      var setPoint = request.GetOption(1);
      thermostat.RaiseEvent("Thermostat.SetPoint.Heating", setPoint, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
    case "Thermostat.ModeSet":
    // Currently supported modes are Off or Heat
    if (option == "Off" || option == "Heat")
    {
      thermostat.RaiseEvent("Thermostat.Mode", option, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
  }
  return res != "ERROR" ? new ResponseText(res) : null;
});

while (Program.IsEnabled)
{
  thermostatModules.Each((thermostat)=&gt;{
    ThermostatLogicRun(thermostat);
    return false;
  });
  Pause(120);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>78</Address>
    <Name>Basic Thermostat</Name>
    <Description>Use any temperature sensor and relay switch module to implement Thermostat device logic.
Temperature/Switch modules must be specified in the form &lt;i&gt;&amp;lt;domain&amp;gt:&amp;lt;address&amp;gt;&lt;/i&gt;, eg: HomeAutomation.ZWave:5 .
Basic Thermostats can also be used with the Timetable scheduler widget.</Description>
    <Group>Weather and Environment</Group>
    <Features>
      <ProgramFeature>
        <FieldType>module.text:any:any:sensor.temperature</FieldType>
        <ForDomains>HomeAutomation.BasicThermostat</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>VirtualThermostat.TemperatureModule</Property>
        <Description>Module to read temperature from</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:switch,light,dimmer,thermostat,shutter:any</FieldType>
        <ForDomains>HomeAutomation.BasicThermostat</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>VirtualThermostat.SwitchModule</Property>
        <Description>Module to switch on/off on set point</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:59.693366Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.424761Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.AddOption("PollInterval", "120", "Poll Interval (seconds)", "text");
//Program.AddFeature("HomeAutomation.ZWave", "Thermostat", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptSetup>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level
  Modules.InDomain("HomeAutomation.ZWave").OfDeviceType("Thermostat").Each((module) =&gt; {
    Program.Notify("Z-Wave Thermostat Poll", "Polling thermostat " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("SensorMultiLevel.Get").Execute();
    Pause(Program.Option("PollInterval").DecimalValue);
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var pause = Program.Option("PollInterval").DecimalValue;
  if (pause &lt; 15)
  {
    pause = 15;
    Program.Notify("Z-Wave Thermostat Poll", "Poll interval seconds must be &gt;= 15!");
  }
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>92</Address>
    <Name>Z-Wave Thermostat Poll</Name>
    <Description />
    <Group>Z-Wave</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.AddOption("PollInterval", "45", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Sensor", "HomeGenie.ZWaveMeterPoll", "Poll meter Watt", "checkbox");
Program.Run();
</ScriptSetup>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level
  Modules.WithFeature("HomeGenie.ZWaveMeterPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Meter.Get").Execute("2");
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>40</Address>
    <Name>Meter Watt Poll</Name>
    <Description>Periodically reads instant Watt value from meter devices</Description>
    <Group>Z-Wave</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveMeterPoll</Property>
        <Description>Poll meter Watt</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.Enable", "Enable remote control", "checkbox")
  .AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.IRCode", "Toggle button (enter code)", "capture:Receiver.RawData")
  .AddOption("DimmerUpCode", "ButtonUp", "1. Bright button (enter code)", "capture:Receiver.RawData")
  .AddOption("DimmerDownCode", "ButtonDown", "2. Dim button (enter code)", "capture:Receiver.RawData")
  .AddOption("DimmerInterval", "10", "4. Dimming step", "slider:5:50:5")
  .Run();
</ScriptSetup>
    <ScriptSource>var dimmerInterval = Program.Option("DimmerInterval");
var dimmerUp = Program.Option("DimmerUpCode");
var dimmerDown = Program.Option("DimmerDownCode");
var irControlModules = Modules.WithFeature("HomeGenie.IRControler.Enable");

When.ModuleParameterChanged((module, parameter) =&gt; {
  if(parameter.Name == "Receiver.RawData" )
  {
    var irData = parameter;
    var lastButton = module.Parameter("IrController.LastButton");
    var lastIdle = module.Parameter("IrController.LastIdle");
    var dimStep = dimmerInterval.DecimalValue;

    if (irData.Value != "")
    {
      if (lastButton.Value != "" &amp;&amp; lastIdle.IdleTime &gt; 0.25 &amp;&amp; (irData.Value == dimmerUp.Value || irData.Value == dimmerDown.Value))
      {
        irControlModules.Each((m) =&gt; {
          var moduleButton = m.Parameter("HomeGenie.IRControler.IRCode");
          if (moduleButton.Value == lastButton.Value)
          {
            var level = m.Level * 100D;
            if (irData.Value == dimmerUp.Value)
            {
              level += dimStep;
              m.Level = (level &gt;= 100 ? 100 : level);
              Program.Notify(m.Instance.Name + "&lt;br&gt;Bright (" + m.Level + ")");
            }
            else if (irData.Value == dimmerDown.Value)
            {
              level -= dimStep;
              m.Level = (level &lt;= 5 ? 5 : level);
              Program.Notify(m.Instance.Name + "&lt;br&gt;Dim (" + m.Level + ")");
            }
            lastIdle.Value = "0";
          }
          return false; // do not break, continue iterating...
        });
      }
      else
      {
        if (lastIdle.IdleTime &gt; 0.5)
        irControlModules.Each((m) =&gt; {
          var moduleButton = m.Parameter("HomeGenie.IRControler.IRCode");
          if (moduleButton.Value == irData.Value)
          {
            lastButton.Value = irData.Value;
            lastIdle.Value = "1";
            m.Toggle();
            Program.Notify(m.Instance.Name + "&lt;br&gt;toggled.");
          }
          return false; // do not break, continue iterating...
        });
      }
    }
  }
  return true;
});
Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>505</Address>
    <Name>Remote Control</Name>
    <Description>Toggle and dim the module using a Remote Control (IR or RF).
Dim/Bright buttons can be defined in &lt;b&gt;Configure-&gt;Settings&lt;/b&gt; page.</Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.Enable</Property>
        <Description>Enable remote control</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>capture:Receiver.RawData</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.IRCode</Property>
        <Description>Toggle button (enter code)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:36:01.295955Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.436729Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(() =&gt; {
  Program
    .AddOption("ZoneSensors.Count", "5", "Number of Zone Sensors", "slider:1:10:1");
});
Program.Run();</ScriptSetup>
    <ScriptSource>var FLD_ZONESENSORS_DOMAIN = "HomeGenie.ZoneSensors";
var FLD_ZONESENSORS_ENABLE = "HomeGenie.ZoneSensors.Enable";

var zonesCount = (int)Program.Option("ZoneSensors.Count").DecimalValue;
if (zonesCount &lt; 1) zonesCount = 1;
Program.AddVirtualModules(FLD_ZONESENSORS_DOMAIN, "Sensor", "homegenie/generic/sensor", 1, zonesCount);
Program.AddFeature("!"+FLD_ZONESENSORS_DOMAIN, ": /^Sensor\\./", FLD_ZONESENSORS_ENABLE, "Include in Zone Sensors", "checkbox");
for (int s = 1; s &lt;= zonesCount; s++)
{
  Program.AddFeature("!"+FLD_ZONESENSORS_DOMAIN, " : /^Sensor\\./", FLD_ZONESENSORS_DOMAIN+"."+s, "Zone Sensor "+s, "checkbox");
}

When.ModuleParameterChanged((module, parameter)=&gt;{
  if (module.Instance.Domain != FLD_ZONESENSORS_DOMAIN &amp;&amp; module.HasFeature(FLD_ZONESENSORS_ENABLE))
  {
    for (int s = 1; s &lt;= zonesCount; s++)
    {
      if (module.HasFeature(FLD_ZONESENSORS_DOMAIN+"."+s))
      {
        // get all module in the same sensors zone
        var zoneModule = Modules.InDomain(FLD_ZONESENSORS_DOMAIN).WithAddress(s.ToString()).Get();
		var zoneSensors = Modules.WithFeature(FLD_ZONESENSORS_DOMAIN+"."+s);
        if ((parameter.Name.StartsWith("Sensor.") || parameter.Name.StartsWith("Meter.")) &amp;&amp; !parameter.Is("Sensor.MotionDetect"))
        {
          // calculate the average value
          double avg = 0;
          double count = 0;
          zoneSensors.Each((mod)=&gt;{
            if (mod.HasFeature(FLD_ZONESENSORS_ENABLE) &amp;&amp; mod.HasParameter(parameter.Name))
            {
              avg += mod.Parameter(parameter.Name).DecimalValue;
              count++;
            }
            return false;
          });
          if (count &gt; 0)
          {
            zoneModule.RaiseEvent(parameter.Name, (avg/count).ToString(CultureInfo.InvariantCulture), "Zone Sensors");
          }
        }
        else if (parameter.Name.StartsWith("Sensor.") || parameter.Name.StartsWith("Status."))
        {
          // set level to 1 if at least one module has value greater than zero
          var eventValue = "0";
          zoneSensors.Each((mod)=&gt;{
            if (mod.HasFeature(FLD_ZONESENSORS_ENABLE) &amp;&amp; mod.HasParameter(parameter.Name))
            {
              if(mod.Parameter(parameter.Name).DecimalValue &gt; 0)
              {
                eventValue = "1";
                return true;
              }
            }
            return false;
          });
          zoneModule.RaiseEvent(parameter.Name, eventValue, "Zone Sensors");
        }
      }
    }
  }
  return true;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>29</Address>
    <Name>Zone Sensors</Name>
    <Description>Adds an arbitrary number of Zone Sensors. Each of them can group multiple sensors into one logcal sensor.
When changing the number of zone sensors, program restart is required.</Description>
    <Group>Security</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes>: /^Sensor\./</ForTypes>
        <Property>HomeGenie.ZoneSensors.Enable</Property>
        <Description>Include in Zone Sensors</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes> : /^Sensor\./</ForTypes>
        <Property>HomeGenie.ZoneSensors.1</Property>
        <Description>Zone Sensor 1</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes> : /^Sensor\./</ForTypes>
        <Property>HomeGenie.ZoneSensors.2</Property>
        <Description>Zone Sensor 2</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes>:^Sensor\.</ForTypes>
        <Property>HomeGenie.ZoneSensors.3</Property>
        <Description>Zone Sensor 3</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes>:^Sensor\.</ForTypes>
        <Property>HomeGenie.ZoneSensors.4</Property>
        <Description>Zone Sensor 4</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>!HomeGenie.ZoneSensors</ForDomains>
        <ForTypes>:^Sensor\.</ForTypes>
        <Property>HomeGenie.ZoneSensors.5</Property>
        <Description>Zone Sensor 5</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:36:01.855949Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.51155Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>/*
|| @title: Virtual Modules Demo App
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2016-04-30 16:54
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   http://genielabs.github.io/HomeGenie/programs.html
||   http://genielabs.github.io/HomeGenie/api/ape/annotated.html
||   http://genielabs.github.io/HomeGenie/api/mig/overview.html
*/

const _domain = "HomeAutomation.Demo";

// Add a temperature and luminance sensor
$$.program.addVirtualModule(_domain, "1", "Sensor", "");
$$.program.addFeature(_domain, "Sensor", "Sensor.Temperature", "Set temperature value", "slider:-50:100:0.5");
$$.program.addFeature(_domain, "Sensor", "Sensor.Luminance", "Set luminance value", "slider:0:1000:1");
$$.program.addFeature(_domain, "Sensor", "Sensor.MotionDetect", "Set motion detection status", "slider:0:1:1");
$$.program.addFeature(_domain, "Sensor", "Status.Battery", "Set battery level", "slider:0:100:1");

// Add a doorwindow sensor
$$.program.addVirtualModule(_domain, "2", "DoorWindow", "");
$$.program.addFeature(_domain, "DoorWindow", "Sensor.DoorWindow", "Set door/window status", "slider:0:1:1");
$$.program.addFeature(_domain, "DoorWindow", "Status.Battery", "Set battery level", "slider:0:100:1");

// Add an on/off switch
$$.program.addVirtualModule(_domain, "3", "Switch", "");
$$.program.addFeature(_domain, "Switch", "Status.Level", "Set switch on/off", "slider:0:1:1");

$$.program.run();</ScriptSetup>
    <ScriptSource>/*
|| @title: Virtual Modules Demo App
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2016-04-30 16:54
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   http://genielabs.github.io/HomeGenie/programs.html
||   http://genielabs.github.io/HomeGenie/api/ape/annotated.html
||   http://genielabs.github.io/HomeGenie/api/mig/overview.html
*/

const _domain = "HomeAutomation.Demo";
$$.modules = $$.modules.inDomain(_domain);

initialize();

// handle API call for this domain
$$.on.webServiceCallReceived(_domain, function(apiCall){

  const ac = $$.program.parseApiCall(apiCall);
  // Example:
  //  if the "apiCall" was
  //    "http://&lt;homegenie_address&gt;/api/HomeAutomation.Demo/3/Control.Level/50/1000"
  //  then "ac" will have the following property values
  //    ac.domain = "HomeAutomation.Demo"
  //    ac.address = "3"
  //    ac.command = "Control.On"
  //    ac.optionsString = "50/1000"
  //    ac.getOption(0) = "50"
  //    ac.getOption(1) = "1000"

  const response = "ERROR";
  // get the module addressed by the API call
  const mod = $$.modules.withAddress(ac.address).get();
  if (mod.isOfDeviceType("Switch")) {
    switch (ac.command) {
      case 'Control.On':
        mod.raiseEvent("Status.Level", "1", "");
        response = "OK";
        break;
      case 'Control.Off':
        mod.raiseEvent("Status.Level", "0", "");
        response = "OK";
        break;
      case 'Control.Toggle':
        mod.raiseEvent("Status.Level", mod.level != 0 ? "0" : "1", "");
        response = "OK";
        break;
    }
  }

  // beside the response, also return back requested data for debugging purpose
  return JSON.stringify({
    ResponseValue: response,
    ApiCall: apiCall,
    Domain: ac.domain,
    Address: ac.address,
    Command: ac.command,
    Options: ac.optionsString,
    Option1: ac.getOption(0),
    Option2: ac.getOption(1)
  });

});

$$.program.goBackground();

// let's give some default properties to virtual modules
function initialize() {
  // Multi Sensor
  const multiSensor = $$.modules.withAddress("1").get();
  if (multiSensor.instance.name == "")
    multiSensor.instance.name = 'Multi Sensor';
  if (multiSensor.parameter("Sensor.Temperature").value == "")
    multiSensor.parameter("Sensor.Temperature").value = "25.5";
  if (multiSensor.parameter("Sensor.Luminance").value == "")
    multiSensor.parameter("Sensor.Luminance").value = "273";
  if (multiSensor.parameter("Sensor.MotionDetect").value == "")
    multiSensor.parameter("Sensor.MotionDetect").value = "0";
  // Door Window
  const doorWindow = $$.modules.withAddress("2").get();
  if (doorWindow.instance.name == "")
    doorWindow.instance.name = "Door Sensor";
  if (doorWindow.parameter("Sensor.DoorWindow").value == "")
    doorWindow.parameter("Sensor.DoorWindow").value = "1";
  // Boiler Switch
  const boilerSwitch = $$.modules.withAddress("3").get();
  if (boilerSwitch.instance.name == "")
    boilerSwitch.instance.name = "Boiler Switch";
  if (boilerSwitch.parameter("Status.Level").value == "")
    boilerSwitch.parameter("Status.Level").value = "0";
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>400</Address>
    <Name>Virtual Modules Demo</Name>
    <Description>Virtual modules demo for testing and evaluating purpose: Multi Sensor, Door Window, Switch</Description>
    <Group>Demo</Group>
    <Features>
      <ProgramFeature>
        <FieldType>slider:-50:100:0.5</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.Temperature</Property>
        <Description>Set temperature value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1000:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.Luminance</Property>
        <Description>Set luminance value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.MotionDetect</Property>
        <Description>Set motion detection status</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:100:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>DoorWindow</ForTypes>
        <Property>Status.Battery</Property>
        <Description>Set battery level</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>DoorWindow</ForTypes>
        <Property>Sensor.DoorWindow</Property>
        <Description>Set door/window status</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Switch</ForTypes>
        <Property>Status.Level</Property>
        <Description>Set switch on/off</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:41.290568Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.60233Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>$$.program.useWidget('homegenie/generic/program');</ScriptSetup>
    <ScriptSource>var _domain = "HomeAutomation.Demo";
var _param = "Sensor.DoorWindow";
var door = $$.modules.inDomain(_domain).withAddress("2").get();
var currentValue = door.parameter(_param).decimalValue;
door.raiseEvent(_param, currentValue == 0 ? "1" : "0", "");</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>401</Address>
    <Name>Demo - Toggle Door</Name>
    <Description>Toogle door window sensor value</Description>
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:41.291035Z</ActivationTime>
    <TriggerTime>2021-03-21T17:04:29.679982Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>$$.program.useWidget('homegenie/generic/program');</ScriptSetup>
    <ScriptSource>var _domain = "HomeAutomation.Demo";
var _param = "Sensor.MotionDetect";
var motion = $$.modules.inDomain(_domain).withAddress("1").get();
var currentValue = motion.parameter(_param).decimalValue;
motion.raiseEvent(_param, "1", "");
$$.pause(1);
motion.raiseEvent(_param, "0", "");</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>402</Address>
    <Name>Demo - Motion Detected</Name>
    <Description>Simulate motion detection</Description>
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:41.291171Z</ActivationTime>
    <TriggerTime>2021-03-21T17:04:30.556091Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>$$.program.useWidget('homegenie/generic/program');</ScriptSetup>
    <ScriptSource>var _domain = "HomeAutomation.Demo";
var _param = "Sensor.Temperature";
var multiSensor = $$.modules.inDomain(_domain).withAddress("1").get();
var temperature = multiSensor.parameter(_param);
// simulate temperature changes over the time
while($$.program.isRunning) {
  multiSensor.raiseEvent(_param, (temperature.decimalValue+(Math.random()-0.5)), "");
  $$.pause(60); // pause 60 seconds
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>403</Address>
    <Name>Demo - Simulate Temperature</Name>
    <Description />
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:41.291251Z</ActivationTime>
    <TriggerTime>2021-03-20T20:42:56.812907Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>$$.program.useWidget('homegenie/generic/program');</ScriptSetup>
    <ScriptSource>var _domain = "HomeAutomation.Demo";
var _param = "Sensor.Luminance";
var multiSensor = $$.modules.inDomain(_domain).withAddress("1").get();
var luminance = multiSensor.parameter(_param);
// simulate temperature changes over the time
while($$.program.isRunning) {
  var lux = (luminance.decimalValue+((Math.random()-0.5)*50));
  if (lux &lt; 0) lux = 0;
  multiSensor.raiseEvent(_param, lux, "");
  $$.pause(60); // pause 60 seconds
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>404</Address>
    <Name>Demo - Simulate Luminance</Name>
    <Description />
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:35:41.29133Z</ActivationTime>
    <TriggerTime>2021-03-20T20:42:57.105683Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(()=&gt; {
  Program
    .UseWidget("homegenie/generic/program")
    .AddFeature("", "Sensor", "Simulator.Sensor.Temperature", "Temperature sensor", "checkbox")
    .AddFeature("", "Sensor", "Simulator.Sensor.Humidity", "Humidity sensor", "checkbox")
    .AddFeature("", "Sensor", "Simulator.Sensor.Luminance", "Light sensor", "checkbox")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Meter.Watts", "Watts meter", "checkbox")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Meter.Watts.Max", "Watts meter max power", "slider:1:2500:1:10")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Sensor.DataFrequency", "Simulator emit frequency", "slider:0.5:60:0.5:30");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// CSharp Automation Program Plugin

const string TEMPERATURE_FIELD = "Sensor.Temperature";
const string LUMINANCE_FIELD = "Sensor.Luminance";
const string HUMIDITY_FIELD = "Sensor.Humidity";
const string WATTS_FIELD = "Meter.Watts";
const string EMIT_FREQUENCY_FIELD = "Simulator.Sensor.DataFrequency";

while (Program.IsRunning) {
  Pause(0.25);

  // Sensor.Temperature
  var featureModules = Modules.WithFeature("Simulator." + TEMPERATURE_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(TEMPERATURE_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) / 5;
      double value = field.DecimalValue + variation;
      module.RaiseEvent(TEMPERATURE_FIELD, Math.Round(value, 3), "Sensor simulartor emitted value");
    }
    return false; // continue iterating
  });

  // Sensor.Humidity
  featureModules = Modules.WithFeature("Simulator." + HUMIDITY_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(HUMIDITY_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) * 5;
      double value = (int)field.DecimalValue + variation;
      if (value &lt; 5) value = 5;
      if (value &gt; 95) value = 95;
      module.RaiseEvent(HUMIDITY_FIELD, Math.Round(value, 3), "Sensor simulartor emitted value");
    }
    return false; // continue iterating
  });

  // Sensor.Luminance
  featureModules = Modules.WithFeature("Simulator." + LUMINANCE_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(LUMINANCE_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) * 200;
      double value = (int)field.DecimalValue + variation;
      if (value &lt; 0) value = 0;
      if (value &gt; 1000) value = 1000;
      module.RaiseEvent(LUMINANCE_FIELD, value, "Sensor simulartor emitted value");
    }
    return false; // continue iterating
  });

  // Meter.Watts
  featureModules = Modules.WithFeature("Simulator." + WATTS_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var powerMax = module.Parameter("Simulator." + WATTS_FIELD + ".Max");
    var level = module.Parameter("Status.Level");
    var field = module.Parameter(WATTS_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue &amp;&amp; powerMax.DecimalValue &gt; 0) {
      double value = powerMax.DecimalValue * (level != null ? level.DecimalValue : 0);
      if (value &gt; 0) {
        double variation = (new Random().NextDouble() - 0.5) / 2;
        value += variation;
      }
      if (value &gt; 0 || field.DecimalValue != 0) {
	      module.RaiseEvent(WATTS_FIELD, Math.Round(value, 3), "Sensor simulartor emitted value");
      }
    }
    return false; // continue iterating
  });
}
</ScriptSource>
    <ScriptErrors />
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>410</Address>
    <Name>Sensor Simulator</Name>
    <Description>Simulate realtime data from a sensor</Description>
    <Group>Demo</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Temperature</Property>
        <Description>Temperature sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Humidity</Property>
        <Description>Humidity sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Luminance</Property>
        <Description>Light sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Meter.Watts</Property>
        <Description>Watts meter</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:1:2500:1:1</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Meter.Watts.Max</Property>
        <Description>Watts meter max power</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0.5:60:0.5:30</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Sensor.DataFrequency</Property>
        <Description>Simulator emit frequency</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:36:02.492263Z</ActivationTime>
    <TriggerTime>2021-03-22T11:36:03.653674Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(() =&gt; {
  Program.AddFeature("", "", "EventsLogger.EnableLogging", "Enable events logging", "checkbox");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>var loggableModules = Modules.WithFeature("EventsLogger.EnableLogging");

When.ProgramStopping(() =&gt; {
//  db.Dispose(); 
  return true;
});

When.ModuleParameterChanged((mod, p) =&gt; {
  var m = mod.Get().Instance;
  if (loggableModules.SelectedModules.Contains(m)) {
    lock(mod.Get().Instance)
    using (var db = Data.LiteDb(m.Domain+"@"+m.Address+"-events-log")) {
      db.Pragma("LIMIT_SIZE", 2097152);
      var col = db.GetCollection&lt;LoggerEvent&gt;("events");
      col.EnsureIndex(x =&gt; x.Domain);
      col.EnsureIndex(x =&gt; x.Address);
      col.EnsureIndex(x =&gt; x.Parameter);
      try {
        col.Insert(new LoggerEvent(m, p));
      } catch (Exception e) {
        // insert error, remove some data
        var col2 = db.GetCollection("events");
        var data_list = col2.Find(Query.All(), 0, 100);
        foreach (var row in data_list) 
        {
          col2.Delete(row["_id"]);
        }        
        // retry insert
        col.Insert(new LoggerEvent(m, p));
      }
    }
  }
  return true;
});

When.WebServiceCallReceived("HomeGenie.EventsLogger", (args) =&gt; {
  var cmd = Program.ParseApiCall(args);
  var moduleDomain = cmd.Address;
  var moduleAddress = cmd.Command;
  var module = Modules.InDomain(moduleDomain).WithAddress(moduleAddress);
  var parameter = cmd.GetOption(0);
  lock(module.Get().Instance)
  using (var db = Data.LiteDb(moduleDomain+"@"+moduleAddress+"-events-log")) {
    db.Pragma("LIMIT_SIZE", 2097152);
    var col = db.GetCollection&lt;LoggerEvent&gt;("events");
    var results = col.Query()
      .Where(x =&gt; x.Parameter == parameter)
      .OrderByDescending(x =&gt; x.Date)
      //.Select(x =&gt; new { x.Name, NameUpper = x.Name.ToUpper() }) // &lt;-- transform data
      .Limit(100)
      .ToList();
  	return results;
  }
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>100</Address>
    <Name>Events logging</Name>
    <Description />
    <Group>Security</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <ActivationTime>2021-03-22T11:58:21.882048Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>