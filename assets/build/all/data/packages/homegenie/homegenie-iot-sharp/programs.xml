<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ScriptSetup>var gpio_pins = new string[]{
	"GPIO17 (pin 11)=11",
	"GPIO27 (pin 13)=13",
	"GPIO22 (pin 15)=15",

	"GPIO4 (pin 7)=7",
	"GPIO5 (pin 29)=29",
	"GPIO6 (pin 31)=31",
	"GPIO13 (pin 33)=33",
	"GPIO19 (pin 35)=35",
	"GPIO26 (pin 37)=37",

	"GPIO23 (pin 16)=16",
	"GPIO24 (pin 18)=18",
	"GPIO25 (pin 22)=22",

	"GPIO12 (pin 32)=32",
	"GPIO16 (pin 36)=36",
//	"GPIO20 (pin 38)=38", // &lt;-- this pin seems to be used by the system
	"GPIO21 (pin 40)=40"
};

Program.Setup(() =&gt; {
  Program
    .AddOption("GPIO.Pin", "", "Pin number", "select:" + string.Join(",", gpio_pins))
    .AddOption("UpdateInterval", "60", "Update Interval (seconds)", "slider:30:3600:30");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// Based on RaspberrySharp libraries for programming GPIO/I2C/SPI devices
// Docs https://github.com/genemars/raspberry-sharp-io

#using Raspberry.IO.GeneralPurpose
#using Raspberry.IO.Components.Sensors.Temperature.Dht

var pinName = "P1Pin" + Program.Option("GPIO.Pin").Value;
if (pinName.Length &lt; 6) {
  Program.Notify("Data pin not selected. Configure from settings.");
  Pause(10);
  return;
}
var measurePin = (ConnectorPin)Enum.Parse(typeof(ConnectorPin), pinName);
var driver = GpioConnectionSettings.GetBestDriver(GpioConnectionDriverCapabilities.CanChangePinDirectionRapidly);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});
  
// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Temperature", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Humidity", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

// restart and reconfigure if a configuration parameter changed
When.ModuleParameterChanged((module, property) =&gt; {
  if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions.")) {
    Program.Restart();
  }
  // returning true, will route event to other listeners
  return true;
});

while (Program.IsEnabled)
{
  using (var pin = driver.InOut(measurePin))
    using (var dhtConnection = new Dht11Connection(pin))
  {
    var data = dhtConnection.GetData();
    if (data != null)
    {
      // data read succesfully
      Program
        .Emit("Sensor.Humidity", data.RelativeHumidity.Percent.ToString(CultureInfo.InvariantCulture))
        .Emit("Sensor.Temperature", data.Temperature.DegreesCelsius.ToString(CultureInfo.InvariantCulture));
    }
    else
    {
      Program.Notify("Could not read data from sensor.");
    }
  }

  var pause = Program.Option("UpdateInterval").DecimalValue;
  if (pause == 0) pause = 60; // default pause is 1 minute
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-iot-sharp</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>dht-11-sensor</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>59A1EDF8D06B34771DC1855BF566A4BE</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>601</Address>
    <Name>DHT-11 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-11 with data pin on GPIO#23. 
Edit program code line #1 to change the data pin GPIO.
See example video at http://homegenie.it/docs/diy/eden.php .</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>true</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>var gpio_pins = new string[]{
	"GPIO17 (pin 11)=11",
	"GPIO27 (pin 13)=13",
	"GPIO22 (pin 15)=15",

	"GPIO4 (pin 7)=7",
	"GPIO5 (pin 29)=29",
	"GPIO6 (pin 31)=31",
	"GPIO13 (pin 33)=33",
	"GPIO19 (pin 35)=35",
	"GPIO26 (pin 37)=37",

	"GPIO23 (pin 16)=16",
	"GPIO24 (pin 18)=18",
	"GPIO25 (pin 22)=22",

	"GPIO12 (pin 32)=32",
	"GPIO16 (pin 36)=36",
//	"GPIO20 (pin 38)=38", // &lt;-- this pin seems to be used by the system
	"GPIO21 (pin 40)=40"
};

Program.Setup(() =&gt; {
  Program
    .AddOption("GPIO.Pin", "", "Pin number", "select:" + string.Join(",", gpio_pins))
    .AddOption("UpdateInterval", "60", "Update Interval (seconds)", "slider:30:3600:30");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// Based on RaspberrySharp libraries for programming GPIO/I2C/SPI devices
// Docs https://github.com/genemars/raspberry-sharp-io

#using Raspberry.IO.GeneralPurpose
#using Raspberry.IO.Components.Sensors.Temperature.Dht

var pinName = "P1Pin" + Program.Option("GPIO.Pin").Value;
if (pinName.Length &lt; 6) {
  Program.Notify("Data pin not selected. Configure from settings.");
  Pause(10);
  return;
}
var measurePin = (ConnectorPin)Enum.Parse(typeof(ConnectorPin), pinName);
var driver = GpioConnectionSettings.GetBestDriver(GpioConnectionDriverCapabilities.CanChangePinDirectionRapidly);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Temperature", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Humidity", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

// restart and reconfigure if a configuration parameter changed
When.ModuleParameterChanged((module, property) =&gt; {
  if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions.")) {
    Program.Restart();
  }
  // returning true, will route event to other listeners
  return true;
});

while (Program.IsEnabled)
{
  using (var pin = driver.InOut(measurePin))
    using (var dhtConnection = new Dht22Connection(pin))
  {
    var data = dhtConnection.GetData();
    if (data != null)
    {
      // data read succesfully
      Program
        .Emit("Sensor.Humidity", data.RelativeHumidity.Percent.ToString(CultureInfo.InvariantCulture))
        .Emit("Sensor.Temperature", data.Temperature.DegreesCelsius.ToString(CultureInfo.InvariantCulture));
    } else {
      Program.Notify("Could not read data from sensor.");
    }
  }

  var pause = Program.Option("UpdateInterval").DecimalValue;
  if (pause == 0) pause = 60; // default pause is 1 minute
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-iot-sharp</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>dht-22-sensor</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>ABBEDF56D19E34D42DABFD8A6BDBBB52</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>602</Address>
    <Name>DHT-22 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-22 with data pin on GPIO#4. 
Edit program code line #1 to change the data pin GPIO.
</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>true</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>var gpio_pins = new string[]{
	"GPIO17 (pin 11)=11",
	"GPIO27 (pin 13)=13",
	"GPIO22 (pin 15)=15",

	"GPIO4 (pin 7)=7",
	"GPIO5 (pin 29)=29",
	"GPIO6 (pin 31)=31",
	"GPIO13 (pin 33)=33",
	"GPIO19 (pin 35)=35",
	"GPIO26 (pin 37)=37",

	"GPIO23 (pin 16)=16",
	"GPIO24 (pin 18)=18",
	"GPIO25 (pin 22)=22",

	"GPIO12 (pin 32)=32",
	"GPIO16 (pin 36)=36",
//	"GPIO20 (pin 38)=38", // &lt;-- this pin seems to be used by the system
	"GPIO21 (pin 40)=40"
};

Program.Setup(()=&gt; {
  Program
	.AddOption("GPIO.Pin", "", "Pin number", "select:" + string.Join(",", gpio_pins))
	.AddOption("GPIO.Pin.Reversed", "", "Reverse level status", "checkbox")
	.AddOption("GPIO.Pin.Mode", "1", "Pin mode", "select:Output=1,Input=0,Input pull-down=2,Input pull-up=3");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// Based on RaspberrySharp libraries for programming GPIO/I2C/SPI devices
// Docs https://github.com/genemars/raspberry-sharp-io

#using Raspberry.IO.GeneralPurpose

var pinMode = Program.Option("GPIO.Pin.Mode").DecimalValue;
// pinMode == 0 -&gt; Input
// pinMode == 1 -&gt; Output
// pinMode == 2 -&gt; Input pull-down
// pinMode == 3 -&gt; Input pull-up
var pinName = "P1Pin" + Program.Option("GPIO.Pin").Value;
if (pinName.Length &lt; 6) {
  Program.Notify("GPIO pin not selected. Configure from settings.");
  Pause(10);
  return;
}
var pin = (ConnectorPin)Enum.Parse(typeof(ConnectorPin), pinName);
// Set GPIO pin configuration
var pinConnection = (PinConfiguration)(pinMode == 1
  ? new OutputPinConfiguration(PinMapping.ToProcessor(pin))
  : new InputPinConfiguration(PinMapping.ToProcessor(pin)));
if (pinMode == 2) ((InputPinConfiguration)pinConnection).Resistor = PinResistor.PullDown;
if (pinMode == 3) ((InputPinConfiguration)pinConnection).Resistor = PinResistor.PullUp;
pinConnection.Name = pinName;
pinConnection.Reversed = Program.Option("GPIO.Pin.Reversed").Value == "On";
var cfg = new PinConfiguration[1] {
    pinConnection
};

// Add virtual module for this switch
const string moduleDomain = "RaspberryPi.GPIO";
Program.AddModule(moduleDomain, Program.Option("GPIO.Pin").Value, "Switch", "homegenie/generic/switch");
var mod = Modules.InDomain(moduleDomain).WithAddress(pinName).Get();

// Allocate GPIO connection
GpioConnection connection = null;
try
{
  // Create GPIO connection with default driver
  connection = new GpioConnection(cfg);
  // -- OR -- set the GPIO connection driver manually
  //var settings = new GpioConnectionSettings();
  //settings.Driver = new FileGpioConnectionDriver();
  //connection = new GpioConnection(settings, cfg);
}
catch (Exception e)
{
  // An error occurred
  Program.Notify($"GPIO pin {pinName}", $"Error: {e.Message}");
  Pause(10);
  return; // exit and restart program
}

// Listen and report pin status changes
var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  var address = args.Configuration.Name;
  mod.Emit(
    "Status.Level",
    args.Enabled ? "1" : "0",
    address
  );
});
connection.PinStatusChanged += pinChanged;

// release allocated resources when program is stopping
When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
mod.Parameter("Status.Level").Value = connection[pinName] ? "1" : "0";

if (pinMode == 1) { // Output
  mod.Instance.DeviceType = ModuleTypes.Switch;
  mod.Emit("Widget.DisplayModule", "homegenie/generic/switch");
  // implement serice API 'Control.On', 'Control.Off', 'Control.Toggle' to control this GPIO
  var moduleServiceUrl = mod.Instance.Domain + "/" + mod.Instance.Address;
  When.WebServiceCallReceived(moduleServiceUrl, ( args ) =&gt; {
    var request = Program.ParseApiCall(args);
    try
    {
      //string address = request.Address;
      string command = request.Command;
      switch(command)
      {
        case "Control.On":
          connection[pinName] = true;
          break;
        case "Control.Off":
          connection[pinName] = false;
          break;
        case "Control.Toggle":
          connection.Toggle(pinName);
          break;
      }
      return new ResponseStatus(Status.Ok);
    } 
    catch (Exception ex) 
    { 
      Program.Notify(ex.Message);
    }
    return null;
  });
} else { // Input
    mod.Instance.DeviceType = ModuleTypes.Sensor;
    mod.Emit("Widget.DisplayModule", "homegenie/generic/sensor");
}

// restart and reconfigure if a configuration parameter changed
When.ModuleParameterChanged((module, property) =&gt; {
  if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions.")) {
    Program.Restart();
  }
  // returning true, will route event to other listeners
  return true;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-iot-sharp</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>gpio-pin</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>5731CE509399BDA8390D8BBC20501649</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>600</Address>
    <Name>GPIO Pin</Name>
    <Description>Configurable GPIO pin as binary input sensor or output switch.
(RaspberrySharp.IO)
</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>true</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program.Setup(() =&gt; {
    Program.AddOption("LedsCount", "1", "Number of chained RGB leds", "text");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// Based on RaspberrySharp libraries for programming GPIO/I2C/SPI devices
// Docs https://github.com/genemars/raspberry-sharp-io

#using Raspberry.IO.GeneralPurpose
#using Raspberry.IO.Components.Leds.GroveRgb

// Domain
string appDomain = "HomeAutomation.GroveRGB";
// Params
int ledsCount = (int)Program.Option("LedsCount").DecimalValue;
// Grove RGB modules
var rgbModules = Modules.InDomain(appDomain);
// Grove RGB Led GPIO settings
//var driver = new FileGpioConnectionDriver();
var driver = new GpioConnectionDriver();
var gpioOut1 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin13.ToProcessor());
var gpioOut2 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin07.ToProcessor());
var groveRgb = new GroveRgbConnection(gpioOut1, gpioOut2, ledsCount);
// Allocate virtual modules for this app
Program.AddVirtualModules(appDomain, "Dimmer", "homegenie/generic/colorlight", 1, ledsCount);
// Default delay
double defaultDelay = 500;

// State object
var timings = new dynamic[ledsCount];

var GetHsb = new Func&lt;string,dynamic&gt;((hsb)=&gt;{
  dynamic color = new ExpandoObject();
  string[] parts = hsb.Split(',');
  color.H = double.Parse(parts[0] != "" ? parts[0] : "1", CultureInfo.InvariantCulture);
  color.S = double.Parse(parts.Length &gt; 1 &amp;&amp; parts[1] != "" ? parts[1] : "0", CultureInfo.InvariantCulture);
  color.B = double.Parse(parts.Length &gt; 2 &amp;&amp; parts[2] != "" ? parts[2] : "1", CultureInfo.InvariantCulture);
  return color;
});

var GetValueAt = new Func&lt;double,double,double,double,double&gt;((from, to, duration, offset)=&gt;{
  double range = (to-from);
  return from+(range/duration*offset);
});

var updateLeds = new Func&lt;bool&gt;(()=&gt;{
  bool iterateNext;
  while(Program.IsRunning) {
    do {
      iterateNext = false;
      for(int lednumber = 0; lednumber &lt; ledsCount; lednumber++) {
	  	lock (timings[lednumber]) {
          var item = timings[lednumber];
          if (item == null || item.timeEnd == null) continue;
          var timeSpan = new TimeSpan(item.timeEnd.Ticks-DateTime.Now.Ticks);
          if (timeSpan.TotalMilliseconds &gt; 0 &amp;&amp; timeSpan.TotalMilliseconds &lt;= item.duration) {
            var h = GetValueAt(item.currentColor.H, item.color.H, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var s = GetValueAt(item.currentColor.S, item.color.S, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var v = GetValueAt(item.currentColor.B, item.color.B, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var t = new Thread(()=&gt;{
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(h, s, v));
            });
            t.Start();
            if (!t.Join(3500)) {
              Program.Notify("Grove RGB ERROR:A", "I/O error");
              t.Abort();
            }
            iterateNext = true;
            //groveRgb.SetColor(lednumber, RgbColor.FromHsv(h, s, v));
            //iterateNext = true;
          } else if (timeSpan.TotalMilliseconds &lt;= 0) {
            var t = new Thread(()=&gt;{
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(item.color.H, item.color.S, item.color.B));
            });
            t.Start();
            if (!t.Join(3500)) {
              Program.Notify("Grove RGB ERROR:A", "I/O error\n"+Math.Round(item.color.H, 5));
              t.Abort();
            } else item.timeEnd = null;
            //groveRgb.SetColor(lednumber, RgbColor.FromHsv(item.color.H, item.color.S, item.color.B));
          }
  		}
      }
    } while (iterateNext &amp;&amp; Program.IsRunning);
    Pause(0.200);
  }
  return true;
});

var setColor = new Func&lt;int,dynamic,double,bool&gt;((lednumber, color, duration)=&gt;{
  lock (timings[lednumber]) {
    var item = timings[lednumber];
    item.currentColor = GetHsb(item.module.Parameter("Status.ColorHsb").Value);
    if (item.module.Level == 0) {
      item.currentColor.H = 0;
      item.currentColor.S = 1;
      item.currentColor.B = 0;
    }
    item.color = color;
    item.duration = duration;
    item.timeEnd = DateTime.Now.AddMilliseconds(duration);
  }
  return true;
});

// Initialize modules
for(int x = 0; x &lt; ledsCount; x++)
{
  var module = rgbModules.WithAddress((x+1).ToString()).Get();
  if (module.Parameter("Status.ColorHsb").Value == "")
  {
    module.Parameter("Status.ColorHsb").Value = "1,0,1";
  }
  var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
  if (module.Parameter("Status.Level").DecimalValue == 0)
  {
    currentColor.B = 0d;
  }
  var item = timings[x] = new ExpandoObject();
  item.module = rgbModules.WithAddress((x+1).ToString()).Get();
  setColor(x, currentColor, defaultDelay);
}

// Release GPIO driver if app is being stopped
When.ProgramStopping(()=&gt;{
  ((IDisposable)groveRgb).Dispose();
  return true;
});

// API calls handling
When.WebServiceCallReceived(appDomain, (args) =&gt; {
  try
  {
    var apiCall = Program.ParseApiCall(args.ToString());
    string lightnumber = apiCall.Address;
    var module = rgbModules.WithAddress(lightnumber).Get();
    int lightId = int.Parse(lightnumber) - 1;
    var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
    switch(apiCall.Command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.On
      case "Control.On":
        setColor(lightId, currentColor, defaultDelay);
        module.RaiseEvent("Status.Level", currentColor.B.ToString(), "Groove RGB Led");
        module.RaiseEvent("Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        currentColor.B = 0d;
        setColor(lightId, currentColor, defaultDelay);
        module.RaiseEvent("Status.Level", "0", "Groove RGB Led");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          setColor(lightId, currentColor, 0);
          module.RaiseEvent("Status.Level", currentColor.B.ToString(), "Groove RGB Led");
          module.RaiseEvent("Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        }
        else
        {
          currentColor.B = 0d;
          setColor(lightId, currentColor, defaultDelay);
          module.RaiseEvent("Status.Level", "0", "Groove RGB Led");
        }
        break;
      case "Control.Level":
        double level = (double.Parse(apiCall.GetOption(0)) / 100D);
        currentColor.B = level;
        setColor(lightId, currentColor, defaultDelay);
        module.RaiseEvent("Status.Level", level.ToString(), "Groove RGB Led");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;led_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = apiCall.GetOption(0).Split(',');
        double transition = defaultDelay;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 1000)); 
        var color = GetHsb(apiCall.GetOption(0));
        setColor(lightId, color, transition);
        module.RaiseEvent("Status.Level", color.B.ToString(), "Groove RGB Led");
        module.RaiseEvent("Status.ColorHsb", apiCall.GetOption(0), "Color Light");
        break; 
    }
    return new ResponseText("OK "+module.Parameter("Status.ColorHsb").Value+"  --  "+currentColor.H);
    //return timings;
  } 
  catch (Exception e) 
  { 
    Program.Notify("Grove RGB ERROR:2", e.Message);
  }
  return new ResponseText("ERROR");
}); 

// Start leds driver thread
updateLeds();
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-iot-sharp</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>grove-chainable-rgb-led</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>5370E9829F38FE4FA517362F3BA8AFE5</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>603</Address>
    <Name>Grove - Chainable RGB Led</Name>
    <Description>Chainable RGB color leds modules wired to GPIO#4 and GPIO#21/27 (power with 3v3).
http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>