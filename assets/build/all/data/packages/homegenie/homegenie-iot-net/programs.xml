<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ScriptSetup>// Based .NET IoT Libraries
// Documentation:
//   https://learn.microsoft.com/en-us/dotnet/iot/intro
// Device Bindings:
//   https://github.com/dotnet/iot/blob/main/src/devices/README.md

var gpio_pins = new string[]{
	"GPIO17 (pin 11)=17",
	"GPIO27 (pin 13)=27",
	"GPIO22 (pin 15)=22",

	"GPIO5 (pin 29)=5",
	"GPIO6 (pin 31)=6",
	"GPIO13 (pin 33)=13",
	"GPIO19 (pin 35)=19",
	"GPIO26 (pin 37)=26",

	"GPIO23 (pin 16)=23",
	"GPIO24 (pin 18)=24",
	"GPIO25 (pin 22)=25",

	"GPIO12 (pin 32)=12",
	"GPIO16 (pin 36)=16",
//	"GPIO20 (pin 38)=20", // &lt;-- this pin seems to be used by the system
	"GPIO21 (pin 40)=21"
};

Program.Setup(() =&gt; {
	Program.AddOption("GPIO.Pin", "", "Pin number", "select:" + string.Join(",", gpio_pins));
	Program.AddOption("GPIO.Pin.Mode", "1", "Pin mode", "select:Output=1,Input=0,Input pull-down=2,Input pull-up=3");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>// Based .NET IoT Libraries
// Documentation:
//   https://learn.microsoft.com/en-us/dotnet/iot/intro
// Device Bindings:
//   https://github.com/dotnet/iot/blob/main/src/devices/README.md

int allocatedPin = 0;
var mod = Modules.InDomain(Program.Module.Domain).WithAddress(Program.Module.Address).Get();

using GpioController controller = new();

// Pin-change event handler
PinChangeEventHandler pinValueChangeHandler = (sender, pinChange) =&gt; {
    var level = pinChange.ChangeType == PinEventTypes.Falling ? "0" : "1";
    mod.RaiseEvent("Status.Level", level, "GPIO Event");
};

// Pin allocation/deallocation logic
var allocatePin = (int pin) =&gt; {
    var pinMode = (PinMode)Program.Option("GPIO.Pin.Mode").DecimalValue;
    if (pinMode == PinMode.Output)
    {
        mod.RaiseEvent("Widget.DisplayModule", "homegenie/generic/switch", "");
    }
    else
    {
        mod.RaiseEvent("Widget.DisplayModule", "homegenie/generic/sensor", "");
    }
    if (allocatedPin &gt; 0)
    {
        try
        {
            controller.UnregisterCallbackForPinValueChangedEvent(
                allocatedPin,
                pinValueChangeHandler
            );        
        } catch {}
        try
        {
            controller.ClosePin(allocatedPin);
        } catch {}
    }
    if (pin &lt;= 0) {
        Program.Notify("Please select GPIO pin to use");
        return;
    }
    try
    {
        controller.OpenPin(pin, pinMode);
        controller.RegisterCallbackForPinValueChangedEvent(
            pin,
            PinEventTypes.Falling | PinEventTypes.Rising,
            pinValueChangeHandler
        );        
        allocatedPin = pin;
    } catch(Exception e) {
        Program.Notify("Error opening GPIO " + pin + ": " + e.Message);
    }
};

// Handle web service API
When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args) =&gt; {
    var request = Program.ParseApiCall(args);
    if (request.Command == "Control.Toggle") {
        // todo:
        return null;
    }
    if (request.Command == "Control.On") {
        controller.Write(allocatedPin, PinValue.High);
        mod.RaiseEvent("Status.Level", "1", "");
        return new ResponseStatus(Status.Ok);
    }
    if (request.Command == "Control.Off") {
        controller.Write(allocatedPin, PinValue.Low);
        mod.RaiseEvent("Status.Level", "0", "");
        return new ResponseStatus(Status.Ok);
    }
    return null;
});

// Reallocate GPIO connection when the Pin configuration changes
When.ModuleParameterChanged((module, parameter) =&gt; {
    if (module.Get().Instance == Program.Module &amp;&amp; parameter.Name.StartsWith("ConfigureOptions.GPIO.Pin"))
    {
        int pin = (int)module.Parameter("ConfigureOptions.GPIO.Pin").DecimalValue;
        if (pin == 0)
        {
            Program.Notify("Please select GPIO pin to use");
        }
        else
        {
            allocatePin(pin);
        }
    }
    return true;
});

int pin = (int)Program.Option("GPIO.Pin").DecimalValue;
allocatePin(pin);

Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-iot-net</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>gpio-binary-switch-sensor</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>A546C87E9EB9C531ED7C72A0EE303204</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>700</Address>
    <Name>GPIO Pin</Name>
    <Description>Configurable GPIO pin as binary input sensor or output switch.
</Description>
    <Group>Devices and Things</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>true</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>