<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ScriptSetup>$$.program
  .useWidget('homegenie/generic/program');
</ScriptSetup>
    <ScriptSource>var motionDetect = "Sensor.MotionDetect";
var motionSensor = $$.modules.inDomain("HomeAutomation.Demo").withAddress("1").get();
//var currentValue = motion.parameter(motionDetect).decimalValue;
motionSensor.emit(motionDetect, "1");
$$.pause(1);
motionSensor.emit(motionDetect, "0");
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-home-demo</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>demo-motion-detected</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>F3B18A9C7079F70A5922954F239AA714</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>402</Address>
    <Name>Demo - Motion Detected</Name>
    <Description>Simulates motion detection of "Virtual Modules Demo" sensor.</Description>
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>$$.program.useWidget('homegenie/generic/program');</ScriptSetup>
    <ScriptSource>var doorWindow = "Sensor.DoorWindow";
var doorSensor = $$.modules.inDomain("HomeAutomation.Demo").withAddress("2").get();
var currentValue = doorSensor.parameter(doorWindow).decimalValue;
doorSensor.emit(doorWindow, currentValue == 0 ? "1" : "0", "");
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-home-demo</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>demo-toggle-door</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>78D0FEA69ED327F2B257B13BBD5159D3</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>401</Address>
    <Name>Demo - Toggle Door</Name>
    <Description>Simulates door open/close of "Virtual Modules Demo" sensor.</Description>
    <Group>Demo</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>/*
|| @title: Sensor Simulator
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2019-01-01 01:01
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   https://homegenie.it/content/devs/programs/
||   https://homegenie.it/api/ape/annotated.html
||   https://homegenie.it/api/mig/overview.html
*/

Program.Setup(()=&gt; {
  Program
    .AddFeature("", "Sensor", "Simulator.Sensor.Temperature", "Temperature sensor", "checkbox")
    .AddFeature("", "Sensor", "Simulator.Sensor.Humidity", "Humidity sensor", "checkbox")
    .AddFeature("", "Sensor", "Simulator.Sensor.Luminance", "Light sensor", "checkbox")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Meter.Watts", "Watts meter", "checkbox")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Meter.Watts.Max", "Max Watt power", "slider:1:2500:1:10")
    .AddFeature("", "Light,Dimmer,Switch,Sensor", "Simulator.Sensor.DataFrequency", "Simulator emit frequency", "slider:0.5:60:0.5:30");
});
Program.Run();
</ScriptSetup>
    <ScriptSource>/*
|| @title: Sensor Simulator
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2019-01-01 01:01
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   https://homegenie.it/content/devs/programs/
||   https://homegenie.it/api/ape/annotated.html
||   https://homegenie.it/api/mig/overview.html
*/

const string TEMPERATURE_FIELD = "Sensor.Temperature";
const string LUMINANCE_FIELD = "Sensor.Luminance";
const string HUMIDITY_FIELD = "Sensor.Humidity";
const string WATTS_FIELD = "Meter.Watts";
const string EMIT_FREQUENCY_FIELD = "Simulator.Sensor.DataFrequency";

while (Program.IsRunning) {
  Pause(0.25);

  // Sensor.Temperature
  var featureModules = Modules.WithFeature("Simulator." + TEMPERATURE_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(TEMPERATURE_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) / 5;
      double value = field.DecimalValue + variation;
      module.Emit(TEMPERATURE_FIELD, Math.Round(value, 3));
    }
    return false; // continue iterating
  });

  // Sensor.Humidity
  featureModules = Modules.WithFeature("Simulator." + HUMIDITY_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(HUMIDITY_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) * 5;
      double value = (int)field.DecimalValue + variation;
      if (value &lt; 5) value = 5;
      if (value &gt; 95) value = 95;
      module.Emit(HUMIDITY_FIELD, Math.Round(value, 3));
    }
    return false; // continue iterating
  });

  // Sensor.Luminance
  featureModules = Modules.WithFeature("Simulator." + LUMINANCE_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var field = module.Parameter(LUMINANCE_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue) {
      double variation = (new Random().NextDouble() - 0.5) * 200;
      double value = Math.Round(field.DecimalValue + variation, 0);
      if (value &lt; 0) value = 0;
      if (value &gt; 1000) value = 1000;
      module.Emit(LUMINANCE_FIELD, value);
    }
    return false; // continue iterating
  });

  // Meter.Watts
  featureModules = Modules.WithFeature("Simulator." + WATTS_FIELD);
  featureModules.Each( (module) =&gt; {
    var frequency = module.Parameter(EMIT_FREQUENCY_FIELD);
    var powerMax = module.Parameter("Simulator." + WATTS_FIELD + ".Max");
    var level = module.Parameter("Status.Level");
    var field = module.Parameter(WATTS_FIELD);
    if (frequency.DecimalValue &gt; 0 &amp;&amp; field.IdleTime &gt;= frequency.DecimalValue &amp;&amp; powerMax.DecimalValue &gt; 0) {
      double value = powerMax.DecimalValue * (level != null ? level.DecimalValue : 0);
      if (value &gt; 0) {
        double variation = (new Random().NextDouble() - 0.5) / 2;
        value += variation;
      }
      if (field.DecimalValue == 0 &amp;&amp; value &gt; 0) {
        module.Emit(WATTS_FIELD, 0);
      }
      if (value &gt; 0 || field.DecimalValue != 0) {
	      module.Emit(WATTS_FIELD, Math.Round(value, 3));
      }
    }
    return false; // continue iterating
  });
}
</ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-home-demo</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>sensor-simulator</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>0099623ED5E21B2B343E6D0989617E56</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>410</Address>
    <Name>Sensor Simulator</Name>
    <Description>Emit random sensor values.</Description>
    <Group>Demo</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Temperature</Property>
        <Description>Temperature sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Humidity</Property>
        <Description>Humidity sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor</ForTypes>
        <Property>Simulator.Sensor.Luminance</Property>
        <Description>Light sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Meter.Watts</Property>
        <Description>Watts meter</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:1:2500:1:10</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Meter.Watts.Max</Property>
        <Description>Max Watt power</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0.5:60:0.5:30</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>Simulator.Sensor.DataFrequency</Property>
        <Description>Simulator emit frequency</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>// Add "Emulate UPnP device" feature
      Program.AddFeature(
      description:
      // Description of this feature
      "Emulate UPnP device (WeMo)",
      parameterName:
      // Name of the module's parameter where to store this feature data
      "UpnpDevice.EmulateWemo",
      type:
      // Display in the UI as a checkbox
      "checkbox",
      forDomains:
      // Show this feature for all domains
      "",
      forModuleTypes:
      // Show this feature for all module types
      "Switch,Light,Dimmer"
      );
      // Run the 'Program Code'
      Program.Run();
    </ScriptSetup>
    <ScriptSource>var FEATURE_EMULATE_WEMO = "UpnpDevice.EmulateWemo";
      var PARAM_UPNP_INFO_UDN = "UpnpDevice.Info.UDN";
      // List that holds allocated UPnP devices
      var upnpDevices = new Dictionary&lt;Module,UPnPDevice&gt;();

      Func&lt;ModuleHelper, UPnPDevice&gt; createUpnpModule = (module)=&gt;{
      // Create the UPnP device to control the 'module'
      var upnpDevice = UPnPDevice.CreateRootDevice(3600, 1, null);
      // use the same ID even when restarted
      if (module.HasParameter(PARAM_UPNP_INFO_UDN))
      {
      upnpDevice.UniqueDeviceName = module.Parameter(PARAM_UPNP_INFO_UDN).Value;
      }
      else
      {
      module.Parameter(PARAM_UPNP_INFO_UDN).Value = upnpDevice.UniqueDeviceName;
      }
      upnpDevice.ModelNumber = "3.1234";
      // Socket, Lightswitch - TODO: Insight, Motion
      var modelName = "";
      if (module.Instance.DeviceType == ModuleTypes.Light || module.Instance.DeviceType == ModuleTypes.Dimmer)
      {
      modelName = "Lightswitch";
      upnpDevice.StandardDeviceType = "urn:Belkin:device:lightswitch";
      upnpDevice.ModelDescription = "Belkin Light Switch 1.0";
      }
      else
      {
      modelName = "Socket";
      upnpDevice.StandardDeviceType = "urn:Belkin:device:controllee";
      upnpDevice.ModelDescription = "Belkin Plugin Socket 1.0";
      }
      upnpDevice.ModelName = modelName;
      // Prepend modelName (device type) to the UDN
      upnpDevice.UniqueDeviceName = modelName + "-" + upnpDevice.UniqueDeviceName;
      upnpDevice.FriendlyName = module.Instance.Name;
      upnpDevice.Manufacturer = "Belkin International Inc.";
      upnpDevice.ManufacturerURL = "http://www.belkin.com";
      upnpDevice.Major = 1; upnpDevice.Minor = 0;
      upnpDevice.SerialNumber = "EMU-1234567890";
      upnpDevice.UserAgentTag = "redsonic";

      // Create an instance of the BasicEvent service
      dynamic instance = new ExpandoObject();

      // Declare the "BasicEvent1" service
      var service = new UPnPService(
      // Version
      1.0,
      // Service ID
      "urn:Belkin:serviceId:basicevent1",
      // Service Type
      "urn:Belkin:service:basicevent:1",
      // Standard Service?
      true,
      // Service Object Instance
      instance
      );
      service.ControlURL = "/upnp/control/basicevent1";
      service.EventURL = "/upnp/event/basicevent1";
      service.SCPDURL = "/eventservice.xml";

      string stateVarName = "BinaryState";
      var stateVariable = new UPnPStateVariable(stateVarName, typeof(bool), true);
      stateVariable.AddAssociation("GetBinaryState", stateVarName);
      stateVariable.AddAssociation("SetBinaryState", stateVarName);
      stateVariable.Value = false;
      service.AddStateVariable(stateVariable);

      instance.GetBinaryState = new Func&lt;bool&gt;(() =&gt; (bool)service.GetStateVariable(stateVarName) /* module.IsOn */);
      instance.SetBinaryState = new Action&lt;int&gt;((BinaryState) =&gt; {
      service.SetStateVariable(stateVarName, BinaryState != 0);
      if (BinaryState == 1) module.On();
      else module.Off();
      });

      // Add the methods
      service.AddMethod("GetBinaryState", stateVarName);
      service.AddMethod("SetBinaryState", stateVarName);

      // Add the service
      upnpDevice.AddService(service);
      // Start the WeMo switch device UPnP simulator
      upnpDevice.StartDevice();

      return upnpDevice;
      };

      When.ModuleParameterChanged((m, p)=&gt;{
      // The checkbox option "UpnpDevice.EmulateWemo" has been changed
      if (p.Is(FEATURE_EMULATE_WEMO))
      {
      // Remove the UPnP device if already allocated
      if (upnpDevices.ContainsKey(m.Instance))
      {
      upnpDevices[m.Instance].StopDevice();
      upnpDevices.Remove(m.Instance);
      Program.Notify("Removed UPnP device for {0}", m.Instance.Name);
      }
      // Check if the option is ON (not empty = On)
      if (!String.IsNullOrEmpty(p.Value))
      {
      Program.Notify("Added UPnP device for {0}", m.Instance.Name);
      upnpDevices.Add(m.Instance, createUpnpModule(m));
      }
      }
      else if (upnpDevices.ContainsKey(m.Instance) &amp;&amp; p.Is("Status.Level"))
      {
      // Update status level of the associated UPnP device
      upnpDevices[m.Instance].Services[0].SetStateVariable("BinaryState", (p.DecimalValue != 0));
      }
      return true;
      });

      When.ProgramStopping(()=&gt;{
      // Stop allocated UPnP devices
      foreach(var upnp in upnpDevices.Values)
      {
      Program.Notify("Removed UPnP device for {0}", upnp.FriendlyName);
      upnp.StopDevice();
      }
      return true;
      });

      // Allocates UPnP devices for modules with this option active
      Modules.WithFeature(FEATURE_EMULATE_WEMO).Each((m)=&gt;{
      upnpDevices.Add(m.Instance, createUpnpModule(m));
      return false; // continue iterating
      });

      // Continue running the program in the background
      Program.GoBackground();
    </ScriptSource>
    <ScriptErrors />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-home-demo</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>upnp-emulation</Id>
      <Version>1.0.0</Version>
      <Required>false</Required>
      <Checksum>286D159B4B7B621C6220BA719C083C5F</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>20</Address>
    <Name>UPnP Emulation</Name>
    <Description>Make the device discoverable by third party applications and services supporting UPnP (Universal Plug and Play).</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>UpnpDevice.EmulateWemo</Property>
        <Description>Emulate UPnP device (WeMo)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>/*
|| @title: Virtual Modules Demo App
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2016-04-30 16:54
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   https://homegenie.it/content/devs/programs/
||   https://homegenie.it/api/ape/annotated.html
||   https://homegenie.it/api/mig/overview.html
*/

const _domain = "HomeAutomation.Demo";

// Add a temperature and luminance sensor
$$.program.addModule(_domain, "1", "Sensor");
$$.program.addFeature(_domain, "Sensor", "Sensor.Temperature", "Temperature value", "slider:-50:100:0.5");
$$.program.addFeature(_domain, "Sensor", "Sensor.Luminance", "Luminance value", "slider:0:1000:1");
$$.program.addFeature(_domain, "Sensor", "Sensor.MotionDetect", "Motion detection status", "slider:0:1:1");
$$.program.addFeature(_domain, "Sensor", "Status.Battery", "Battery level", "slider:0:100:1");

// Add a doorwindow sensor
$$.program.addModule(_domain, "2", "DoorWindow");
$$.program.addFeature(_domain, "DoorWindow", "Sensor.DoorWindow", "Door/Window sensor status (open/closed)", "slider:0:1:1");
$$.program.addFeature(_domain, "DoorWindow", "Status.Battery", "Battery level", "slider:0:100:1");

// Add an on/off switch
$$.program.addModule(_domain, "3", "Switch");
$$.program.addFeature(_domain, "Switch", "Status.Level", "Switch status (on/off)", "slider:0:1:1");

$$.program.run();
</ScriptSetup>
    <ScriptSource>/*
|| @title: Virtual Modules Demo App
|| @author: Generoso Martello
|| @version: 1.0
|| @updated: 2016-04-30 16:54
|| @licence: https://raw.githubusercontent.com/genielabs/HomeGenie/master/LICENSE_GPLV3.TXT
||
|| HomeGenie API reference
||   https://homegenie.it/content/devs/programs/
||   https://homegenie.it/api/ape/annotated.html
||   https://homegenie.it/api/mig/overview.html
*/

const domain = "HomeAutomation.Demo";
const demoModules = $$.modules.inDomain(domain);

initialize();

// handle API call for this domain
$$.on.webServiceCallReceived(domain, function(apiCall) {

  const ac = $$.program.parseApiCall(apiCall);
  // Example:
  //  if the "apiCall" is
  //    "http://&lt;homegenie_address&gt;/api/HomeAutomation.Demo/3/Control.Level/50/1000"
  //  then "ac" will have the following property values
  //    ac.domain = "HomeAutomation.Demo"
  //    ac.address = "3"
  //    ac.command = "Control.Level"
  //    ac.optionsString = "50/1000"
  //    ac.getOption(0) = "50"
  //    ac.getOption(1) = "1000"

  let response = "ERROR";
  // get the module addressed by the API call
  const mod = demoModules.withAddress(ac.address).get();
  if (mod.isOfDeviceType("Switch")) {
    switch (ac.command) {
      case 'Control.On':
        mod.emit("Status.Level", "1");
        response = "OK";
        break;
      case 'Control.Off':
        mod.emit("Status.Level", "0");
        response = "OK";
        break;
      case 'Control.Toggle':
        mod.emit("Status.Level", mod.level != 0 ? "0" : "1");
        response = "OK";
        break;
    }
  }

  // beside the response, also return back requested data for debugging purpose
  return JSON.stringify({
    ResponseValue: response,
    ApiCall: apiCall,
    Domain: ac.domain,
    Address: ac.address,
    Command: ac.command,
    Options: ac.optionsString,
    Option1: ac.getOption(0),
    Option2: ac.getOption(1)
  });

});

$$.program.goBackground();

// let's give some default properties to virtual modules
function initialize() {
  // Multi Sensor
  const multiSensor = demoModules.withAddress("1").get();
  if (multiSensor.instance.name == "") {
    multiSensor.instance.name = 'Multi Sensor';
  }
  if (multiSensor.parameter("Sensor.Temperature").value == "") {
    multiSensor.parameter("Sensor.Temperature").value = "25.5";
  }
  if (multiSensor.parameter("Sensor.Luminance").value == "") {
    multiSensor.parameter("Sensor.Luminance").value = "273";
  }
  if (multiSensor.parameter("Sensor.MotionDetect").value == "") {
    multiSensor.parameter("Sensor.MotionDetect").value = "0";
  }
  // Door Window
  const doorWindow = demoModules.withAddress("2").get();
  if (doorWindow.instance.name == "") {
    doorWindow.instance.name = "Door Sensor";
  }
  if (doorWindow.parameter("Sensor.DoorWindow").value == "") {
    doorWindow.parameter("Sensor.DoorWindow").value = "1";
  }
  // Boiler Switch
  const boilerSwitch = demoModules.withAddress("3").get();
  if (boilerSwitch.instance.name == "") {
    boilerSwitch.instance.name = "Boiler Switch";
  }
  if (boilerSwitch.parameter("Status.Level").value == "") {
    boilerSwitch.parameter("Status.Level").value = "0";
  }
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-home-demo</PackageId>
      <PackageVersion>1.0.0</PackageVersion>
      <Id>virtual-modules-demo</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>58D0E86C8BCDED68557C087C18811444</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>400</Address>
    <Name>Virtual Modules Demo</Name>
    <Description>Manually set values of the virtual device.</Description>
    <Group>Demo</Group>
    <Features>
      <ProgramFeature>
        <FieldType>slider:-50:100:0.5</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.Temperature</Property>
        <Description>Temperature value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1000:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.Luminance</Property>
        <Description>Luminance value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>Sensor.MotionDetect</Property>
        <Description>Motion detection status</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:100:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>DoorWindow</ForTypes>
        <Property>Status.Battery</Property>
        <Description>Battery level</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>DoorWindow</ForTypes>
        <Property>Sensor.DoorWindow</Property>
        <Description>Door/Window sensor status (open/closed)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:1:1</FieldType>
        <ForDomains>HomeAutomation.Demo</ForDomains>
        <ForTypes>Switch</ForTypes>
        <Property>Status.Level</Property>
        <Description>Switch status (on/off)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>