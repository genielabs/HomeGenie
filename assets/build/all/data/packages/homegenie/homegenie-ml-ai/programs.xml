<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ScriptSetup>// This method is used to register this program as a "AI intent handler"
Program.Implements(
    "@AI:IntentHandler",
    API_URL
)
.AddOption("ApiKey", "?", "Google Gemini AI API key", "text")
.AddOption("ModelId", DEFAULT_MODEL_ID, "Model ID", "text")
.Run();
</ScriptSetup>
    <ScriptSource>Api.Handle($"{API_URL}/Process", (userCommand) =&gt; {
  /*
    var devices = new List&lt;object&gt;
    {
        new { name = "LED strip", group = "Kitchen", address = "4", domain = "HomeAutomation.ZigBee" }
        // ... other devices
    };
  */


  // Check if Gemini API key and model were set
  string geminiApiKey = Program.Option("ApiKey").Value.Trim();
  string geminiModelId = Program.Option("ModelId").Value.Trim();
  if (geminiApiKey.Length != 39 || !geminiApiKey.StartsWith("AIzaSy") || String.IsNullOrEmpty(geminiModelId))
  {
    string error = "Gemini Intent Handler not properly configured.";
    Program.Notify($"ERROR #1: {error} [program_configure]");
    return new IntentHandlerResponse() {
        answer = $"{error} Go to settings page to configure it."
    };
  }


  var allowedDeviceTypes = new[] { "Dimmer", "Light", "Color", "Switch", "Shutter", "DoorLock", "Thermostat" };
  var devices = Modules.Groups
    .SelectMany(
        groupName =&gt; Modules.InGroup(groupName).SelectedModules
                          .Where(module =&gt; allowedDeviceTypes.Contains(module.DeviceType.ToString())),
        (groupName, module) =&gt; new
        {
            name = module.Name,
            group = groupName,
            address = module.Address,
            domain = module.Domain,
            type = module.DeviceType
        }
    )
    .ToList();

  string devicesJson = JsonConvert.SerializeObject(devices, Formatting.Indented);
  string fullPrompt = $"{GEMINI_SYSTEM_PROMPT}\n\nDEVICE LIST:\n{devicesJson}\n\nUSER COMMAND:\n\"{userCommand}\"";
  var payload = new
  {
      contents = new[]
      {
          new
          {
              parts = new[]
              {
                  new { text = fullPrompt }
              }
          }
      },
      generationConfig = new
      {
          temperature = 0.3
      }
  };

  string payloadJson = JsonConvert.SerializeObject(payload);
  string geminiRequestUrl = $"https://generativelanguage.googleapis.com/v1beta/models/{geminiModelId}:generateContent?key={geminiApiKey}";
  var data = Net
    .WebService(geminiRequestUrl)
    .AddHeader("Content-Type", "application/json")
    .Post(payloadJson)
    .GetData();

  var response = new IntentHandlerResponse();

  try
  {
      string commandJsonString = data.candidates[0].content.parts[0].text;
      if (!string.IsNullOrEmpty(commandJsonString))
      {
          commandJsonString = commandJsonString.Trim();
          if (commandJsonString.StartsWith("```json"))
          {
              commandJsonString = commandJsonString.Substring(7, commandJsonString.Length - 7 - 3).Trim();
          }
          dynamic hgCommand = JsonConvert.DeserializeObject&lt;dynamic&gt;(commandJsonString);
          string answer = hgCommand.answer;

        JArray commands = hgCommand.commands;

        //Program.Notify(answer);
        //Program.Say(answer);
        response.answer = answer;

        if (commands != null)
        {
            foreach (var commandToken in commands)
            {
                string command = commandToken.ToString();
                if (command.ToUpper() != "NONE")
                {
                    Program.Log.Info($"Executing commands from Gemini: {command}");
                    Api.Call(command);
                    response.commands.Add(command);
                }
            }
        }

      }
      else
      {
          //Program.Notify("Gemini's reply does not contain valid commands.");
          response.answer = "invalid_reply";
      }
  }
  catch (Exception ex)
  {
      //Program.Notify($"Error while processing dynamic response payload: {ex.Message}");
      response.answer = $"error: ${ex.Message}";
  }

  return response;
});

Program.GoBackground();
</ScriptSource>
    <ScriptContext>const string API_URL = "AI.IntentHandlers/Gemini";
const string DEFAULT_MODEL_ID = "gemini-2.5-flash-lite";

public class IntentHandlerResponse
{
    public string answer { get; set; }
    public List&lt;string&gt; commands { get; set; }

    public IntentHandlerResponse()
    {
        answer = "";
        commands = new List&lt;string&gt;();
    }
}

const string GEMINI_SYSTEM_PROMPT = """
You are a home automation assistant named HomeJeanie, with a very friendly personality. Your primary task is to convert user commands into a valid JSON object. We can also chat about anything.

**CRITICAL RULES:**
1.  Your entire response must be ONLY a valid JSON object. Do not include ```json ```.
2.  The "answer" field inside the JSON **MUST be in the exact same language as the `User Command`**. This is a primary instruction.
3.  The JSON object must have "answer" (a confirmation phrase) and "commands" (an array of command objects).
4.  For conversational replies without a specific command, return an empty "commands" array.
5.  When confirming an action, use the simple past tense (e.g., "Ok, I've turned on the light").

**DEVICE TYPES &amp; API STRUCTURE:**
Each device in the DEVICE LIST has a `type` that tells you its capabilities.

- **For type `Light`, `Dimmer`, `Color`:**
  - On/Off: `Control.On` / `Control.Off`
  - Brightness (0-100): `Control.Level/{value}`
  - Color (HSB, normalized 0.0-1.0): `Control.ColorHsb/{h},{s},{v}`

- **For type `Switch`:**
  - On/Off: `Control.On` / `Control.Off`

- **For type `Thermostat`:**
  - Set Mode: `Thermostat.ModeSet/{mode}`. Valid modes: `Off`, `Heat`, `Cool`, `HeatEconomy`, `CoolEconomy`.
  - Set Temperature: `Thermostat.SetPointSet/{type}/{value}`. Valid types: `Heating`, `Cooling`. If unsure, default to `Heating`.

- **For type `DoorLock`:**
  - Lock/Unlock: `Control.On` (Lock), `Control.Off` (Unlock).

If a command is invalid, `commands` should be `["NONE"]`.

**COLOR HANDLING RULE:**
You are responsible for interpreting color names (e.g., 'red', 'light blue') and shades into normalized HSB values. For pure colors, Saturation (S) and Value (V) are 1.0. (Hue values: Red H=0.0, Green H=0.33, Blue H=0.66).

--- EXAMPLES ---

**ITALIAN - Multi-command with different actions:**
- DEVICE LIST:
[
  { "name": "Luce Camera", "group": "Camera", "address": "1", "domain": "HomeAutomation.HomeGenie", "type": "Light" },
  { "name": "Abat Jour", "group": "Camera", "address": "2", "domain": "HomeAutomation.HomeGenie", "type": "Color" }
]
- User Command: "spegni la luce della camera e imposta l'abat jour su un viola intenso"
- CORRECT OUTPUT: {
    "answer": "Fatto! Ho spento la Luce Camera e impostato l'Abat Jour su un viola intenso.",
    "commands": [
        "/api/HomeAutomation.HomeGenie/1/Control.Off",
        "/api/HomeAutomation.HomeGenie/2/Control.ColorHsb/0.83,1.0,1.0"
    ]
}

**FRENCH - Simple command:**
- DEVICE LIST: [ { "name": "Lampe", "group": "Salon", "address": "12", "domain": "HomeAutomation.HomeGenie", "type": "Dimmer" } ]
- User Command: "Allume la Lampe dans le Salon"
- CORRECT OUTPUT: {
    "answer": "D'accord, j'ai allumé la Lampe dans le Salon.",
    "commands": [
        "/api/HomeAutomation.HomeGenie/12/Control.On"
    ]
}

**SPANISH - Thermostat command:**
- DEVICE LIST: [ { "name": "Termostato", "group": "Salón", "address": "t-1", "domain": "HomeAutomation.HomeGenie", "type": "Thermostat" } ]
- User Command: "pon el termostato del salón a 21 grados"
- CORRECT OUTPUT: {
    "answer": "Listo. He puesto el termostato del Salón a 21 grados para calentar.",
    "commands": [
        "/api/HomeAutomation.HomeGenie/t-1/Thermostat.SetPointSet/Heating/21"
    ]
}

**PORTUGUESE - Brightness command:**
- DEVICE LIST: [ { "name": "Luz da Sala", "group": "Sala", "address": "dim-5", "domain": "HomeAutomation.HomeGenie", "type": "Dimmer" } ]
- User Command: "diminua a luz da sala para 30 por cento"
- CORRECT OUTPUT: {
    "answer": "Ok, diminuí a Luz da Sala para 30%.",
    "commands": [
        "/api/HomeAutomation.HomeGenie/dim-5/Control.Level/30"
    ]
}

**JAPANESE - Conversational reply:**
- User Command: "こんにちは、元気ですか"
- CORRECT OUTPUT: {
    "answer": "こんにちは！元気ですよ。何かお手伝いできることはありますか？",
    "commands": []
}
""";
</ScriptContext>
    <ScriptErrors>[]</ScriptErrors>
    <Data />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-ml-ai</PackageId>
      <PackageVersion>1.0.1</PackageVersion>
      <Id>gemini-intent-handler</Id>
      <Version>1.0.1</Version>
      <Required>true</Required>
      <Checksum>56FF2B45B8774EAE143A76612D3458B3</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>930</Address>
    <Name>Gemini Intent Handler</Name>
    <Description>Enables natural language control for your smart system using Google's Gemini AI.
To activate this feature, enter a valid API key.
Follow the instructions at https://aistudio.google.com/app/apikey to get a free API key.</Description>
    <Group>AI - Machine Learning</Group>
    <Features />
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>csharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature(
    "",
    ForCameraInputType,
    InstanceSegmentation,
    "Enable instance segmentation",
    "checkbox"
  ).AddFeature(
    "",
    ForCameraInputType,
    InstanceSegmentationTrigger,
    "Comma-separated list of things (in English) that will trigger the alarm. (e.g.: cat, dog, person, backpack, suitcase)",
    "text"
  ).AddOption(
    "Yolo.ModelPath",
    Data.GetFolder() + "/yolo11n-seg.onnx",
    "Path of YOLO11 model file (.onnx)",
    "text"
  );

Program.Run();
</ScriptSetup>
    <ScriptSource>var inputModules = Modules.WithFeature(InstanceSegmentation);

// Restart program if configuration has been changed to apply new settings.
When.ModuleParameterChanged( (module, property) =&gt; {
    if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions."))
    {
        if (Program.IsRunning) Program.Restart();
        return true;
    }
    return true;
});

var yoloModelPath = Program.Option("Yolo.ModelPath")?.Value;
if (String.IsNullOrEmpty(yoloModelPath))
{
    Program.Notify($"Configure the path of YOLO11 'segment' model (.onnx file). {OptionButtons}");
    Pause(5);
    return;
}


// For details about this implemention see
// *ML.net* and *YoloSharp* documentation


try
{
    var errorOccurred = false;
    using var detectPredictor = new YoloPredictor(yoloModelPath);
    while (Program.IsRunning)
    {
        if (inputModules.SelectedModules.Count == 0)
        {
            Pause(1);
            continue;
        }
        inputModules.Command("Camera.GetPicture").Submit((m, data) =&gt; {
            try
            {
                var result = detectPredictor.Segment((byte[])data);
                //Console.WriteLine($"Result: {result}");
                //Console.WriteLine($"Speed:  {result.Speed}");
                var module = Modules.InDomain(m.Domain).WithAddress(m.Address).Get();
                if (result.Count() &gt; 0)
                {
                    var output = new List&lt;SegmentResult&gt;();
                    // Emit "Sensor.ObjectDetect.Subject.Data" event if anything
                    // mathing the configured "TriggerDetect" list
                    // was detected in the scene.
                    string[] matchList = module
                        .Parameter( InstanceSegmentationTrigger )?.Value
                        .Split(',').Select(p =&gt; p.Trim())
                        .Where(x =&gt; !string.IsNullOrEmpty(x))
                        .ToArray();
                    if (matchList.Length &gt; 0)
                    {
                        var filtered = new List&lt;Compunet.YoloSharp.Data.Segmentation&gt;();
                        foreach (var r in result)
                        {
                            var subject = r.Name.Name;
                            if (matchList.Contains(subject))
                            {
                                filtered.Add(r);
                            }
                        }
                        if (filtered.Count &gt; 0)
                        {
                            module.Emit(ObjectDetect, "1");
                            foreach (var r in filtered)
                            {
                                output.Add(new SegmentResult(){
                                    Result = r,
                                    Mask = ExtractAndApproximateContour(r.Mask, 100)
                                });
                                module.Emit(ObjectDetectSubject, r);
                            }
                            module.Emit(ObjectDetect, "0");
                        }
                    }
                    else
                    {
                        foreach (var r in result)
                        {
                            output.Add(new SegmentResult(){
                                Result = r,
                                Mask = ExtractAndApproximateContour(r.Mask, 100)
                            });
                        }
                    }

                    if (output.Count &gt; 0)
                    {
                        // Emit json data for the video player (overlay data)
                        var jsonResults = JsonConvert.SerializeObject(output);
                        module.Emit(VideoPlayerWidgetOverlaySegment, jsonResults);
                    }

                }
            }
            catch (Exception e)
            {
                errorOccurred = true;
                Console.WriteLine(e.Message);
            }
        });
        if (errorOccurred)
        {
            errorOccurred = false;
            Pause(5);
        }
    }
}
catch (Exception e)
{
    Program.Notify($"Error: {e.Message} {OptionButtons}");
    Pause(5);
    return;
}
</ScriptSource>
    <ScriptContext>#using Compunet.YoloSharp.Memory

const string
OptionButtons = "[program_configure,program_disable]",
YoloModelPath = "Yolo.ModelPath",
ForCameraInputType = "Sensor:Widget.DisplayModule=homegenie/generic/camerainput",
InstanceSegmentation = "ML.InstanceSegmentation",
InstanceSegmentationTrigger = $"{InstanceSegmentation}.TriggerDetect",
ObjectDetect = "Sensor.ObjectDetect",
ObjectDetectSubject = "Sensor.ObjectDetect.Subject",
VideoPlayerWidgetOverlaySegment = "Widget.Data.VideoPlayer.Overlay.Segment";

public class SegmentResult
{
    public Compunet.YoloSharp.Data.Segmentation Result;
    public List&lt;MaskPoint&gt; Mask;
}

public class MaskPoint
{
    public float X;
    public float Y;
    public MaskPoint(float x, float y)
    {
        X = x;
        Y = y;
    }
}

public static List&lt;MaskPoint&gt; ExtractAndApproximateContour(BitmapBuffer r, int maxPoints = 25)
{
    var contour = ExtractContourPointsInternal(r);  // Get the initial contour

    if (contour.Count &lt;= maxPoints)
    {
        return contour; // No need to approximate if already within the limit
    }

    // Implement a simple approximation by taking equally spaced points
    var approximatedContour = new List&lt;MaskPoint&gt;();
    double interval = (double)contour.Count / maxPoints;
    for (int i = 0; i &lt; maxPoints - 1; i++)
    {
        int index = (int)Math.Round(i * interval); //Round for accuracy
        approximatedContour.Add(contour[index]); // Add existing point at the index
    }

    //Ensure the loop has the final item; If the last isn't added, add it
    if(approximatedContour.Last() != contour.Last()) {
            approximatedContour.Add(contour.Last());
    }

    return approximatedContour;
}


private static List&lt;MaskPoint&gt; ExtractContourPointsInternal(BitmapBuffer r)
{
    int height = r.Height;
    int width = r.Width;

    // Helper function to check if a pixel is a border pixel
    bool IsBorderPixel(BitmapBuffer mask, int x, int y)
    {
        if (x == 0 || x == width - 1 || y == 0 || y == height - 1)
        {
            return true;
        }

        return (mask[y, x - 1] &gt; 0.9 != mask[y, x] &gt; 0.9 ||
                mask[y, x + 1] &gt; 0.9 != mask[y, x] &gt; 0.9 ||
                mask[y - 1, x] &gt; 0.9 != mask[y, x] &gt; 0.9 ||
                mask[y + 1, x] &gt; 0.9 != mask[y, x] &gt; 0.9);
    }

    // Find all contour pixels
    var contourPixels = new List&lt;MaskPoint&gt;();
    for (int y = 0; y &lt; height; y++)
    {
        for (int x = 0; x &lt; width; x++)
        {
            if (r[y, x] &gt; 0.9 &amp;&amp; IsBorderPixel(r, x, y))
            {
                contourPixels.Add(new MaskPoint(x, y));
            }
        }
    }

    if (contourPixels.Count == 0)
    {
        return new List&lt;MaskPoint&gt;(); // Return empty list if no shape found
    }

    // Order the contour pixels (nearest neighbor approach)
    var contour = new List&lt;MaskPoint&gt;();
    var startPixel = contourPixels[0];
    contour.Add(startPixel);
    contourPixels.Remove(startPixel);

    var currentPixel = startPixel;

    while (contourPixels.Count &gt; 0)
    {
        var nearestNeighbor = contourPixels
            .OrderBy(p =&gt; Math.Sqrt(Math.Pow(p.X - currentPixel.X, 2) + Math.Pow(p.Y - currentPixel.Y, 2))) // Euclidean distance
            .FirstOrDefault();

        if (nearestNeighbor == null)  // No more neighbors found
        {
            break;
        }

        contour.Add(nearestNeighbor);
        contourPixels.Remove(nearestNeighbor);
        currentPixel = nearestNeighbor;
    }

    return contour;
}
</ScriptContext>
    <ScriptErrors />
    <Data />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-ml-ai</PackageId>
      <PackageVersion>1.0.1</PackageVersion>
      <Id>instance-segmentation</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>00719B2E60B2F8475660021B26C59070</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>912</Address>
    <Name>Instance Segmentation</Name>
    <Description>Detect objects and their contour mask using a pre-trained YOLO11 model.
</Description>
    <Group>AI - Machine Learning</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor:Widget.DisplayModule=homegenie/generic/camerainput</ForTypes>
        <Property>ML.InstanceSegmentation</Property>
        <Description>Enable instance segmentation</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Sensor:Widget.DisplayModule=homegenie/generic/camerainput</ForTypes>
        <Property>ML.InstanceSegmentation.TriggerDetect</Property>
        <Description>Comma-separated list of things (in English) that will trigger the alarm. (e.g.: cat, dog, person, backpack, suitcase)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>csharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature(
    "",
    ForCameraInputType,
    ObjectDetection,
    "Enable objects detection",
    "checkbox"
  ).AddFeature(
    "",
    ForCameraInputType,
    ObjectDetectionTrigger,
    "Comma-separated list of things (in English) that will trigger the alarm. (e.g.: cat, dog, person, backpack, suitcase)",
    "text"
  ).AddOption(
    YoloModelPath,
    Data.GetFolder() + "/yolo11n.onnx",
    "Path of YOLO11 model file (.onnx)",
    "text"
  );

Program.Run();
</ScriptSetup>
    <ScriptSource>var inputModules = Modules.WithFeature( ObjectDetection );

// Restart program if configuration has been changed to apply new settings.
When.ModuleParameterChanged( (module, property) =&gt; {
    if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions."))
    {
        if (Program.IsRunning) Program.Restart();
        return true;
    }
    return true;
});

var modelPath = Program.Option(YoloModelPath)?.Value;
if (String.IsNullOrEmpty(modelPath))
{
    Program.Notify($"Configure the path of YOLO11 'detect' model (.onnx file). {OptionButtons}");
    Pause(5);
    return;
}


// For details about this implemention see
// *ML.net* and *YoloSharp* documentation


try
{
    var errorOccurred = false;
    using var detectPredictor = new YoloPredictor(modelPath);
    while (Program.IsRunning)
    {
        if (inputModules.SelectedModules.Count == 0)
        {
            Pause(1);
            continue;
        }
        inputModules.Command("Camera.GetPicture").Submit((m, data) =&gt; {
            try
            {
                var result = detectPredictor.Detect((byte[])data, new YoloConfiguration { Confidence = 0.35f });
                //Console.WriteLine($"Result: {result}");
                //Console.WriteLine($"Speed:  {result.Speed}");
                var module = Modules.InDomain(m.Domain).WithAddress(m.Address).Get();
                if (result.Count() &gt; 0)
                {
                    var jsonResults = "";
                    // Emit "Sensor.ObjectDetect.Subject.Data" event if anything
                    // mathing the configured "TriggerDetect" list
                    // was detected in the scene.
                    string[] matchList = module
                        .Parameter( ObjectDetectionTrigger )?.Value
                        .Split(',').Select(p =&gt; p.Trim())
                        .Where(x =&gt; !string.IsNullOrEmpty(x))
                        .ToArray();
                    if (matchList.Length &gt; 0)
                    {
                        var filtered = new List&lt;Compunet.YoloSharp.Data.Detection&gt;();
                        foreach (var r in result)
                        {
                            var subject = r.Name.Name;
                            if (matchList.Contains(subject))
                            {
                                filtered.Add(r);
                            }
                        }
                        if (filtered.Count &gt; 0)
                        {
                            module.Emit(ObjectDetect, "1");
                            foreach (var r in filtered)
                            {
                                module.Emit(ObjectDetectSubject, r);
                            }
                            module.Emit(ObjectDetect, "0");
                            jsonResults = JsonConvert.SerializeObject(filtered);
                        }
                    }
                    else
                    {
                        jsonResults = JsonConvert.SerializeObject(result);
                    }

                    if (jsonResults != "")
                    {
                        // Emit json data for the video player (overlay data)
                        module.Emit(VideoPlayerWidgetOverlayDetect, jsonResults);
                    }
                }
            }
            catch (Exception e)
            {
                errorOccurred = true;
                Console.WriteLine(e.Message);
            }
        });
        if (errorOccurred)
        {
            errorOccurred = false;
            Pause(5);
        }
    }
}
catch (Exception e)
{
    Program.Notify($"Error: {e.Message} {OptionButtons}");
    Pause(5);
    return;
}
</ScriptSource>
    <ScriptContext>const string
OptionButtons = "[program_configure,program_disable]",
YoloModelPath = "Yolo.ModelPath",
ForCameraInputType = "Sensor:Widget.DisplayModule=homegenie/generic/camerainput",
ObjectDetection = "ML.ObjectDetection",
ObjectDetectionTrigger = $"{ObjectDetection}.TriggerDetect",
ObjectDetect = "Sensor.ObjectDetect",
ObjectDetectSubject = "Sensor.ObjectDetect.Subject",
VideoPlayerWidgetOverlayDetect = "Widget.Data.VideoPlayer.Overlay.Detect";
</ScriptContext>
    <ScriptErrors />
    <Data />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-ml-ai</PackageId>
      <PackageVersion>1.0.1</PackageVersion>
      <Id>object-detection</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>25864EC9FD1DDD23D766A6120AAD047B</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>910</Address>
    <Name>Object Detection</Name>
    <Description>Detect objects using a pre-trained YOLO11 model.
</Description>
    <Group>AI - Machine Learning</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor:Widget.DisplayModule=homegenie/generic/camerainput</ForTypes>
        <Property>ML.ObjectDetection</Property>
        <Description>Enable objects detection</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Sensor:Widget.DisplayModule=homegenie/generic/camerainput</ForTypes>
        <Property>ML.ObjectDetection.TriggerDetect</Property>
        <Description>Comma-separated list of things (in English) that will trigger the alarm. (e.g.: cat, dog, person, backpack, suitcase)</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>csharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ScriptSetup>Program
  .AddFeature(
    "",
    ForCameraInputType,
    PoseDetection,
    "Enable pose tracking",
    "checkbox"
  ).AddOption(
    "Yolo.ModelPath",
    Data.GetFolder() + "/yolo11n-pose.onnx",
    "Path of YOLO11 model file (.onnx)",
    "text"
  );

Program.Run();
</ScriptSetup>
    <ScriptSource>var inputModules = Modules.WithFeature(PoseDetection);

// Restart program if configuration has been changed to apply new settings.
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.Instance == Program.Module &amp;&amp; property.Name.StartsWith("ConfigureOptions."))
  {
    if (Program.IsRunning) Program.Restart();
    return true;
  }
  return true;
});

var yoloModelPath = Program.Option("Yolo.ModelPath")?.Value;
if (String.IsNullOrEmpty(yoloModelPath))
{
    Program.Notify($"Configure the path of YOLO11 'pose' model (.onnx file). {OptionButtons}");
    Pause(5);
    return;
}


// For details about this implemention see
// *ML.net* and *YoloSharp* documentation


try
{
    var errorOccurred = false;
    using var detectPredictor = new YoloPredictor(yoloModelPath);
    while (Program.IsRunning)
    {
        if (inputModules.SelectedModules.Count == 0)
        {
            Pause(1);
            continue;
        }
        inputModules.Command("Camera.GetPicture").Submit((m, data) =&gt; {
            try
            {
                var result = detectPredictor.Pose((byte[])data);
                //Console.WriteLine($"Result: {result}");
                //Console.WriteLine($"Speed:  {result.Speed}");
                if (result.Count() &gt; 0)
                {
                    var jsonResults = JsonConvert.SerializeObject(result);
                    var module = Modules.InDomain(m.Domain).WithAddress(m.Address).Get();
                    // Emit json data for the video player (overlay data)
                    module.Emit(VideoPlayerWidgetOverlayPose, jsonResults);

                    module.Emit(ObjectDetect, "1");
                    foreach (var r in result)
                    {
                        module.Emit(ObjectDetectSubject, r);
                    }
                    module.Emit(ObjectDetect, "0");
                }
            }
            catch (Exception e)
            {
                errorOccurred = true;
                Console.WriteLine(e.Message);
            }
        });
        if (errorOccurred)
        {
            errorOccurred = false;
            Pause(5);
        }
    }
}
catch (Exception e)
{
    Program.Notify($"Error: {e.Message} {OptionButtons}");
    Pause(5);
    return;
}
</ScriptSource>
    <ScriptContext>const string
OptionButtons = "[program_configure,program_disable]",
YoloModelPath = "Yolo.ModelPath",
ForCameraInputType = "Sensor:Widget.DisplayModule=homegenie/generic/camerainput",
PoseDetection = "ML.PoseEstimation",
ObjectDetect = "Sensor.ObjectDetect",
ObjectDetectSubject = "Sensor.ObjectDetect.Subject",
VideoPlayerWidgetOverlayPose = "Widget.Data.VideoPlayer.Overlay.Pose";
</ScriptContext>
    <ScriptErrors />
    <Data />
    <PackageInfo>
      <Repository>homegenie</Repository>
      <PackageId>homegenie-ml-ai</PackageId>
      <PackageVersion>1.0.1</PackageVersion>
      <Id>pose-estimation</Id>
      <Version>1.0.0</Version>
      <Required>true</Required>
      <Checksum>FB5034E061C398DFC73251D0C622CA4B</Checksum>
    </PackageInfo>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>911</Address>
    <Name>Pose estimation</Name>
    <Description>Keypoint detection via pose estimation, using custom ONNX models or the default pre-trained YOLOv11 model (human pose-specific).</Description>
    <Group>AI - Machine Learning</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor:Widget.DisplayModule=homegenie/generic/camerainput</ForTypes>
        <Property>ML.PoseEstimation</Property>
        <Description>Enable pose tracking</Description>
      </ProgramFeature>
    </Features>
    <AutoRestartEnabled>false</AutoRestartEnabled>
    <Cloneable>false</Cloneable>
    <Type>csharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>