<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZWaveLib</name>
    </assembly>
    <members>
        <member name="M:ZWaveLib.ICommandClass.GetClassId">
            <summary>
            Returns Id of Command class
            </summary>
            <returns>command class Id</returns></member>
        <member name="M:ZWaveLib.ICommandClass.GetEvent(ZWaveLib.ZWaveNode,System.Byte[])">
            <summary>Processes the message and returns corresponding ZWaveEvent</summary>
            <param name="node">the Node triggered the command</param>
            <param name="message">command part of ZWave message (without headers and checksum)</param>
            <returns></returns></member>
        <member name="T:ZWaveLib.ZWaveMessage">
            <summary>
            Z-Wave message.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Ack">
            <summary>
            Ack message.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Nack">
            <summary>
            Nack message.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.ResendAttemptsMax">
            <summary>
            Max resend attempts.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.SendMessageTimeoutMs">
            <summary>
            The send message timeout in milliseconds.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Header">
            <summary>
            The Z-Wave message frame header.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveMessage.NodeId">
            <summary>
            Gets or sets the identifier of the node subject of this message.
            </summary>
            <value>The node identifier.</value></member>
        <member name="P:ZWaveLib.ZWaveMessage.CallbackId">
            <summary>
            Gets or sets the callback identifier.
            </summary>
            <value>The callback identifier.</value></member>
        <member name="F:ZWaveLib.ZWaveMessage.RawData">
            <summary>
            The raw message bytes data.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Seq">
            <summary>
            The sequence number of this message.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Timestamp">
            <summary>
            The timestamp.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveMessage.ResendCount">
            <summary>
            Gets or sets the resend counter.
            </summary>
            <value>The resend counter.</value></member>
        <member name="F:ZWaveLib.ZWaveMessage.Direction">
            <summary>
            The message direction (Inboud/Outbound).
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Type">
            <summary>
            The type of message (Request/Response).
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.Function">
            <summary>
            The function.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.CommandClass">
            <summary>
            The command class.
            </summary></member>
        <member name="F:ZWaveLib.ZWaveMessage.CallbackStatus">
            <summary>
            The callback status.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveMessage.#ctor(System.Byte[],ZWaveLib.MessageDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveMessage" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="direction">Direction.</param>
            <param name="generateCallback">If set to <c>true</c> generate callback.</param></member>
        <member name="M:ZWaveLib.ZWaveMessage.Wait">
            <summary>
            Wait until this message transaction is completed.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveMessage.BuildSendDataRequest(System.Byte,System.Byte[])">
            <summary>
            Builds a Z-Wave SendData request message.
            </summary>
            <returns>The send data request.</returns>
            <param name="nodeId">Node identifier.</param>
            <param name="request">Request.</param></member>
        <member name="M:ZWaveLib.ZWaveMessage.VerifyChecksum(System.Byte[])">
            <summary>
            Verifies the checksum.
            </summary>
            <returns><c>true</c>, if checksum was verifyed, <c>false</c> otherwise.</returns>
            <param name="data">Data.</param></member>
        <member name="M:ZWaveLib.ZWaveMessage.GenerateCallbackId">
            <summary>
            Generates the callback identifier for an Outbound message.
            </summary>
            <returns>The callback identifier.</returns></member>
        <member name="M:ZWaveLib.ZWaveMessage.GenerateChecksum(System.Byte[])">
            <summary>
            Generates the checksum of an Outbound message.
            </summary>
            <returns>The checksum.</returns>
            <param name="data">Data.</param></member>
        <member name="T:ZWaveLib.NodeCapabilities">
            <summary>
            Node capabilities (Protocol Info).
            </summary></member>
        <member name="P:ZWaveLib.NodeCapabilities.BasicType">
            <summary>
            Gets or sets the basic type.
            </summary>
            <value>The basic type.</value></member>
        <member name="P:ZWaveLib.NodeCapabilities.GenericType">
            <summary>
            Gets or sets the generic type.
            </summary>
            <value>The generic type.</value></member>
        <member name="P:ZWaveLib.NodeCapabilities.SpecificType">
            <summary>
            Gets or sets the specific type.
            </summary>
            <value>The specific type.</value></member>
        <member name="M:ZWaveLib.NodeCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCapabilities" /> class.
            </summary></member>
        <member name="T:ZWaveLib.NodeCommandClass">
            <summary>
            Node command class.
            </summary></member>
        <member name="F:ZWaveLib.NodeCommandClass.Id">
            <summary>
            The CC identifier.
            </summary></member>
        <member name="P:ZWaveLib.NodeCommandClass.Version">
            <summary>
            Gets or sets the version for this CC.
            </summary>
            <value>The version.</value></member>
        <member name="P:ZWaveLib.NodeCommandClass.CommandClass">
            <summary>
            Gets the command class enumeration entry.
            </summary>
            <value>The command class.</value></member>
        <member name="M:ZWaveLib.NodeCommandClass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCommandClass" /> class.
            </summary></member>
        <member name="M:ZWaveLib.NodeCommandClass.#ctor(System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCommandClass" /> class.
            </summary>
            <param name="id">Identifier.</param>
            <param name="version">Version.</param></member>
        <member name="T:ZWaveLib.NodeData">
            <summary>
            Custom node data.
            </summary></member>
        <member name="P:ZWaveLib.NodeData.Name">
            <summary>
            Gets or sets the name for this data entry.
            </summary>
            <value>The name.</value></member>
        <member name="P:ZWaveLib.NodeData.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value></member>
        <member name="M:ZWaveLib.NodeData.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeData" /> class.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="data">Data.</param></member>
        <member name="T:ZWaveLib.ZWaveNode">
            <summary>
            Z-wave node object.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveNode.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.NodeInformationFrame">
            <summary>
            Gets or sets the node information frame.
            </summary>
            <value>The node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.SecuredNodeInformationFrame">
            <summary>
            Gets or sets the secured node information frame.
            </summary>
            <value>The secured node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.ManufacturerSpecific">
            <summary>
            Gets or sets the manufacturer specific.
            </summary>
            <value>The manufacturer specific.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value></member>
        <member name="T:ZWaveLib.ZWaveNode.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveNode.NodeUpdated">
            <summary>
            Occurs when node is updated.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode" /> class.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode" /> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode" /> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param>
            <param name="genericType">Generic type.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.GetCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Gets the command class.
            </summary>
            <returns>The command class.</returns>
            <param name="cclass">Cclass.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.SupportCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Supports the command class.
            </summary>
            <returns><c>true</c>, if command class is supported, <c>false</c> otherwise.</returns>
            <param name="commandClass">Command Class</param></member>
        <member name="M:ZWaveLib.ZWaveNode.IsSecuredCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Determines whether this instance command class specified by c is secured.
            </summary>
            <returns><c>true</c> true if is secured command class; otherwise, <c>false</c>.</returns>
            <param name="commandClass">Command Class.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.GetData(System.String,System.Object)">
            <summary>
            Gets the custom node data.
            </summary>
            <returns>The data.</returns>
            <param name="fieldId">Field identifier.</param>
            <param name="defaultValue">Default value.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.UpdateData(System.String,System.Object)">
            <summary>
            Updates the custom node data.
            </summary>
            <param name="fieldId">Field identifier.</param>
            <param name="value">Value.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.SendDataRequest(System.Byte[])">
            <summary>
            Sends the data request.
            </summary>
            <param name="request">Request.</param></member>
        <member name="T:ZWaveLib.Values.ZWaveAlarmDetailType">
            <summary>
            Enumerator for alarm value details. e.g., 0x16 corresponds with the action of
            an open door if the alarm AccessControl alarm type is set.
            </summary></member>
        <member name="T:ZWaveLib.CommandClasses.ZWaveSensorBinaryParameter">
            <summary>
            Enumerator for possible sensor binary parameters (only reported for v2)
            </summary></member>
        <member name="F:ZWaveLib.Command.SensorMultilevelReport">
            <summary>
            0x05
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceSet">
            <summary>
            0x01
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceGet">
            <summary>
            0x02
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountGet">
            <summary>
            0x04
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountReport">
            <summary>
            0x05
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceEncapsulated">
            <summary>
            0x06
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiChannelEncapsulated">
            <summary>
            0x0D
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController">
            <summary>
            Z-Wave Controller.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.ControllerStatusChangedEventHandler">
            <summary>
            Controller status changed event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.ControllerStatusChanged">
            <summary>
            Occurs when controller status changed.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.DiscoveryProgressEventHandler">
            <summary>
            Discovery progress event handler.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.HealProgressEventHandler">
            <summary>
            Heal progress event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.DiscoveryProgress">
            <summary>
            Occurs during discovery process.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.HealProgress">
            <summary>
            Occurs during heal process.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.NodeOperationProgressEventHandler">
            <summary>
            Node operation progress event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.NodeOperationProgress">
            <summary>
            Occurs when a node operation is taking place.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.NodeUpdated">
            <summary>
            Occurs when node data is updated.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController" /> class.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController" /> class.
            </summary>
            <param name="portName">The serial port name.</param></member>
        <member name="M:ZWaveLib.ZWaveController.Connect">
            <summary>
            Connect this instance.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Disconnect">
            <summary>
            Disconnect this instance.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveController.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
            <value>The name of the port.</value></member>
        <member name="P:ZWaveLib.ZWaveController.CommandDelay">
            <summary>
            Gets or sets the amount of command delay.
            </summary>
            <value>The length of the delay in ms.</value></member>
        <member name="P:ZWaveLib.ZWaveController.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value></member>
        <member name="M:ZWaveLib.ZWaveController.QueueMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Queues the message.
            </summary>
            <returns>The ZWaveMessage object itself.</returns>
            <param name="message">Message.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SendMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Sends the message without waiting other pending requests to complete.
            </summary>
            <returns>True if sending succesfull, False otherwise.</returns>
            <param name="message">Message.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SoftReset">
            <summary>
            SoftReset the controller.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.HardReset">
            <summary>
            HardReset the controller.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Initialize">
            <summary>
            Initialize the controller (get the node list).
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Discovery">
            <summary>
            Query capabilities, Supported Classes and Manufacturer Specific of each node.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.HealNetwork">
            <summary>
            Iterate through the nodes and performa a heal on each one
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeInformationFrame(System.Byte)">
            <summary>
            Gets the node information frame.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeProtocolInfo(System.Byte)">
            <summary>
            Gets the node protocol info.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNode(System.Byte)">
            <summary>
            Gets the node.
            </summary>
            <returns>The node.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="P:ZWaveLib.ZWaveController.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>The nodes.</value></member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeAdd">
            <summary>
            Begins the node add.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node add.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeAdd">
            <summary>
            Stops the node add.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node add.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeRemove">
            <summary>
            Begins the node remove.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node remove.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeRemove">
            <summary>
            Stops the node remove.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node remove.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdateOptions(System.Byte)">
            <summary>
            Requests the neighbors options update.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdate(System.Byte)">
            <summary>
            Requests the neighbors update.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNeighborsRoutingInfo(System.Byte)">
            <summary>
            Gets the neighbors routing info.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SetQueryStage(ZWaveLib.QueryStage)">
            <summary>
            Sets the query stage.
            </summary>
            <param name="stage">Stage.</param></member>
        <member name="M:ZWaveLib.ZWaveController.UpdateQueryStage(ZWaveLib.ZWaveMessage)">
            <summary>
            Updates the query stage.
            </summary>
            <param name="zm">Zm.</param></member>
        <member name="M:ZWaveLib.ZWaveController.ProcessMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Processes a ZWave message.
            </summary>
            <param name="zm">Zm.</param></member>
        <member name="M:ZWaveLib.ZWaveController.ParseSerialData(System.Byte[])">
            <summary>
            Parses the data buffer coming from the serial port.
            </summary>
            <param name="message">raw bytes data.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeUpdated(ZWaveLib.NodeUpdatedEventArgs)">
            <summary>
            Raises the node updated event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnDiscoveryProgress(ZWaveLib.DiscoveryProgressEventArgs)">
            <summary>
            Raises the discovery progress event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnHealProgress(ZWaveLib.HealProgressEventArgs)">
            <summary>
            Raises the heal progress event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeOperationProgress(ZWaveLib.NodeOperationProgressEventArgs)">
            <summary>
            Raises the node operation progress event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnControllerStatusChanged(ZWaveLib.ControllerStatusEventArgs)">
            <summary>
            Raises the controller status changed event.
            </summary>
            <param name="args">Arguments.</param></member>
    </members>
</doc>
