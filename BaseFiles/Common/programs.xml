<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;
{                  
  // set the widget "program"
  Program.AddControlWidget("homegenie/generic/program");
});
return false;</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.
Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  .IterationDelay(0.35)
  .On();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>6</Address>
    <Name>Group Lights ON</Name>
    <Description>Turn on all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <ActivationTime>2014-04-09T19:54:02.5364667Z</ActivationTime>
    <TriggerTime>2014-07-25T22:01:45.648302Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;
{                  
  // set the widget "program"
  Program.AddControlWidget("homegenie/generic/program");
});

return false;</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.

Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  .IterationDelay(0.35)
  .Off();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>7</Address>
    <Name>Group Lights OFF</Name>
    <Description>Turn off all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <ActivationTime>2014-04-09T19:53:41.739717Z</ActivationTime>
    <TriggerTime>2014-07-25T22:01:47.655689Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
	Program.AddFeature("Dimmer", "HomeGenie.LevelMemory", "Recall last light level when switched on");
	Program.AddFeature("Dimmer", "HomeGenie.LevelMemory.SimulateOnly", "Simulate only");
});
// this program will be running in background
return true;
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
	// stores the Status.MemoryLevel value for recalling last light dimmer level
	// when switched on
  	if (module.HasFeature("HomeGenie.LevelMemory") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
	{
  		var level = module.Parameter("Status.Level");
		var memory = module.Parameter("Status.MemoryLevel");
		//
        if (level.DecimalValue != level.Statistics.Last.Value)
        {
            bool justswitchedon = (level.Statistics.Last.Value == 0 &amp;&amp; level.DecimalValue &gt; 0);
          	if (justswitchedon)
            {
                // set current level to memory level if different
                if (level.DecimalValue != memory.DecimalValue &amp;&amp; memory.DecimalValue &gt; 0)
                {
                    var newlevel = (int)(memory.DecimalValue * 100);
                    Program.Notify("Level Memory", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to " + newlevel + "%");
                  	if (module.HasFeature("HomeGenie.LevelMemory.SimulateOnly"))
                    {
                      	module.Command("Control.Level.Adjust").Set(newlevel.ToString(System.Globalization.CultureInfo.InvariantCulture));
                    }
                  	else
                    {
                     	module.Level = newlevel; 
                    }
                    // returning false, prevent from routing event to other listeners                  
                    return false;
                }
            }
            if (level.DecimalValue &gt; 0) 
            {
                memory.Value = level.Value;
            } 
        }
    }
  	// returning true, will route event to other listeners
    return true; 
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory</Property>
        <Description>Recall last light level when switched on</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>HomeGenie.LevelMemory.SimulateOnly</Property>
        <Description>Simulate only</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>16</Address>
    <Name>Level Memory</Name>
    <Description>Store and recall last dimmer level when device is switched on.</Description>
    <Group>Lights</Group>
    <ActivationTime>2015-01-03T14:26:05.710605Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:11.269248Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

Program.Setup(()=&gt;{

  	Program.AddInputField("BridgeAddress", "192.168.0.?", "Philips Hue Bridge IP Address");
  	Program.AddInputField("BridgeUsername","newdeveloper", "Philips Hue Bridge API username");
  	//
  	// Create 5 virtual modules with the domain "HomeAutomation.PhilipsHue" and with address from 1 to 5
  	// "Dimmer" is the type and "GenericColorLight" is the widget to be used to display the virtual module
  	// See directory "html/pages/control/widgets/" for widget list
  	Program.AddVirtualModules("HomeAutomation.PhilipsHue", "Dimmer", "homegenie/generic/colorlight", 1, 5);
  
});

return true;
</ScriptCondition>
    <ScriptSource>Func&lt;string, string, bool&gt; bridgeapicall = (string lightnum, string jsonargs) =&gt; 
{
  	if (Program.InputField("BridgeAddress").Value == "" || Program.InputField("BridgeAddress").Value.EndsWith("?"))
    {
      	return false;
    }
	string webserviceurl = "http://" + 
  			Program.InputField("BridgeAddress").Value + "/api/" + 
  			Program.InputField("BridgeUsername").Value + "/lights/" + lightnum + "/state";
	Net.WebService(webserviceurl).Put( jsonargs ).Call();
  	return true;
};

var hueModules = Modules.InDomain("HomeAutomation.PhilipsHue");
// - http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/...
When.WebServiceCallReceived("HomeAutomation.PhilipsHue", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
    try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = hueModules.WithAddress(lightnumber).Get();
      //
      switch(command)
      {
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
        case "Control.On":
	        bridgeapicall(lightnumber, "{ \"on\" : true }");
        	Program.RaiseEvent(module, "Status.Level", "1", "Hue Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
        case "Control.Off":
    	    bridgeapicall(lightnumber, "{ \"on\" : false }");
        	Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
        	break;
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
              	bridgeapicall(lightnumber, "{ \"on\" : true }");
              	Program.RaiseEvent(module, "Status.Level", "1", "Hue Light");
            }
        	else
            {
              	bridgeapicall(lightnumber, "{ \"on\" : false }");
	        	Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
            }
        	break;
        case "Control.Level":
    	    bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
            Program.RaiseEvent(module, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "Hue Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
        	string[] values = parameter.Split(',');
        	double transition = 5;
        	if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
    	    bridgeapicall(lightnumber, "{ \"on\" : true" + 
                        ", \"hue\" : " + (int)(double.Parse(values[0], System.Globalization.CultureInfo.InvariantCulture) * 65536) + 
                        ", \"sat\" : " + (int)(double.Parse(values[1], System.Globalization.CultureInfo.InvariantCulture) * 255) + 
                        ", \"bri\" : " + (int)(double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture) * 255) + 
						", \"transitiontime\" : " + transition.ToString() +  "}");
            Program.RaiseEvent(module, "Status.Level", (double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)).ToString(), "Hue Light");
            Program.RaiseEvent(module, "Status.ColorHsb", parameter, "Hue Light");
        	break; 
        // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Alert/Long
        case "Control.Alert":
         	// eg. Modules.WithName("Light 1").Command("Control.Alert").Set(""); for a short alert Set("Long"); for a 30 second alert
          	string alertType = "select";
          	if (parameter == "Long") {alertType = "lselect";}
          	bridgeapicall(lightnumber, "{\"alert\" : \"" + alertType + "\"}");
          	break; 
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
      
    	Program.Notify("Philips Hue ERROR!", e.Message);
                       
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>26</Address>
    <Name>Philips Hue Bridge</Name>
    <Description>Adds Philips Hue lights control capability to HomeGenie. 
In order for this to work, you must register "homegenie" username
(default is "newdeveloper") with your Philips Hue Bridge first.
For instructions see: http://developers.meethue.com/gettingstarted.html .</Description>
    <Group>Devices and Things</Group>
    <ActivationTime>2014-12-03T20:12:51.356776Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:11.774315Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>//    
// this Setup delegate will be executed once, when program become active
Program.Setup(()=&gt;
{
	// list the program as custom weather widget
	Program.AddControlWidget( "weather/wunderground/conditions" );
    // set input fields parameters
    // &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
    Program.AddInputField("Location", "autoip", "City name");
    Program.AddInputField("Language", "EN", "Language");
    Program.AddInputField("ApiKey", "?", "Weather Underground Key");
    Program.AddInputField("UpdateInterval", "30", "Update interval (minutes)");
  
    // 2014-01-22 - Added to allow the user to dynamically select how to display the temperature. by lancebooth 
    Program.AddInputField("InputDisplayCelsius", "TRUE", "Display Temperature in degrees Celsius - TRUE or FALSE");
    
    // initialize widget program parameters
    Program.Parameter("Astronomy.Sunset").Value = "";
    Program.Parameter("Astronomy.Sunrise").Value = "";
    Program.Parameter("Conditions.City").Value = "";
    Program.Parameter("Conditions.TemperatureC").Value = "";
    Program.Parameter("Conditions.TemperatureF").Value = "";
    Program.Parameter("Conditions.DisplayLocation").Value = "";
    Program.Parameter("Conditions.IconUrl").Value = "";
    Program.Parameter("Conditions.Description").Value = "";    
});
//
return true; // execute "Code To Run"
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  string location = Program.InputField("Location").Value;
  string language = Program.InputField("Language").Value;
  string apikey = Program.InputField("ApiKey").Value;
 
  // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature. by lancebooth
  string display_celsius = Program.InputField("InputDisplayCelsius").Value;

  //
  if (!apikey.Contains("?"))
  {
      try
      {
        
        string webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/astronomy/lang:" + language + "/q/" + location + ".json";
        var astronomydata = Net.WebService(webserviceurl).GetData();
        
        int sunrise_hour = int.Parse(astronomydata.moon_phase.sunrise.hour.ToString());
        int sunrise_minute = int.Parse(astronomydata.moon_phase.sunrise.minute.ToString());
        int sunset_hour = int.Parse(astronomydata.moon_phase.sunset.hour.ToString());
        int sunset_minute = int.Parse(astronomydata.moon_phase.sunset.minute.ToString());
        
        Program.Parameter("Astronomy.Sunset").Value = sunset_hour.ToString("D2") + ":" + sunset_minute.ToString("D2");
        Program.Parameter("Astronomy.Sunrise").Value = sunrise_hour.ToString("D2") + ":" + sunrise_minute.ToString("D2");
        
        // Update Scheduler entries
        Scheduler
          .WithName("Sunset")
          .SetSchedule(String.Format("{0} {1} * * *", sunset_minute, sunset_hour));
        Scheduler
          .WithName("Sunrise")
          .SetSchedule(String.Format("{0} {1} * * *", sunrise_minute, sunrise_hour));
        
        webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/conditions/lang:" + language + "/q/" + location + ".json";
        var weatherdata = Net.WebService(webserviceurl).GetData();
        
        string city = weatherdata.location.city;
        string country = weatherdata.location.country;
        string country_iso3166 = weatherdata.location.country_iso3166; // eg. IT,US,NL,UK,AU,CH,DE...
        string temperaturec = weatherdata.current_observation.temp_c;
        string temperaturef = weatherdata.current_observation.temp_f;
        string display_location = weatherdata.current_observation.display_location.full;
        string weather_text = weatherdata.current_observation.weather;
        string icon = weatherdata.current_observation.icon;
        string icon_url = weatherdata.current_observation.icon_url;
        string wind_dir = weatherdata.current_observation.wind_dir;
        string wind_kph = weatherdata.current_observation.wind_kph;
        string pressure_mb = weatherdata.current_observation.pressure_mb;
        string feelslike_c = weatherdata.current_observation.feelslike_c;
        string feelslike_f = weatherdata.current_observation.feelslike_f;
        string UV = weatherdata.current_observation.UV;
        string precip_1hr_metric = weatherdata.current_observation.precip_1hr_metric;

        // 2014-01-22 - Added to allow the widget to display the date/time.
        string last_updated = DateTime.Now.ToString("g"); //, new System.Globalization.CultureInfo("en-US")
        
        Program.Parameter("Conditions.City").Value = city;
        Program.Parameter("Conditions.Country").Value = country;
        Program.Parameter("Conditions.CountryCode").Value = country_iso3166;
        Program.Parameter("Conditions.TemperatureC").Value = temperaturec;
        Program.Parameter("Conditions.TemperatureF").Value = temperaturef;
        Program.Parameter("Conditions.DisplayLocation").Value = display_location;
        Program.Parameter("Conditions.Description").Value = weather_text;
        Program.Parameter("Conditions.IconUrl").Value = icon_url;
        Program.Parameter("Conditions.Status").Value = icon; // eg. cloudy, sunny, etc..
        Program.Parameter("Conditions.WindDirection").Value = wind_dir;
        Program.Parameter("Conditions.WindKph").Value = wind_kph;
        Program.Parameter("Conditions.PressureMb").Value = pressure_mb;
        Program.Parameter("Conditions.FeelsLikeC").Value = feelslike_c;
        Program.Parameter("Conditions.FeelsLikeF").Value = feelslike_f;
        Program.Parameter("Conditions.UV").Value = UV;
        Program.Parameter("Conditions.PrecipitationHourMetric").Value = precip_1hr_metric;
        
        // 2014-01-22 - Added to allow the widget to display the date/time.
        Program.Parameter("Conditions.LastUpdated").Value = last_updated;

	    // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature.
        Program.Parameter("Conditions.DisplayCelsius").Value = display_celsius;
        
        Program.Notify("Weather Underground", "Updated.");

      } 
      catch (Exception e) 
      {
        
        Program.Notify("Weather Underground ERROR!", "Unable to get data from service.");
        //Program.Parameter("Conditions.City").Value = "ERROR: " + e.Message;
        Console.WriteLine( e.Message );
        Pause(10);
        
      }
  }
  //
  Pause(Program.InputField("UpdateInterval").DecimalValue * 60); // pause 1 hour before next check
  Pause(10);
}</ScriptSource>
    <ScriptErrors />
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>34</Address>
    <Name>Weather Underground</Name>
    <Description>Gather from http://www.wunderground.com/ service all data about sun rise/set. 
It can be used for "Sunrise/Sunset" feature. 
User must create an account at wunderground.com in order to obtain a service key.</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime>2014-04-02T15:14:59.1516283Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:12.271926Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this Setup delegate will be executed once, when program become active
Program.Setup(()=&gt;
{
	Program.AddFeature("Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleControl", "Control device on a given schedule");
	Program.AddFeatureTextInput("Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOn", "Turn On (enter scheduler expression)");
	Program.AddFeatureTextInput("Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOff", "Turn Off (enter scheduler expression)");
});
//
return true; // execute the "Program Code"
</ScriptCondition>
    <ScriptSource>var controlModules = Modules.WithFeature("HomeGenie.ScheduleControl");

while (Program.IsEnabled)
{

  controlModules.Each((module)=&gt;{
    
    var scheduleOn = module.Parameter("HomeGenie.ScheduleOn").Value;
    var scheduleOff = module.Parameter("HomeGenie.ScheduleOff").Value;
    
    if (Scheduler.IsScheduling(scheduleOn))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " ON");
      module.On();
    }
    
    if (Scheduler.IsScheduling(scheduleOff))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " OFF");
      module.Off();
    }
    
    return false;
  });

  var pause = (60 - DateTime.Now.Second);
  Pause(pause);

}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleControl</Property>
        <Description>Control device on a given schedule</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOn</Property>
        <Description>Turn On (enter scheduler expression)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOff</Property>
        <Description>Turn Off (enter scheduler expression)</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>35</Address>
    <Name>Scheduled ON/OFF</Name>
    <Description>Turn on/off a device using HG scheduler.</Description>
    <Group>Energy Management</Group>
    <ActivationTime>2015-01-19T20:06:23.934159Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:12.769636Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this Setup delegate will be executed once, when the program is enabled
Program.Setup(()=&gt;
{
  // set the widget that will display this program data (the distance).
  // the builtin 'homegenie/generic/sensor' widget, 
  // will display all parameters starting with Sensor.*
  Program.AddControlWidget("homegenie/generic/sensor");
  
  // initialize program parameters
  Program.Parameter("Sensor.Distance").Value = "";
  Program.Parameter("Sensor.StatusMessage").Value = "";

}); // end program setup
return true; // execute the 'Code to Run'</ScriptCondition>
    <ScriptSource>// example code adapted from https://github.com/raspberry-sharp/
//
var driver = GpioConnectionSettings.DefaultDriver;

Func&lt;bool&gt; readdistance = new Func&lt;bool&gt;(() =&gt; {
    var triggerPin = ConnectorPin.P1Pin03.ToProcessor();
    var echoPin = ConnectorPin.P1Pin07.ToProcessor();
    var success = false;
    
    using (var connection = new HcSr04Connection(driver.Out(triggerPin), driver.In(echoPin)))
    {
        try
        {
            var distance = connection.GetDistance() * 100;
            Program.Parameter("Sensor.Distance").Value = String.Format("{0:0.0}", distance);
            success = true;
        }
        catch (Exception e)
        {
//        Console.WriteLine(e.Message + "\n" + e.StackTrace);
            Program.Notify("HCSR04 Error", e.Message);
            Program.Parameter("Sensor.Distance").Value = "-1";
            success = false;
        }
    }
	return success;
});
  
When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// it makes program to respond to webservices calls:
//     http:///api/Components.HCSR04/0/Sensor.Distance
When.WebServiceCallReceived("Components.HCSR04/0/Sensor.Distance", ( args ) =&gt; 
{
  	var res = "ERROR";
	if (readdistance())
    {
      	res = Program.Parameter("Sensor.Distance").Value;
    }
	return "{ 'ResponseValue' : '" + res + "' }";
}); 
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>37</Address>
    <Name>HCSR04 - Ultrasonic Ranging Module</Name>
    <Description>Ultrasonic Ranging Module sensor </Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this is a background app
// so we just put initialization code here and a return true
// to activate the background task loop

// ...
Program.Setup(()=&gt;
{              
	Program.AddInputField("PollInterval", "15", "Poll Interval (seconds)");
	Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Shutter", "HomeGenie.ZWaveLevelPoll", "Poll module level");
});
//
return true; // execute "Code To Run"
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveLevelPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Basic.Get").Execute();
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.InputField("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>39</Address>
    <Name>Level Poll</Name>
    <Description>Periodically query lights and switches level.</Description>
    <Group>Z-Wave</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.
Program.Setup(()=&gt;
{
  
  // set the widget that will display this program data (the temperature,luminance).
  Program.AddControlWidget("homegenie/generic/sensor");
  
  // set a configuration parameter
  //Program.AddInputField("PollFrequency", "10", "Pause between updates (seconds)");
  
  // initialize program parameters
  Program.Parameter("Sensor.Humidity").Value = "";
  Program.Parameter("Sensor.Temperature").Value = "";
  Program.Parameter("Sensor.TemperatureF").Value = "";

  Program.AddInputField("UpdateInterval", "600", "Update Interval (seconds)");
  
  // it makes program to respond to webservices calls:
  // - http://&lt;hg_address&gt;/api/EmbeddedSystems.Raspberry/DHT11/Sensor.Temperature
  When.WebServiceCallReceived("EmbeddedSystems.Raspberry/DHT11/Sensor.Temperature", ( args ) =&gt; 
  {
    return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
  });
  // - http://&lt;hg_address&gt;/api/EmbeddedSystems.Raspberry/DHT11/Sensor.Humidity
  When.WebServiceCallReceived("EmbeddedSystems.Raspberry/DHT11/Sensor.Humidity", ( args ) =&gt; 
  {
    return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
  });
  
}); // end program setup

return true;
</ScriptCondition>
    <ScriptSource>// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Temperature", ( args ) =&gt; 
{
  	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Humidity", ( args ) =&gt; 
{
  	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

var dataPin = ConnectorPin.P1Pin16.ToProcessor();
var driver = new MemoryGpioConnectionDriver();

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

while (Program.IsEnabled)
{
	int[] data;
    driver.Allocate(dataPin, PinDirection.Output);
    driver.Write(dataPin, true);
	for(int a = 0; a &lt; 30; a++)
    {
        driver.Allocate(dataPin, PinDirection.Output);
        driver.Write(dataPin, false);
        Pause(0.018);
        //  
        driver.Allocate(dataPin, PinDirection.Input);
        //
        int i = 0, j = 0;
        int counter = 0;
        bool laststate = true;  
        data = new int[5];
        //
        // detect change and read data
        for (i=0; i &lt;= 85; i++) 
        {
          counter = 0;
          while (driver.Read(dataPin) == laststate) 
          {
            //Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);
            if (++counter == 255) 
            {
              break;
            }
          }
          laststate = driver.Read(dataPin);
      
          if (counter == 255) break;
      
          // ignore first 3 transitions
          if ((i &gt;= 4) &amp;&amp; (i%2 == 0)) 
          {
            // shove each bit into the storage bytes
            data[j/8] &lt;&lt;= 1;
            if (counter &gt; 40)
              data[j/8] |= 1;
            j++;
          }
        }
        // 
        if ((j &gt;= 40) &amp;&amp; (data[4] == ((data[0] + data[1] + data[2] + data[3]) &amp; 0xFF)) ) 
        {
            data[2] = data[2] - 3; // temperature adjustment, dunno exactly why this tuning is needed
          
          	var hum = data[0] + "." + data[1];
          	var tempc = data[2] + "." + data[3];
          	//if (hum != Program.Parameter("Sensor.Humidity").Value)
            {
              	Program.RaiseEvent("Sensor.Humidity", hum, "DHT-11 Sensor");
            }
          	//if (tempc != Program.Parameter("Sensor.Temperature").Value)
            {
                Program.RaiseEvent("Sensor.Temperature", tempc, "DHT-11 Sensor");
            }
            break;
        }
        else
        {
            //Console.WriteLine(j + ") Data not good, skip\n");
          	Pause(2);
        }
    }
    //
    //Console.WriteLine(data[0]);
    //Console.WriteLine(data[1]);
    //Console.WriteLine(data[2]);
    //Console.WriteLine(data[3]);
    //Console.WriteLine(data[4]);
  	//
  	var pause = Program.InputField("UpdateInterval").DecimalValue;
  	if (pause == 0) pause = 600; // default pause is 10 minutes
  	Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>70</Address>
    <Name>DHT-11 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-11 with data pin on GPIO#23. 
Edit program code line #13 to change the data pin GPIO.
See example video at http://homegenie.it/docs/diy/eden.php .</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>// returning true will execute the "Code to Run"
return true;
</ScriptCondition>
    <ScriptSource>var moduleDomain = "Components.MCP23017";

// This examples will add 16 modules of type "Switch"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var pinConfiguration = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Output },
  new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Output },
  new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Output },
  new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Output },
  new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Output },
  new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Output },
  new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Output },
  new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Output },
  //
  new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};
bool[] pinStatus = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnection = new Mcp23017I2cConnection(driver.Connect(0x20));
//
When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});
// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errormessage = "";
	try
	{
		string pinid = reqs[1];
      	string command = reqs[2];
        //
        var module = Modules.InDomain(moduleDomain).WithAddress(pinid).Get();
      	// modules with id from 1 to 8 are mapped as A0-A7
      	// modules with id from 9 to 16 as B0-B7
      	var pinname = "";
      	var i = int.Parse(pinid); 
      	if (i &lt;= 8) 
        {
          	pinname = "A" + (i - 1).ToString();
        }
      	else
        {
          	pinname = "B" + (i - 9).ToString();
        }      
      	//
		var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);
        switch(command)
        {
          // eg. http://hg_address/api/Expanders.MCP23017/1/Control.On
          case "Control.On":
          	deviceConnection.SetPinStatus(mcppin, true);
          	break;
          // eg. http://hg_address/api/Expanders.MCP23017/3/Control.Off
          case "Control.Off":
          	deviceConnection.SetPinStatus(mcppin, false);
          	break;
          // eg. http://hg_address/api/Expanders.MCP23017/9/Control.Toggle
          case "Control.Toggle":
          	deviceConnection.Toogle(mcppin);
          	break;
        }
        Program.RaiseEvent(module, "Status.Level", 
                           deviceConnection.GetPinStatus(mcppin) ? "1" : "0", 
                           "MCP23017 " + pinname);
        //
        return "{ 'ResponseValue' : 'OK' }";  
    } 
  	catch (Exception ex) 
    { 
	    errormessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});

// Initialize MCP23017 pins
for (int p = 0; p &lt; pinConfiguration.Count; p++)
{
	var pincfg = pinConfiguration[p];
  	// set direction and read pin status
    deviceConnection.SetDirection(pincfg.Pin, pincfg.Direction);
    pinStatus[p] = deviceConnection.GetPinStatus(pincfg.Pin);
  	// associate a virtual module with the pin
  	if (pincfg.Direction == Mcp23017PinDirection.Output)
    {
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
    }
  	else // Input 
    {
      	if (pincfg.PullUpResistor)
        {
        	deviceConnection.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
        }
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
    }
    // get the module associated to the pin and store current status
    var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  	module.Parameter("Status.Level").Value = (pinStatus[p] ? "1" : "0");
}

// status polling loop
while (Program.IsEnabled)
{
  	Pause(0.5); // 500 ms poll resolution
  	//
  	for (int p = 0; p &lt; pinConfiguration.Count; p++)
    {
      	var pincfg = pinConfiguration[p];
      	if (pincfg.Direction == Mcp23017PinDirection.Input)
        {
            bool status = deviceConnection.GetPinStatus(pincfg.Pin);
            // check if the pin status changed
            if (pinStatus[p] != status)
            {
                // get the module associated to the pin
                var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
                // raise the event and update the current pin status
                Program.RaiseEvent(module, "Status.Level", 
                               status ? "1" : "0", 
                               "MCP23017 " + pincfg.Pin.ToString());
                pinStatus[p] = status;
              	Pause(0.1);
            }
        }
    }
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>71</Address>
    <Name>MCP23017 GPIO Modules</Name>
    <Description>MCP23017 expander GPIO mapped to HG modules.
By default, pins A0-A7 are mapped as output modules (switch) and B0-B7 as input modules (sensor).
To change this configuration, edit the program source code.

For wirings see http://www.skpang.co.uk/blog/archives/454 .</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this Setup delegate will be executed once, when program become active
Program.Setup(()=&gt;
{
  
    // list the program as custom weather widget
    Program.AddControlWidget( "weather/earthtools/sundata" );
    
    // set input fields parameters
    // &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
    Program.AddInputField("Latitude", "42.50", "Location latitude");
    Program.AddInputField("Longitude", "12.50", "Location longitude");
    
    // initialize widget program parameters
    // initialize widget program parameters
    Program.Parameter("Astronomy.Sunset").Value = "";
    Program.Parameter("Astronomy.Sunrise").Value = "";
    // We also initialize the following parameters, even if unused,
    // so we can use weather/wunderground/conditions for displaying data.
    // A more generic widget should be written
    
    Program.Parameter("EarthTool.Morning.Sunrise").Value = "";
    Program.Parameter("EarthTool.Morning.Twilight.Civil").Value = "";
    Program.Parameter("EarthTool.Morning.Twilight.Nautical").Value = "";
    Program.Parameter("EarthTool.Morning.Twilight.Astronomical").Value = "";
    
    Program.Parameter("EarthTool.Evening.Sunset").Value = "";
    Program.Parameter("EarthTool.Evening.Twilight.Civil").Value = "";
    Program.Parameter("EarthTool.Evening.Twilight.Nautical").Value = "";
    Program.Parameter("EarthTool.Evening.Twilight.Astronomical").Value = "";
  
});
//
return true;
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
    var month = DateTime.Now.Month;
    var day = DateTime.Now.Day;
    //
    var latitude = Program.InputField("Latitude").Value;
    var longitude = Program.InputField("Longitude").Value;
    //
    try
    {
      
        var serviceurl = "http://www.earthtools.org/sun/" + latitude + "/" + longitude + "/" + day + "/" + month + "/99/1";
        dynamic geodata = Net.WebService(serviceurl).GetData();
        //
        Program.Parameter("Astronomy.Sunset").Value = geodata.sun.evening.sunset;
        Program.Parameter("Astronomy.Sunrise").Value = geodata.sun.morning.sunrise;
        //
        Program.Parameter("EarthTool.Morning.Sunrise").Value = geodata.sun.morning.sunrise;
        Program.Parameter("EarthTool.Morning.Twilight.Civil").Value = geodata.sun.morning.twilight.civil;
        Program.Parameter("EarthTool.Morning.Twilight.Nautical").Value = geodata.sun.morning.twilight.nautical;
        Program.Parameter("EarthTool.Morning.Twilight.Astronomical").Value = geodata.sun.morning.twilight.astronomical;
        //
        Program.Parameter("EarthTool.Evening.Sunset").Value = geodata.sun.evening.sunset;
        Program.Parameter("EarthTool.Evening.Twilight.Civil").Value = geodata.sun.evening.twilight.civil;
        Program.Parameter("EarthTool.Evening.Twilight.Nautical").Value = geodata.sun.evening.twilight.nautical;
        Program.Parameter("EarthTool.Evening.Twilight.Astronomical").Value = geodata.sun.evening.twilight.astronomical;      
        
      	Program.Notify("Earth Tools", "Updated.");
    } 
    catch (Exception ex) 
    { 
      
      	Program.Notify("Earth Tools Error!", "Unable to get data from service.");
      	Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
    
    }
    //
    Pause(24 * 60 * 60); // pause 24 hours before next check
}</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>72</Address>
    <Name>Earth Tools</Name>
    <Description>Gather from http://www.earthtools.org/ service all data about sun rise/set. 
It can be used for "Sunrise/Sunset" feature.</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime>2014-04-02T14:05:17.4724054Z</ActivationTime>
    <TriggerTime>2014-11-13T23:07:09.891287Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

  	Program.AddInputField("CellAddress", "192.168.0.?", "1. Remote HG server address");
  	Program.AddInputField("CellUsername", "", "2. Username");
  	Program.AddInputField("CellPassword", "", "3. Password");
  
});

return true;</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  	var celladdress  = Program.InputField("CellAddress").Value;
  	var cellusername = Program.InputField("CellUsername").Value;
  	var cellpassword = Program.InputField("CellPassword").Value;
  	// ROUTE IR/RF EVENT TO REMOTE HG CELL
  	if (!celladdress.Contains("?") &amp;&amp; property.Name == "Receiver.RawData")
    {
  		Net
          .WithCredentials(cellusername, cellpassword)
          .SignalModuleEvent(celladdress, module, property);
    }
  	// returning true, will route event to other listeners
	return true;  
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>73</Address>
    <Name>IR/RF remote control events forwarding</Name>
    <Description>Forwards received IR/RF remote input to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <ActivationTime>2014-04-11T18:48:52.8349695Z</ActivationTime>
    <TriggerTime>2014-04-11T18:48:52.8389698Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

  	Program.AddInputField("CellAddress", "192.168.0.?", "1. Remote HG server address");
  	Program.AddInputField("CellUsername", "", "2. Username");
  	Program.AddInputField("CellPassword", "", "3. Password");
  
});

return true;</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  	var celladdress  = Program.InputField("CellAddress").Value;
  	var cellusername = Program.InputField("CellUsername").Value;
  	var cellpassword = Program.InputField("CellPassword").Value;
  	// ROUTE IR/RF EVENT TO REMOTE HG CELL
  	if (!celladdress.Contains("?") &amp;&amp; property.Name == "Meter.Watts")
    {
  		Net
          .WithCredentials(cellusername, cellpassword)
          .SignalModuleEvent(celladdress, module, property);
    }
  	// returning true, will route event to other listeners
	return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>74</Address>
    <Name>Meter.Watts events forwarding</Name>
    <Description>Forwards received Meter.Watts report to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <ActivationTime>2014-04-11T18:48:56.637857Z</ActivationTime>
    <TriggerTime>2014-04-11T18:48:56.641858Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

  	Program.AddInputField("CellAddress", "192.168.0.?", "1. Remote HG server address");
  	Program.AddInputField("CellUsername", "", "2. Username");
  	Program.AddInputField("CellPassword", "", "3. Password");
  
});

return true;</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  	var celladdress  = Program.InputField("CellAddress").Value;
  	var cellusername = Program.InputField("CellUsername").Value;
  	var cellpassword = Program.InputField("CellPassword").Value;
  	// ROUTE METERING EVENT TO REMOTE HG CELL
  	if (!celladdress.Contains("?") &amp;&amp; property.Name == "Status.Level")
    {
  		Net
          .WithCredentials(cellusername, cellpassword)
          .SignalModuleEvent(celladdress, module, property);
    }
  	// returning true, will route event to other listeners
	return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>75</Address>
    <Name>Status.Level events forwarding</Name>
    <Description>Forwards devices' Level changes to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <ActivationTime>2014-04-11T18:49:05.3961372Z</ActivationTime>
    <TriggerTime>2014-04-11T18:49:05.3961372Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this is a background app
// so we just put initialization code here and a return true
// to activate the background task loop

// ...
Program.Setup(()=&gt;
{              
	Program.AddInputField("MaxLevel", "40", "Keep level below the following value");
	Program.AddFeature("Dimmer", "EnergyManagement.EnergySavingMode", "Energy Saving Mode enabled light");
});
//
return true; // execute "Code To Run"
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  
  	if (module.HasFeature("EnergyManagement.EnergySavingMode") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
	{
        var level = module.Parameter("Status.Level");
        var newlevel = Program.InputField("MaxLevel").DecimalValue;
        //
        if (level.DecimalValue &gt; (newlevel / 100D)) 
        {
            Program.Notify("Energy Saving Mode", module.Instance.Address + "&lt;br&gt;" + module.Instance.Name + " set to " + newlevel + "%");
            module.Level = newlevel;
            return false;
        }
    }
  	// returning true, will route event to other listeners
  	return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingMode</Property>
        <Description>Energy Saving Mode enabled light</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>82</Address>
    <Name>Energy Saving Mode</Name>
    <Description>When enabled, ensures that dimmer level is kept below a given percentage value.</Description>
    <Group>Energy Management</Group>
    <ActivationTime>2014-05-31T21:12:54.2326119Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:13.269869Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
	Program.AddFeature("HomeAutomation.X10", "Dimmer", "X10.LevelFix", "Set level to 100% when switched on");
});
// this program will be running in background
return true;
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterIsChanging( (module, property) =&gt; {

  	if (module.HasFeature("X10.LevelFix") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
	{
        var level = module.Parameter("Status.Level");
        var lastlevel = module.Parameter("Status.LastLevel");
        //
        bool justswitchedon = (level.DecimalValue &gt; 0 &amp;&amp; lastlevel.DecimalValue == 0);
        lastlevel.Value = level.Value;
        if (justswitchedon)
        {
          Program.Notify("X10 Auto Bright", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to 100%");
          module.Command("Control.Bright").Set("100");
          return false; // &lt;-- prevent ModuleParameterChanged event from being fired
        }
    }

    return true;
  
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.X10</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>X10.LevelFix</Property>
        <Description>Set level to 100% when switched on</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>84</Address>
    <Name>Set to 100% when switched on</Name>
    <Description>Brighten a light to 100% when switched on.</Description>
    <Group>X10</Group>
    <ActivationTime>2014-05-31T21:12:24.5191554Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:13.767913Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>
Program.Setup(()=&gt;{

  	Program.AddVirtualModules("Media.IpCamera", "Sensor", "homegenie/generic/camerainput", 1, 10);
    Program.AddFeatureTextInput("Media.IpCamera", "Sensor", "IpCamera.ImageURL", "Camera image API URL (see your camera docs)");
    Program.AddFeatureTextInput("Media.IpCamera", "Sensor", "IpCamera.Username", "Username (optional)");
    Program.AddFeatureTextInput("Media.IpCamera", "Sensor", "IpCamera.Password", "Password (optional)");

});

return true;
</ScriptCondition>
    <ScriptSource>var cameraModules = Modules.InDomain("Media.IpCamera");
for (int cam = 1; cam &lt; 10; cam++)
{
  	var module = cameraModules.WithAddress(cam.ToString()).Get();
  	module.Parameter("Image.URL").Value = "/api/Media.IpCamera/" + cam.ToString() + "/Camera.GetPicture/";
}

// - http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/...
When.WebServiceCallReceived("Media.IpCamera/", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
  	object data = "{ 'ResponseValue' : 'ERROR' }";
    try
    {
        string cameraaddress = reqs[1];
        string command = reqs[2];
        //string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
		var module = cameraModules.WithAddress(cameraaddress).Get();
        //
        switch(command)
        {
            // eg. http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/Camera.GetPicture
            case "Camera.GetPicture":
            data = Net
              .WebService(module.Parameter("IpCamera.ImageURL").Value)
              .WithCredentials(module.Parameter("IpCamera.Username").Value, module.Parameter("IpCamera.Password").Value)
              .GetBytes();
            break;
            case "Camera.MotionDetected":
            data = "{ 'ResponseValue' : 'OK' }";
            // blink Sensor.MotionDetect parameter
            Program.RaiseEvent(module, "Sensor.MotionDetect", "255", "Generic IP Camera");
            Pause(1);
            Program.RaiseEvent(module, "Sensor.MotionDetect", "0", "Generic IP Camera");
            break;
        }
    } catch (Exception e) { 
      
    	Program.Notify("IpCamera ERROR!", e.Message);
                       
    }
    return data;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>88</Address>
    <Name>Generic IP Camera</Name>
    <Description>Generic IP Camera driver.</Description>
    <Group>Devices and Things</Group>
    <ActivationTime>2014-03-31T23:25:16.9471521Z</ActivationTime>
    <TriggerTime>2014-04-02T14:04:04.6857473Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
  
  	Program.AddControlWidget("homegenie/generic/securitysystem");
  
	Program.AddFeature("Sensor,DoorWindow", "HomeGenie.SecuritySensor", "Use as Security Sensor");
	Program.AddFeature("Siren,Light,Dimmer,Switch", "HomeGenie.SecurityAlarm", "Use as Security Alarm");
  	//
    Program.AddInputField("System.ArmDelay", "10", "1. Arm Delay (seconds)");
    Program.AddInputField("System.SirenMaxTime", "30", "2. Sirens Max Time (seconds, 0=infinite)");
  
    Program.AddInputField("Email.Recipients", "", "3. Comma separated list of recipients e-mails for alarm notifications");  
  
    Program.AddInputField("Trigger.ArmedProgram", "", "4. Program to run when armed");  
    Program.AddInputField("Trigger.DisarmedProgram", "", "5. Program to run when disarmed");  
    Program.AddInputField("Trigger.TriggeredProgram", "", "6. Program to run when triggered");  
  
});
// this program will be running in background
return true;</ScriptCondition>
    <ScriptSource>//
// init program parameters
//
Program.RaiseEvent("HomeGenie.SecurityArmed", "0", "Security System");
Program.Parameter("HomeGenie.SecurityTriggered").Value = "0";
Program.Parameter("Status.Level").Value = "0";
//
Func&lt;bool&gt; _armdisarm = new Func&lt;bool&gt;(()=&gt;{
  	Program.RunAsyncTask(()=&gt;
	{
        if (Program.Parameter("Status.Level").Value == "0")
        {
          	// disarming
          	Program.Parameter("HomeGenie.SecurityTriggered").Value = "0";
        }
      	else
        {
          	// arming
        	Pause( Program.InputField("System.ArmDelay").DecimalValue );
        }
        Program.RaiseEvent("HomeGenie.SecurityArmed", Program.Parameter("Status.Level").Value, "Security System");
      	// run armed/disarmed program
      	if (Program.Parameter("Status.Level").Value != "0")
        {
          	var armedProgram = Program.InputField("Trigger.ArmedProgram").Value;
          	if (armedProgram != "")
            {
              	Program.Run(armedProgram);
            }
        }
      	else
        {
          	var disarmedProgram = Program.InputField("Trigger.DisarmedProgram").Value;
          	if (disarmedProgram != "")
            {
              	Program.Run(disarmedProgram);
            }
        }
    });
  	return true;
});
//
// module events handling
//
When.ModuleParameterChanged((module, parameter)=&gt;
{
  	if (Program.Parameter("HomeGenie.SecurityArmed").Value == "1")
    {
        if (module.HasFeature("HomeGenie.SecuritySensor") 
            &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value != "1"
            &amp;&amp; (   parameter.Name == "Status.Level"
              	|| parameter.Name == "Sensor.Generic"
                || parameter.Name == "Sensor.Tamper" 
                || parameter.Name == "Sensor.MotionDetect" 
				|| parameter.Name == "Sensor.DoorWindow"
                || parameter.Name == "Sensor.Flood" 
                || parameter.Name == "Sensor.Smoke" 
                || parameter.Name == "Sensor.Heat" 
                || parameter.Name == "Sensor.CarbonMonoxide" 
                || parameter.Name == "Sensor.CarbonDioxide" ) 
            &amp;&amp; parameter.DecimalValue &gt; 0)
        {
            Program.RaiseEvent("HomeGenie.SecurityTriggered", "1", "Security System");
			Program.Parameter("HomeGenie.SecurityTriggerSource").Value = 
              	module.Instance.Name + " " + parameter.Name + " (" +
              	module.Instance.Domain + "." +
              	module.Instance.Address + ")";

            var triggeredProgram = Program.InputField("Trigger.TriggeredProgram").Value;
          	if (triggeredProgram != "")
            {
              	Program.Run(triggeredProgram);
            }
          
  			return false;
        }
    }
  	return true;
});
//
// web service calls handling
//
When.WebServiceCallReceived("HomeAutomation.HomeGenie.Automation", (args) =&gt; //"HomeGenie.SecuritySystem", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    var res = "";
    
    try
    {
      string command = reqs[2];
      string pid = reqs[1];
      if (pid == Program.Module.Address)
      {

        switch(command)
        {
          case "Control.On":
			Program.RaiseEvent("Status.Level", "1", "Security System");
          	_armdisarm();
            res = "{ 'ResponseValue' : 'ARMED' }";
            break;
          case "Control.Off":
			Program.RaiseEvent("Status.Level", "0", "Security System");
          	_armdisarm();
            res = "{ 'ResponseValue' : 'DISARMED' }";
            break;
        }

      }
    } 
    catch (Exception ex) 
    { 
      res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
    }
    // unable to process request
    return res;

});
//
// main program loop
//
var sirenModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Siren");
var alarmModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Dimmer,Switch,Light");
while (Program.IsEnabled)
{
  	if (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
    {
        sirenModules.On();
      	//
      	var alarmstart = DateTime.Now;
      	//
      	// send email
      	//
      	var subject = "HomeGenie Security System Alarmed";
      	var messagetext = "Security System Alarm triggered by " + Program.Parameter("HomeGenie.SecurityTriggerSource").Value;
      	var recipients = Program.InputField("Email.Recipients").Value;
      	if (recipients != "")
        {
          	Program.RunAsyncTask(()=&gt;{
      			Net.SendMessage(recipients, subject, messagetext);
            });
        }
        //
      	var sirenstopped = false;
        while (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
        {
            // flashing SecurityAlarm lights 
            alarmModules.Toggle();
            Pause(1);
            alarmModules.Toggle();
            Pause(1);
          	//
          	var elapsed = new TimeSpan(DateTime.Now.Ticks - alarmstart.Ticks);
          	if (!sirenstopped &amp;&amp; Program.InputField("System.SirenMaxTime").DecimalValue &gt; 0 &amp;&amp; elapsed.TotalSeconds &gt; Program.InputField("System.SirenMaxTime").DecimalValue)
            {
				sirenModules.Off();
              	sirenstopped = true;
            }
        }
	  	//Pause(1);
        alarmModules.Off();
        sirenModules.Off();
    }
  	Pause(1);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow</ForTypes>
        <Property>HomeGenie.SecuritySensor</Property>
        <Description>Use as Security Sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Siren,Light,Dimmer,Switch</ForTypes>
        <Property>HomeGenie.SecurityAlarm</Property>
        <Description>Use as Security Alarm</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>90</Address>
    <Name>Security Alarm System</Name>
    <Description>Basic Security Alarm System</Description>
    <Group>Security</Group>
    <ActivationTime>2014-04-19T10:21:23.6096933Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:14.274397Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

return true;
</ScriptCondition>
    <ScriptSource>When.ModuleParameterChanged((module, parameter) =&gt; {

  	if (parameter.Name == "ZWaveNode.WakeUpNotify")
    {     
      	var nodeinfo = module.Parameter("ZWaveNode.NodeInfo");
      	if (nodeinfo != null)
        {
          	// nif contains all command classes supported by this module
          	string nif = " " + nodeinfo.Value + " ";
          	if (nif.Contains(" 84 ") || nif.Contains(" 25 ") || nif.Contains(" 26 "))
            {
                if (nif.Contains(" 60 ")) // MultiInstance
                {
                    Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " MultiInstance Get");
                    // query first 4 instances
                    for (int instance = 1; instance &lt; 4; instance ++)
                    {
                        if (nif.Contains(" 30 ")) // Sensor Binary
                        {
                            module.Command("MultiInstance.Get").Execute("Sensor.Binary/" + instance);
                        }
                        else if (nif.Contains(" 31 ")) // Sensor MultiLevel
                        {
                            module.Command("MultiInstance.Get").Execute("Sensor.MultiLevel/" + instance);
                        }
                        else if (nif.Contains(" 25 ")) // Switch Binary
                        {
                            module.Command("MultiInstance.Get").Execute("Switch.Binary/" + instance);
                        }
                        else if (nif.Contains(" 26 ")) // Switch MultiLevel
                        {
                            module.Command("MultiInstance.Get").Execute("Switch.MultiLevel/" + instance);
                        }
                        //Pause(.5);
                    }
                }
                //
                // query battery level
                if (nif.Contains(" 80 ")) // Battery
                {
                    Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Battery Get");
                    module.Command("Battery.Get").Execute();
                    //Pause(.5);
                }
                //
                Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
                module.Command("Basic.Get").Execute();
                Pause(1);
            }
        }
    }

  	return true; // continue processing event
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>91</Address>
    <Name>Query on Wake Up</Name>
    <Description>Query sensors' data and battery level when a node wakes up.</Description>
    <Group>Z-Wave</Group>
    <ActivationTime>2014-12-11T15:27:59.391434Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:14.770297Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

    Program.AddFeatureTextInput("Switch,Light,Dimmer", "HomeGenie.TurnOffDelay", "Automatic turn off delay (seconds)");

});

return true;
</ScriptCondition>
    <ScriptSource>When.ModuleParameterIsChanging((module, parameter) =&gt; {
    // check if the module has just been turned on
	if (module.HasFeature("HomeGenie.TurnOffDelay") &amp;&amp; module.Parameter("HomeGenie.TurnOffDelay").DecimalValue &gt; 0)
    {
      	if (parameter.Name == "Status.Level")
        {
            var level = module.Parameter("Status.Level");
            var lastlevel = module.Parameter("Status.LastLevel");
            var turnonticks = level.UpdateTime.Ticks;
            //
          	lock(this)
            if (level.DecimalValue != lastlevel.DecimalValue)
            {
                bool justswitchedon = (lastlevel.DecimalValue == 0 &amp;&amp; level.DecimalValue &gt; 0);
                if (justswitchedon)
                {
                    var pausedelay = module.Parameter("HomeGenie.TurnOffDelay").DecimalValue;
                    var targetmodule = module;
                    Program.RunAsyncTask(()=&gt;{
                        Pause(pausedelay);
                      	// ensures that no manual action has been taken on the module in the meantime
                      	if (turnonticks == level.UpdateTime.Ticks)
                        {
                        	Program.Notify("Turn Off Delay", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " switched off.");
                        	targetmodule.Off();
                        }
                    });
                }
            }
        }
      
    }
    return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.TurnOffDelay</Property>
        <Description>Automatic turn off delay (seconds)</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>112</Address>
    <Name>Turn Off Delay</Name>
    <Description>When device is turned on, automatically turn it off after a given delay.</Description>
    <Group>Energy Management</Group>
    <ActivationTime>2014-03-31T23:25:16.9471521Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:15.27524Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

Program.Setup(()=&gt;{
	Program.AddVirtualModules("HomeAutomation.X10.SC9000", "Sensor", "homegenie/generic/sensor", 1, 16);
    Modules.InDomain("HomeAutomation.X10.SC9000").Each((m)=&gt;{
      m.Parameter("X10Security.Address").Value = "";
      return false;
    });
});

return true;
</ScriptCondition>
    <ScriptSource>// X10 RF Security protocol specifications from
// https://sourceforge.net/apps/mediawiki/mochad/index.php?title=X10_RF_Security_Extended_Address

var RF_SECURITY = "5D 29";

var security_events = new Dictionary&lt;string, string&gt;() {
    { "0C", "Motion_alert_MS10A" },
    { "8C", "Motion_normal_MS10A" },
    { "0D", "Motion_alert_low_MS10A" },     /* MS10 does not emit this */
    { "8D", "Motion_normal_low_MS10A" },    /* MS10 does not emit this */
    { "4C", "Motion_normal_min_tamper_MS90" },    /* MS10 does not emit this */
    { "04", "Contact_alert_min_DS10A" },
    { "84", "Contact_normal_min_DS10A" },
    { "44", "Contact_alert_min_tamper_DS12A" },
    { "C4", "Contact_normal_min_tamper_DS12A" },
    { "00", "Contact_alert_max_DS10A" },
    { "80", "Contact_normal_max_DS10A" },
    { "40", "Contact_alert_max_tamper_DS12A" },
    { "C0", "Contact_normal_max_tamper_DS12A" },
    { "01", "Contact_alert_min_low_DS10A" },    /* _low = low battery */
    { "81", "Contact_normal_min_low_DS10A" },
    { "05", "Contact_alert_max_low_DS10A" },
    { "85", "Contact_normal_max_low_DS10A" },
    { "06", "Arm_KR10A" },
    { "86", "Disarm_KR10A" },
    { "46", "Lights_On_KR10A" },
    { "C6", "Lights_Off_KR10A" },
    { "26", "Panic_KR10A" },
    { "03", "Panic_KR15A" }                   /* Big red button */
};

var sc9000Modules = Modules.InDomain("HomeAutomation.X10.SC9000");
// We want to do further processing whenever a module prop changes 
When.ModuleParameterChanged( (module, property) =&gt; {
	
  	if (property.Name == "Receiver.RawData" &amp;&amp; property.Value.StartsWith(RF_SECURITY))
    {
      	/*
       	// 5D 29 B9 B6 04 FB B5 00
      	*        |  |  |  |  |  |
        *        |  |  |  |  |  check (0x80 || 0x00)
        *        |  |  |  |  addr2
        *        |  |  |  XOR with prev byte=0xff
        *        |  |  function/key
        *        |  XOR with prev byte==0x0f
        *        addr1
        */
      	var address1 = property.Value.Substring(6, 2);
      	//var address2 = property.Value.Substring(18, 2);
      	//var address3 = property.Value.Substring(21, 2);
      	//
      	var address  = address1; // + ":" + address2; // + ":" + address3;
      	var function = property.Value.Substring(12, 2);
      	//
      	var fnvalue = "";
      	if (security_events.ContainsKey(function))
        {
          	fnvalue = security_events[function];
        }
      
      	var binaddress = Convert
                          .ToString(int.Parse(address, System.Globalization.NumberStyles.HexNumber), 2)
                          .PadLeft(8, '0')
                          .Substring(4, 3)
          				  .ToCharArray();
      	Array.Reverse(binaddress);
      	var straddress = new string(binaddress);
//Program.Notify("X10 RF debug", "a=" + straddress.ToString() + " fn=" + function + "\n" + fnvalue);      
      
      	address = Convert.ToInt32(straddress, 2).ToString();
		module = sc9000Modules.WithAddress(address).Get();

      	if (fnvalue.StartsWith("Motion_alert"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/sensor";
          	Program.RaiseEvent(module, "Sensor.MotionDetect", "1", "X10 Motion Sensor");
        }
      	else if (fnvalue.StartsWith("Motion_normal_min_tamper"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/sensor";
          	Program.RaiseEvent(module, "Sensor.Tamper", "1", "X10 Motion Sensor");
        }
      	else if (fnvalue.StartsWith("Motion_normal"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/sensor";
          	Program.RaiseEvent(module, "Sensor.MotionDetect", "0", "X10 Motion Sensor");
          	Program.RaiseEvent(module, "Sensor.Tamper", "0", "X10 Motion Sensor");
        }
      	else if (fnvalue.StartsWith("Contact_alert"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/doorwindow";
          	Program.RaiseEvent(module, "Sensor.DoorWindow", "1", "X10 DoorWindow Sensor");
        }
      	else if (fnvalue.StartsWith("Contact_normal_min_tamper"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/doorwindow";
          	Program.RaiseEvent(module, "Sensor.Tamper", "1", "X10 DoorWindow Sensor");
        }
      	else if (fnvalue.StartsWith("Contact_normal"))
        {
          	module.Parameter("Widget.DisplayModule").Value = "homegenie/generic/doorwindow";
          	Program.RaiseEvent(module, "Sensor.DoorWindow", "0", "X10 DoorWindow Sensor");
          	Program.RaiseEvent(module, "Sensor.Tamper", "0", "X10 DoorWindow Sensor");
        }
      
//Program.Notify("Security Module", module.Instance.Address + " " + fnvalue);
      
      	switch (property.Value.Substring(0, 5))
        {
          	case ".,,,":
      		break;
      		case "kikk":
      		break;
    	}
    }
  
    return true;
  
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>122</Address>
    <Name>SC9000 RF Vitual Modules</Name>
    <Description>SC9000 Security Console driver</Description>
    <Group>X10</Group>
    <ActivationTime>2014-03-31T23:25:16.9471521Z</ActivationTime>
    <TriggerTime>2014-04-02T14:04:08.6876241Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

return false;
</ScriptCondition>
    <ScriptSource>var portname = "/dev/ttyUSB0";

  
Action&lt;string&gt; 
HandleStringReceived = (string message) =&gt; {
  
  	// this will be called every time a message is received from serial port
	Program.Notify("SerialPort String", message);
  
};

Action&lt;byte[]&gt; 
HandleMessageReceived = (byte[] message) =&gt; {
  
  	// this will be called every time a message is received from serial port
	Program.Notify("SerialPort Bytes", BitConverter.ToString(message));
  
};

Action&lt;bool&gt;
HandleStatusChanged = (bool connected) =&gt; {
  	
  	// this will be called every time the connection status changes
  	Program.Notify("SerialPort Status", connected ? "CONNECTED!" : "DISCONNECTED!");
  
};

// open the serial port channel and register handlers
SerialPort
  	.WithName( portname )
  	.OnStatusChanged( HandleStatusChanged )
  	.OnMessageReceived( HandleMessageReceived )
  	.OnStringReceived( HandleStringReceived )
  	.Connect( 9600 ); // change baud rate if needed

while (Program.IsEnabled)
{
  // send a test message through serial port every 10 seconds
  //
  byte[] message = { 0x00, 0x00, 0x00, 0x00, 0x00 };
  SerialPort.SendMessage(message);
  //
  Pause(5);
  SerialPort.SendMessage("Hello Things!");
  //
  Pause(10);
}

</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>132</Address>
    <Name>Serial Port I/O Test</Name>
    <Description>Example of using SerialPort helper class for communicating with serial devices.</Description>
    <Group>Devices and Things</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {

    Program.AddInputField("Email.Sender", "", "1. E-Mail address");
    Program.AddInputField("Email.SmtpServer", "", "2. SMTP Mail Server address");
  	Program.AddInputField("Email.SmtpUserName", "", "3. SMTP username (optional)");
    Program.AddInputField("Email.SmtpPassword", "", "4. SMTP password (optional)");
    Program.AddInputField("Email.SmtpPort", "25", "5. SMTP Mail Server port");
    Program.AddInputField("Email.SmtpUseSsl", "FALSE", "6. SMTP Mail Server use SSL (TRUE or FALSE)");
  
});

return true;</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  
  if (Program.InputField("Email.Sender").Value != Settings.Parameter("Messaging.Email.Sender").Value)
    Settings.Parameter("Messaging.Email.Sender").Value = Program.InputField("Email.Sender").Value;
  if (Program.InputField("Email.SmtpServer").Value != Settings.Parameter("Messaging.Email.SmtpServer").Value)
    Settings.Parameter("Messaging.Email.SmtpServer").Value = Program.InputField("Email.SmtpServer").Value;
  if (Program.InputField("Email.SmtpPort").Value != Settings.Parameter("Messaging.Email.SmtpPort").Value)
    Settings.Parameter("Messaging.Email.SmtpPort").Value = Program.InputField("Email.SmtpPort").Value;
  if (Program.InputField("Email.SmtpUseSsl").Value != Settings.Parameter("Messaging.Email.SmtpUseSsl").Value)
    Settings.Parameter("Messaging.Email.SmtpUseSsl").Value = Program.InputField("Email.SmtpUseSsl").Value;
  if (Program.InputField("Email.SmtpUserName").Value != Settings.Parameter("Messaging.Email.SmtpUserName").Value)
    Settings.Parameter("Messaging.Email.SmtpUserName").Value = Program.InputField("Email.SmtpUserName").Value;
  if (Program.InputField("Email.SmtpPassword").Value != Settings.Parameter("Messaging.Email.SmtpPassword").Value)
    Settings.Parameter("Messaging.Email.SmtpPassword").Value = Program.InputField("Email.SmtpPassword").Value;

  Pause(10);
  
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>142</Address>
    <Name>E-Mail Account</Name>
    <Description>Store e-mail account information for sending/receiving emails.</Description>
    <Group>Messaging and Social</Group>
    <ActivationTime>2015-01-01T15:39:58.861219Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:15.771944Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
	Program.AddFeatureTextInput("Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", "PushingBox.DeviceId", "PushingBox Notifications DeviceID");
});
// this program will be running in background
return true;
</ScriptCondition>
    <ScriptSource>var serviceurl = "http://api.pushingbox.com/pushingbox";

// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  
  	if (module.HasFeature("PushingBox.DeviceId") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
	{
      	var serviceparams = "?devid=" + module.Parameter("PushingBox.DeviceId").Value;
      	//
      	serviceparams += "&amp;module=" + module.Instance.Name;
      	serviceparams += "&amp;parameter=" + property.Name;
      	serviceparams += "&amp;value=" + property.Value;
      	//
      	Net.WebService(serviceurl + serviceparams).Call();
    }

  	// returning true, will route event to other listeners
    return true; 
  
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>143</Address>
    <Name>Pushing Box</Name>
    <Description>http://www.pushingbox.com/ integration</Description>
    <Group>Messaging and Social</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  
  	Program.AddInputField("StartTime", "", "1. Start 'Presence' program at time:");
  	Program.AddInputField("EndTime", "", "2. Stop 'Presence' program at time:");
  	Program.AddInputField("ProgramToRun", "", "3. Enter the Name or ID of the program to run:");
  	Program.AddInputField("Pause", "30", "4. Pause between each run (seconds):");
  
});

if (Program.InputField("StartTime").Value != "" 
    &amp;&amp; Program.InputField("EndTime").Value != ""
   	&amp;&amp; Program.InputField("ProgramToRun").Value != "")
{
    try
    {
      
        var time_now = DateTime.Now; //String.Format("{H:mm:ss}", DateTime.Now);DateTime.ParseExact("124510", "hhmmss", CultureInfo.InvariantCulture);
    
        var time_start = DateTime.ParseExact(Program.InputField("StartTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);
        var time_end = DateTime.ParseExact(Program.InputField("EndTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);
        
        var duration = new TimeSpan(time_end.Ticks - time_start.Ticks).TotalMinutes;
        var distance = new TimeSpan(time_now.Ticks - time_start.Ticks).TotalMinutes;
    
        if (distance &gt; 0 &amp;&amp; distance &lt; duration &amp;&amp; Program.InputField("ProgramToRun").Value != "")
        {
            // execute the program
            return true;
        }
        
    }
    catch (Exception ex) 
    { 
        Program.Notify("Presence Simulator", Program.InputField("StartTime").Value + "&lt;br&gt;ERROR:" + ex.Message);
    }
}

Pause(30);

return false;</ScriptCondition>
    <ScriptSource>var programtorun = Program.InputField("ProgramToRun").Value;
var pause = Program.InputField("Pause").DecimalValue;
if (pause &lt; 1) pause = 1;
//
Program.Notify( "Presence Simulator", "Running 'Presence' program:&lt;br&gt;" + programtorun );
// this is a blocking call and it will wait for the program to end
//
try
{
	Program.Run( programtorun ); 
}
catch (Exception e)
{
	Program.Notify("Presence Simulator", "ERROR running program:&lt;br&gt;" + e.Message);
}
//
//
Pause( pause ); 

</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>144</Address>
    <Name>Presence Simulator</Name>
    <Description>Simulate presence in the house by looping a program during a given interval time.
The program to run can  be a pre-recorded Wizard Script (http://generoso.info/homegenie/scenarios.html).</Description>
    <Group>Security</Group>
    <ActivationTime>2014-04-11T18:50:17.2553666Z</ActivationTime>
    <TriggerTime>2013-12-21T20:24:34.858981Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
  
//	Program.AddFeature("Siren,Light,Dimmer,Switch", "HomeGenie.SecurityAlarm", "Security Alarm");
  	//
    Program.AddInputField("PingMe.Address1", "", "IP address to ping #1");
    Program.AddInputField("PingMe.Address2", "", "IP address to ping #2");
    Program.AddInputField("PingMe.Address3", "", "IP address to ping #3");
  	//
  	Program.Parameter("PingMe.AtHome").Value = "1";
});
// this program will be running in background
return true;</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  
  	Pause(10);
  
  	var isarmed = (Program.WithName("Security Alarm System").Parameter("HomeGenie.SecurityArmed").Value == "1");
  	//
  	if (!isarmed) 
    {
      	Pause(50);
      	continue;
    }
  	//
    int pinging_buddies = 0;
    if (Program.InputField("PingMe.Address1").Value != "" &amp;&amp; Net.Ping(Program.InputField("PingMe.Address1").Value))
    {
          pinging_buddies++;
    }
    if (Program.InputField("PingMe.Address2").Value != "" &amp;&amp; Net.Ping(Program.InputField("PingMe.Address2").Value))
    {
          pinging_buddies++;
    }
    if (Program.InputField("PingMe.Address3").Value != "" &amp;&amp; Net.Ping(Program.InputField("PingMe.Address3").Value))
    {
          pinging_buddies++;
    }
    //
    if (pinging_buddies &gt; 0 &amp;&amp; Program.Parameter("PingMe.AtHome").Value != "1")
    {
        Program.RaiseEvent("PingMe.AtHome", "1", "Ping Me At Home");      
    }
    else if (pinging_buddies == 0 &amp;&amp; Program.Parameter("PingMe.AtHome").Value != "0")
    {
        Program.RaiseEvent("PingMe.AtHome", "0", "Ping Me At Home");
    }
  
}</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>154</Address>
    <Name>Ping Me at Home</Name>
    <Description>If security system is armed, pings your mobile device to determine
when you're getting close to home.
The program exposes the parameter &lt;b&gt;PingMe.AtHome&lt;/b&gt;
that can be used both in Wizard Scripts or C# APPs to
trigger actions when you get home.</Description>
    <Group>Security</Group>
    <ActivationTime>2014-04-11T18:50:30.519552Z</ActivationTime>
    <TriggerTime>2014-04-11T18:50:30.5245526Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
	Program.AddVirtualModules("Favourites.Link", "Generic", "homegenie/generic/link", 1, 5);
    Program.AddFeatureTextInput("Favourites.Link", "Generic", "FavouritesLink.Url", "Favourites link");
});

return false;</ScriptCondition>
    <ScriptSource />
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Favourites.Link</ForDomains>
        <ForTypes>Generic</ForTypes>
        <Property>FavouritesLink.Url</Property>
        <Description>Favourites link</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>180</Address>
    <Name>Favourites Links</Name>
    <Description>Add 5 virtual modules with customizable url link.
These can be added to  groups and are then
shown as hyperlink buttons in the control page.</Description>
    <Group>Devices and Things</Group>
    <ActivationTime>2014-07-25T22:02:17.939326Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
	Program.AddFeature("Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", 
                       "MobileNotification.SendChanges", 
                       "Push notifications to Windows Phone client");
});
// this program will be running in background
return true;
</ScriptCondition>
    <ScriptSource>string notificationurl = "";
var monitor = Program.WithName("Energy Monitor");

Func&lt;bool&gt; updateTileData = ()=&gt;{
  
  	var devs = monitor.Parameter("EnergyMonitor.OperatingDevices").DecimalValue;
    // Create the Tile message.
    string tileMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
        "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
        "&lt;wp:Tile&gt;" +
        "&lt;wp:Count&gt;0&lt;/wp:Count&gt;" +
        //          "&lt;wp:BackgroundImage&gt;&lt;/wp:BackgroundImage&gt;" +
        //          "&lt;wp:Count&gt;" + (notificationcount++).ToString() + "&lt;/wp:Count&gt;" +
        //          "&lt;wp:Title&gt;HomeGenie Beta&lt;/wp:Title&gt;" +
        "&lt;wp:BackBackgroundImage&gt;&lt;/wp:BackBackgroundImage&gt;" +
		"&lt;wp:BackTitle&gt;Counter " + monitor.Parameter("EnergyMonitor.KwCounter").Value + " Kw&lt;/wp:BackTitle&gt;";
    if (devs &gt; 0)
    {
        tileMessage += "&lt;wp:BackContent&gt;" + devs + " device" + (devs &gt; 1 ? "s" : "") +
          	"\nLoad\n" + monitor.Parameter("EnergyMonitor.KwLoad").Value + " Kw&lt;/wp:BackContent&gt;";
    }
  	else
    {
        tileMessage += "&lt;wp:BackContent&gt;&lt;/wp:BackContent&gt;";
    }
    tileMessage += "&lt;/wp:Tile&gt; " + "&lt;/wp:Notification&gt;";
      
  	//var response = 
    Net.WebService(notificationurl)
        .AddHeader("Content-type", "text/xml")
        .AddHeader("X-WindowsPhone-Target", "token")
        .AddHeader("X-NotificationClass", "1")
        .Post(tileMessage)
        .Call();
  
  	return true;
  
};

When.WebServiceCallReceived("HomeAutomaion.HomeGenie/Messaging", ( args ) =&gt; 
{
  	var notificationdata = ((string)args).Substring(("HomeAutomaion.HomeGenie/Messaging/WindowsPhone.RegisterNotificationUrl/").Length);
  	//var deviceid = notificationdata.Substring(0, notificationdata.IndexOf('/'));
  	notificationurl = notificationdata.Substring(notificationdata.IndexOf('/') + 1);
  	//
  	if (notificationurl != "") updateTileData();
  	//
    return "{ 'ResponseValue' : 'OK' }";
});

When.ModuleParameterChanged( (module, property) =&gt; {

  	if (notificationurl != "" &amp;&amp; module.HasFeature("MobileNotification.SendChanges") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
	{
      	if (property.DecimalValue != property.Statistics.Last.Value) // TODO: check time from lastvalue as well to prevent flooding
        {
            var pname = property.Name;
            if (pname.IndexOf('.') &gt; 0)
            {
                  pname = pname.Substring(pname.IndexOf('.') + 1);
            }
            // Create the Tile message.
            string toastMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
                    "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
                       "&lt;wp:Toast&gt;" +
                            "&lt;wp:Text1&gt;" + module.Instance.Name + "&lt;/wp:Text1&gt;" +
                            "&lt;wp:Text2&gt;" + pname + " = " + property.Value + "&lt;/wp:Text2&gt;" +
                            "&lt;wp:Param&gt;/GroupsPage.xaml?NavigatedFrom=Toast Notification&lt;/wp:Param&gt;" +
                       "&lt;/wp:Toast&gt; " +
                    "&lt;/wp:Notification&gt;";
          
            //var response = 
            Net.WebService(notificationurl)
              .AddHeader("Content-type", "text/xml")
              .AddHeader("X-WindowsPhone-Target", "toast")
              .AddHeader("X-NotificationClass", "2")
              .Post(toastMessage)
              .Call();
        }
      
    }

  	// returning true, will route event to other listeners
    return true; 
  
});

while(Program.IsEnabled)
{
	if (notificationurl != "")
    {
		updateTileData();
        Pause(300);
    }
  	Pause(5);
}


Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow</ForTypes>
        <Property>MobileNotification.SendChanges</Property>
        <Description>Push notifications to Windows Phone client</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>200</Address>
    <Name>Windows Phone Push Notification Service</Name>
    <Description>Windows Phone push notification service. 
It sends toast and tile updates to Windows Phone client.
Currently limited to one client channel.</Description>
    <Group>Messaging and Social</Group>
    <ActivationTime>2015-01-03T14:27:09.400073Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:16.775939Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
	Program.AddVirtualModule("HomeAutomation.EnergyMonitor", "1", "Sensor", "homegenie/generic/energymonitor");
});
return true;
</ScriptCondition>
    <ScriptSource>var energyMonitor = Modules.InDomain("HomeAutomation.EnergyMonitor").WithAddress("1").Get();
var kwCounter = energyMonitor.Parameter("EnergyMonitor.KwCounter");
var kwLoad = energyMonitor.Parameter("EnergyMonitor.KwLoad");
var wattCounter = energyMonitor.Parameter("EnergyMonitor.WattCounter");
var wattLoad = energyMonitor.Parameter("EnergyMonitor.WattLoad");
var operatingDevices = energyMonitor.Parameter("EnergyMonitor.OperatingDevices");
var operatingLights = energyMonitor.Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = energyMonitor.Parameter("EnergyMonitor.OperatingSwitches");

// initialize
energyMonitor.Instance.Name = "Energy Monitor";
kwCounter.Value = "0";
kwLoad.Value = "0";
wattCounter.Value = "0";
wattLoad.Value = "0";
operatingDevices.Value = "0";
operatingLights.Value = "0";
operatingSwitches.Value = "0";

// select all modules supporting metering
var meterModules = Modules.WithParameter("Meter.Watts");
var notifyTicks = 5; // minutes

var UpdateEnergyLoad = new Func&lt;bool&gt;(()=&gt;{
  var totalLoad = 0d;
  int devcount = 0, lightcount = 0, switchcount = 0;
  meterModules.Each((mod)=&gt;{
    if (mod.Parameter("Meter.Watts").DecimalValue &gt; 0)
    {
      totalLoad += mod.Parameter("Meter.Watts").DecimalValue;
      if (mod.IsOfDeviceType("Light") || mod.IsOfDeviceType("Dimmer"))
      {
        lightcount++;
      }
      else
      {
        switchcount++;  
      }
      devcount++;
    }
    return false;
  });
  Program.RaiseEvent(energyMonitor, kwLoad.Name, (totalLoad / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, wattLoad.Name, totalLoad.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingDevices.Name, devcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingLights.Name, lightcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingSwitches.Name, switchcount.ToString("0"), "Energy Monitor");
  return true;
});

When.WebServiceCallReceived("HomeAutomation.EnergyMonitor", (args)=&gt;{
  dynamic response = new System.Dynamic.ExpandoObject();
  response.KiloWattLoad = kwLoad.Value;
  response.KiloWattCouter = kwCounter.Value;
  response.WattCounter = wattCounter.Value;
  response.WattLoad = wattLoad.Value;
  response.OperatingDevices = operatingDevices.Value;
  response.OperatingLights = operatingLights.Value;
  response.OperatingSwitches = operatingSwitches.Value;
  return "[" + Newtonsoft.Json.JsonConvert.SerializeObject(response) + "]";
});

while (Program.IsEnabled)
{
  notifyTicks++;
  UpdateEnergyLoad();
  // update global statistics and notify every 5 minutes
  if (wattLoad.DecimalValue &gt; 0 &amp;&amp; notifyTicks &gt;= 5)
  {
    notifyTicks = 0;
    // update energy use parameters
    var energyUse = Program.EnergyUseCounter;
    Program.RaiseEvent(energyMonitor, kwCounter.Name, (energyUse / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  	Program.RaiseEvent(energyMonitor, wattCounter.Name, energyUse.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  }
  Pause(60);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>81</Address>
    <Name>Energy Monitor</Name>
    <Description>Collects and stores real-time information about
energy consumption.</Description>
    <Group>Energy Management</Group>
    <ActivationTime>2015-01-25T15:12:49.922723Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:17.279171Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

return true;
</ScriptCondition>
    <ScriptSource>var checkVirtualModules = new Func&lt;ModuleHelper, bool&gt;((module)=&gt;{
  var defaultType = "Switch";
  var parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchBinary.Count");
  if (parameter.DecimalValue == 0)
  {
    // if not SwitchBinary, try SwitchMultilevel
    defaultType = "Dimmer";
    parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchMultiLevel.Count");
  }
  // ADD A VIRTUAL MODULE FOR EACH INSTANCE
  for (int m = 1; m &lt;= parameter.DecimalValue; m++)
  {
    string address = module.Instance.Address + "." + m.ToString();
    var virtualModule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(address).Get();
    if (!virtualModule.WasFound)
    {
      Program.AddVirtualModule("HomeAutomation.ZWave", address, defaultType, "");
      Program.Notify("MultiChannel Z-Wave", "Adding virtual module " + address);
    }
  }
  return true;
});

When.ModuleParameterChanged((module, parameter) =&gt; {
  lock(this)
  if (!parameter.Name.EndsWith(".Count") &amp;&amp; (parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchMultiLevel.") || parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchBinary.")))
  {
    var path = parameter.Name.Split('.');
    //var eventType = path[2]; 	// "SwitchMultiLevel" or "SwitchBinary"
    var instance = path[3];		// the instance number
    
    var id = 0;
    if (int.TryParse(instance, out id))
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(module.Instance.Address + "." + instance).Get();
      Program.RaiseEvent(virtualmodule, "Status.Level", parameter.Value, "ZWaveNode");
    }

  }
  else if (parameter.Name == "ZWaveNode.NodeInfo")
  {
    var nif = (" " + parameter.Value + " "); // node information frame
    if (nif.Contains(" 60 ")) // MultiInstance/Channel
    {
      // ReQUEST instances count
      if (nif.Contains(" 25 ")) // 0x25 Switch Binary
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.Binary");
      }
      if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.MultiLevel");
      }
      checkVirtualModules(module);
    }
  }

  return true; // continue processing event
});

When.WebServiceCallReceived("HomeAutomation.ZWave", (args) =&gt; {

  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string nodeid = reqs[1];
    string instance = "";
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    //
    // Check if it's a node supporting MultiInstance/Channel
    // if the node address is in the form &lt;mainnode_id&gt;.&lt;instance&gt;
    // then this is a command for a multiinstance virtual module
    if (nodeid.IndexOf('.') &gt; 0)
    {
      instance = nodeid.Substring(nodeid.IndexOf('.') + 1);
      nodeid = nodeid.Substring(0, nodeid.IndexOf('.'));
    }
    if (instance != "")
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid + "." + instance).Get();
      var parentmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid).Get();
      //
      switch(command)
      {
        case "Control.On":
        parentmodule.Command("MultiInstance.Set").Execute("Switch.Binary/" + instance + "/255");
        Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
        break;
        case "Control.Off":
        parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
        Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
        break;
        case "Control.Toggle":
        if (virtualmodule.Parameter("Status.Level").DecimalValue == 0)
        {
          parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/255");
          Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
        }
        else
        {
          parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
          Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
        }
        break;
        case "Control.Level":
        parentmodule.Command("MultiInstance.Set").Set("Switch.MultiLevel/" + instance + "/" + parameter);
        Program.RaiseEvent(virtualmodule, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "ZWaveNode");
        break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    }
  } catch (Exception e) { 

    Program.Notify("ZWave MultiInstance module ERROR!", e.Message);

  }  	

  return "";
});

// setup multi channel virtual modules at startup
Modules.InDomain("HomeAutomation.ZWave").Each((module)=&gt;{
  checkVirtualModules(module);
  return false;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>93</Address>
    <Name>Multi Instance/Channel  Virtual Modules</Name>
    <Description>Adds a virtual module for each instance of a multi instance node.
It requires that a manufacturer specific get has been issued on the node.</Description>
    <Group>Z-Wave</Group>
    <ActivationTime>2014-12-11T15:39:24.006301Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:17.772788Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

  	Program.AddInputField("CellAddress", "192.168.0.?", "1. Remote HG server address");
  	Program.AddInputField("CellUsername", "", "2. Username");
  	Program.AddInputField("CellPassword", "", "3. Password");
  
});

return true;</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  	var celladdress  = Program.InputField("CellAddress").Value;
  	var cellusername = Program.InputField("CellUsername").Value;
  	var cellpassword = Program.InputField("CellPassword").Value;
  	// ROUTE METERING EVENT TO REMOTE HG CELL
  	if (!celladdress.Contains("?") &amp;&amp; property.Name.StartsWith("Sensor."))
    {
  		Net
          .WithCredentials(cellusername, cellpassword)
          .SignalModuleEvent(celladdress, module, property);
    }
  	// returning true, will route event to other listeners
	return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>76</Address>
    <Name>Sensor.* events forwarding</Name>
    <Description>Forwards devices' Sensor.* values changes to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <ActivationTime>2014-04-11T18:49:01.8605083Z</ActivationTime>
    <TriggerTime>2014-04-11T18:49:01.8675085Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

Program.Setup(()=&gt;{
  	Program.AddFeatureTextInput("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOn", "Raw RF string for ON event");
  	Program.AddFeatureTextInput("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOff", "Raw RF string for OFF event");
	Program.AddVirtualModules("HomeAutomation.X10.RF", "Sensor", "homegenie/generic/sensor", 1, 16);
});

return true;
</ScriptCondition>
    <ScriptSource>var x10rfModules = Modules.InDomain("HomeAutomation.X10.RF");
// We want to do further processing whenever a module prop changes 
When.ModuleParameterChanged( (module, property) =&gt; {
	
  	if (property.Name == "Receiver.RawData" &amp;&amp; module.Instance.Domain == "HomeAutomation.X10")
    {
      
      	x10rfModules.Each((m)=&gt;{
          
            var rfon = m.Parameter("X10RFString.LevelOn").Value;
          	var rfoff = m.Parameter("X10RFString.LevelOff").Value;
          	if (rfon != "" &amp;&amp; rfon == property.Value)
            {
              	Program.RaiseEvent(m, "Status.Level", "1", "X10 Virtual RF Module");
              	return true;
            }
          	else if (rfoff != "" &amp;&amp; rfoff == property.Value)
            {
              	Program.RaiseEvent(m, "Status.Level", "0", "X10 Virtual RF Module");
              	return true;
            }
          
          	return false;
        });
      
    }
  
    return true;
  
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>121</Address>
    <Name>X10 RF Virtual Modules Mapper</Name>
    <Description>Generate ON/OFF event when specific X10 RF raw strings are received.</Description>
    <Group>X10</Group>
    <ActivationTime>2014-03-31T23:25:16.9481442Z</ActivationTime>
    <TriggerTime>2014-04-11T15:54:17.1660696Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

    Program.AddFeature("Switch,Light,Dimmer", "HomeGenie.SmartLights.Enable", "Enable Smart Light Control");
    Program.AddFeatureTextInput("Switch,Light,Dimmer", "HomeGenie.SmartLights.OnMotionDetect", "Controlled by motion sensor (enter name)");
    Program.AddFeatureTextInput("Switch,Light,Dimmer", "HomeGenie.SmartLights.CheckLuminosity", "Controlled by luminance sensor (enter name)");
    Program.AddFeatureTextInput("Switch,Light,Dimmer", "HomeGenie.SmartLights.SwitchOffTimeout", "Turn off after inactivity timeout (seconds)");

});

return true;
</ScriptCondition>
    <ScriptSource>var SMART_LIGHT_ENABLE = "HomeGenie.SmartLights.Enable";
var MOT_SENSOR_NAME = "HomeGenie.SmartLights.OnMotionDetect";
var LUM_SENSOR_NAME = "HomeGenie.SmartLights.CheckLuminosity";
var TURNOFF_TIMEOUT = "HomeGenie.SmartLights.SwitchOffTimeout";
var LAST_EVENT = "HomeGenie.SmartLights.LastEvent";
var LUM_TRIGGER_VALUE = 10;
//
var smart_devices = Modules.WithFeature(SMART_LIGHT_ENABLE);
//
When.ModuleParameterIsChanging((module, parameter) =&gt; {
    
  	if (module.IsOfDeviceType("Sensor"))
    {
      	if (parameter.Name == "Sensor.MotionDetect" || parameter.Name == "Status.Level")
        {
            var motionlevel = parameter.DecimalValue;
            if (motionlevel &gt; 0)
            {
                smart_devices.Each((mod)=&gt;
                {
                    if (mod.Parameter(MOT_SENSOR_NAME).Value == module.Instance.Name)
                    {
						mod.Parameter(LAST_EVENT).Value = DateTime.UtcNow.Ticks.ToString();
  						if (mod.Level == 0)
                        {
                            Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
                          	//
                            var lumsensor = Modules.WithName(mod.Parameter(LUM_SENSOR_NAME).Value).Get();
                            if (lumsensor.Instance != null)
                            {
                                var luminosity = lumsensor.Parameter("Sensor.Luminance").DecimalValue;
                                if (luminosity &lt; LUM_TRIGGER_VALUE)
                                {
                                    mod.On();
                                }
                            }
                            else	
                            {
                                mod.On();
                            }
                        }
                    }
                  	//
	              	return false;
                });
            }
            else
            {
                // timeout before turning it off
            }
        }
      	if (module.HasParameter("Sensor.Luminance"))
        {
      		var luminosity = module.Parameter("Sensor.Luminance").DecimalValue;
            smart_devices.Each((mod)=&gt;
            {
            	if (mod.Parameter(LUM_SENSOR_NAME).Value == module.Instance.Name &amp;&amp; mod.Level &gt; 0)
				{
                    if (luminosity &gt;= LUM_TRIGGER_VALUE)
                    {
                        Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched OFF " + mod.Instance.Address + " " + mod.Instance.Name);
                      	mod.Off();
                    }
                    else	
                    {
                        //if (luminosity &lt; 10) mod.Level = 100;
                        //else mod.Level = 50;
                    }
				}
              	return false;
			});
		}
    }
    return true;
});
//
while (Program.IsEnabled)
{
	smart_devices.Each((mod)=&gt;
	{
      	var timeout = mod.Parameter(TURNOFF_TIMEOUT).DecimalValue;
      	if (timeout == 0) timeout = 120; // default timeout is 2 minutes
//		Program.Notify("Smart Lights", mod.Instance.Address + " - " + mod.Instance.Name + " : " + mod.IsOn);
//		Pause(1);
      	if (mod.IsOn)
        {
            var lastevent = mod.Parameter(LAST_EVENT).UpdateTime;
          	var lastupdate = mod.Parameter("Status.Level").UpdateTime;
          	var checktime = lastevent.Ticks;
          	if (checktime &lt; lastupdate.Ticks) checktime = lastupdate.Ticks;
            var elapsed = new TimeSpan(DateTime.UtcNow.Ticks - checktime);
          	if (elapsed.TotalSeconds &gt; timeout) {
                Program.Notify("Smart Lights", mod.Instance.Address + " " + mod.Instance.Name + "&lt;br&gt;switched OFF.");
            	mod.Off();
            }
        }
      	return false;
	});
  	Pause(2);
}
</ScriptSource>
    <ScriptErrors />
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.Enable</Property>
        <Description>Enable Smart Light Control</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.OnMotionDetect</Property>
        <Description>Controlled by motion sensor (enter name)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.CheckLuminosity</Property>
        <Description>Controlled by luminance sensor (enter name)</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.SwitchOffTimeout</Property>
        <Description>Turn off after inactivity timeout (seconds)</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>145</Address>
    <Name>Smart Lights</Name>
    <Description>Control device by motion detection and enviroment light. </Description>
    <Group>Lights</Group>
    <ActivationTime>2014-03-31T23:25:16.9481442Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:18.279003Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

/*
	Knowledge of Controller Fibaro RGWM-441
	---------------------------------------
Version 1.0
Date : 06/02/2014
Author : DaniMail

MultiLevel Switch (Dimmer) :
4 channels MultiLevel -&gt; R G B W
4 channels MultiSensor attached to each MultiLevel Dimmer

Principal Instance :
	     Control.Level 0 to 99 of the last color adjusted.
	     Control.On Control.Off accepted

It as 5 other Instances :
Instance 1 : Control.Level 0 to 99 of the last color adjusted. 
	     Control.On Control.Off not accepted
Instance 2 : Control.Level 0 to 99 for Red Channel. 
	     Control.On Control.Off not accepted
Instance 3 : Control.Level 0 to 99 for Green Channel. 
	     Control.On Control.Off not accepted
Instance 4 : Control.Level 0 to 99 for Blue Channel. 
	     Control.On Control.Off not accepted
Instance 5 : Control.Level 0 to 99 for White Channel. 
	     Control.On Control.Off not accepted

Is as 2 principaly parameters that affect the outputs :
Parameter 14 :
	     This parameter affect the action of the 4 input sensor
	     Default value : 4369 (Momentary Normal Mode) -&gt; With this value each input 
		is attached to manually switch on color R G B W
	     For exemple, if the value is 13107 (Momentary Rainbow)-&gt; If any switch is On, 
		it's generate a graduated variation of the color until is Off.   

Parameter 72 :
	     This parameter set the automatic program running on the module.
	     Default value : 1
	     Value 1 to 5 : User programs to define
	     Value 6 to 10 : Programs predefined on the module
		6 : -&gt; Fast brigtness variation of clear green color
		7 : -&gt; Hard blue with spaced white flashes
		8 : -&gt; Slow color variation of R G B spectrum
		9 : -&gt; Slow color variation of pastel colors spectrum
		10 : -&gt; Fast flashes between Red and Blue

Actually I don't have any specs on how to set User program.
I think it's actually possible only with "Fibaro Home Center 2".
*/

Program.Setup(()=&gt;{

	Modules.InDomain("HomeAutomation.ZWave").WithParameter("ZWaveNode.ManufacturerSpecific").Each((m)=&gt;
	{
	   	if( m.Parameter("ZWaveNode.ManufacturerSpecific").Value == "010F:0900:1000" )
        {
		 	Program.AddVirtualModule("HomeAutomation.FibaroRGBW", m.Instance.Address, "Dimmer","DaniMail/fibaro/rgbw");
          	// Added temporary until Switch.MultiLevel.GetCount works properly 
            for (int i = 1; i &lt;= 5 ; i++)
            {
                string address = m.Instance.Address + "." + i.ToString();
                Program.AddVirtualModule(m.Instance.Domain, address, "Dimmer", "homegenie/generic/dimmer");
            }
          	// End of Added
	    }
      	return false ;
	});
});

return true;
</ScriptCondition>
    <ScriptSource>//	Program.InputField("ZWaveModule").Value  
// - http://&lt;hg_address&gt;/api/HomeAutomation.FibaroRGBW/...
// - Version : 1.0
// - Date : 06/02/2014
// - Author : DaniMail

When.WebServiceCallReceived("HomeAutomation.FibaroRGBW", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
  	try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber).Get();
      var moduleRaise = Modules.InDomain("HomeAutomation.FibaroRGBW").WithAddress(lightnumber).Get();
      //
      switch(command)
      {
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.On
        case "Control.On":
			module.On();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.Off
        case "Control.Off":
			module.Off();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
        	break;
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
				module.On();
              	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
            }
        	else
            {
	 			module.Off();
 	        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
            }
        	break;
        case "Control.Level":
        	module.Command("Control.Level").Set((double.Parse(parameter)).ToString()) ;
            Program.RaiseEvent(moduleRaise, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "Fibaro RGBW");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
        	string[] values = parameter.Split(',');
 	        Program.RaiseEvent(moduleRaise, "Status.ColorHsb", parameter, "Fibaro RGBW");
        	double level = (double.Parse(values[0], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iRed = (int)Math.Truncate(level) ;
        	var moduleRed = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".2").Get();
   		 	moduleRed.Command("Control.Level").Set( ((int)iRed).ToString() ) ;
        	level = (double.Parse(values[1], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iGreen = (int)Math.Truncate(level) ;
        	var moduleGreen = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".3").Get();
    	 	moduleGreen.Command("Control.Level").Set( ((int)iGreen).ToString() ) ;
        	level = (double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iBlue = (int)Math.Truncate(level) ;
        	var moduleBlue = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".4").Get();
    	 	moduleBlue.Command("Control.Level").Set( ((int)iBlue).ToString() ) ;
        	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
        	break; 
        case "Control.ProgramRGB" :
			module.Command("Config.ParameterSet").Set("72/" + parameter);
           	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
//			Program.Notify("Program RGB", "N° " + parameter + " running" );
            break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
      
    	Program.Notify("Fibaro RGBW ERROR!", e.Message);
                       
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>502</Address>
    <Name>Fibaro RGBW</Name>
    <Description>Adds ZWave Fibaro RGBWM-441 control capability to HomeGenie. 
</Description>
    <Group>Z-Wave</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>// returning true will execute the "Code to Run"
Program.Setup(()=&gt;{
  	Program.AddInputField("GPIO4",  "OUT", "GPIO04 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO17", "OFF", "GPIO17 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO18", "OFF", "GPIO18 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO21", "OUT", "GPIO21 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO22", "OUT", "GPIO22 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO23", "OUT", "GPIO23 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO24", "OUT", "GPIO24 (IN, OUT or OFF)");
  	Program.AddInputField("GPIO25", "OUT", "GPIO25 (IN, OUT or OFF)");
});
return true;
</ScriptCondition>
    <ScriptSource>var moduleDomain = "RaspberryPi.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
var gpio4  = Program.InputField("GPIO4").Value.ToLower();
var gpio17 = Program.InputField("GPIO17").Value.ToLower();
var gpio18 = Program.InputField("GPIO18").Value.ToLower();
var gpio21 = Program.InputField("GPIO21").Value.ToLower();
var gpio22 = Program.InputField("GPIO22").Value.ToLower();
var gpio23 = Program.InputField("GPIO23").Value.ToLower();
var gpio24 = Program.InputField("GPIO24").Value.ToLower();
var gpio25 = Program.InputField("GPIO25").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
if (gpio4  != "off") pinMapping.Add(new { Config = gpio4, Address =  "GPIO4", Pin =  ConnectorPin.P1Pin7, Direction = ( gpio4.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio4.StartsWith("!") });
if (gpio17 != "off") pinMapping.Add(new { Config = gpio17, Address = "GPIO17", Pin = ConnectorPin.P1Pin11, Direction = (gpio17.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio17.StartsWith("!") });
if (gpio18 != "off") pinMapping.Add(new { Config = gpio18, Address = "GPIO18", Pin = ConnectorPin.P1Pin12, Direction = (gpio18.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio18.StartsWith("!") });
if (gpio21 != "off") pinMapping.Add(new { Config = gpio21, Address = "GPIO21", Pin = ConnectorPin.P1Pin13, Direction = (gpio21.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio21.StartsWith("!") });
if (gpio22 != "off") pinMapping.Add(new { Config = gpio22, Address = "GPIO22", Pin = ConnectorPin.P1Pin15, Direction = (gpio22.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio22.StartsWith("!") });
if (gpio23 != "off") pinMapping.Add(new { Config = gpio23, Address = "GPIO23", Pin = ConnectorPin.P1Pin16, Direction = (gpio23.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio23.StartsWith("!") });
if (gpio24 != "off") pinMapping.Add(new { Config = gpio24, Address = "GPIO24", Pin = ConnectorPin.P1Pin18, Direction = (gpio24.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio24.StartsWith("!") });
if (gpio25 != "off") pinMapping.Add(new { Config = gpio25, Address = "GPIO25", Pin = ConnectorPin.P1Pin22, Direction = (gpio25.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio25.StartsWith("!") });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  if (pc.Direction == PinDirection.Input)
  {
    configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    if (pc.Config.EndsWith("+"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
    }
    else if (pc.Config.EndsWith("-"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
    }
    Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  else
  {
    configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    ((OutputPinConfiguration)configuration[p]).Reversed = pc.Reversed;
    Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
  }
  configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
  connection = new GpioConnection(configuration);
}
catch 
{
  Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  Pause(10);
  return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  var address = args.Configuration.Name;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  Program.RaiseEvent(module, "Status.Level", 
                     args.Enabled ? "1" : "0",
                     address);

});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  var address = pc.Address;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
                            {
                              string[] reqs = ((string)args).Split('/');
                              var errorMessage = "";
                              try
                              {
                                string address = reqs[1];
                                string command = reqs[2];
                                //
                                switch(command)
                                {
                                  // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
                                  case "Control.On":
                                  connection[address] = true;
                                  break;
                                  // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
                                  case "Control.Off":
                                  connection[address] = false;
                                  break;
                                  // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
                                  case "Control.Toggle":
                                  connection.Toggle(address);
                                  break;
                                }
                                //
                                return "{ 'ResponseValue' : 'OK' }";    
                              } 
                              catch (Exception ex) 
                              { 
                                errorMessage = ex.Message + " " + ex.StackTrace;
                              }
                              // unable to process request
                              return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
                            });

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>100</Address>
    <Name>GPIO Modules</Name>
    <Description>Raspberry Pi GPIO mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
Use IN+ to activate the internal PullUp resistor or IN- to activate the internal PullDown resistor.
Use !OUT to Reverse the pin level On = 0 and Off = 1.
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1).
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
  
    Program.AddInputField("ModemIp", "", "1. Modem IP address");
    //Program.AddInputField("ModemUsername", "", "2. Modem username");
    Program.AddInputField("ModemPassword", "", "2. Modem password");
    Program.AddInputField("SmsRecipient", "", "4. Recipient phone number");
  
	Program.AddFeature("Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", "AlcatelY800Z.NotifyEvents", "Send SMS on module event");
});
// this program will be running in background
return true;
</ScriptCondition>
    <ScriptSource>var modemAddress = Program.InputField("ModemIp").Value;
var modemUsername = "admin"; //Program.InputField("ModemUsername").Value;
var modemPassword = Program.InputField("ModemPassword").Value;
var smsRecipient = Program.InputField("SmsRecipient").Value;

Func&lt;string,bool&gt; SmsSend = new Func&lt;string,bool&gt;((message)=&gt;{
  	var success = false;
  	var loginData = Net
  		.WebService("http://" + modemAddress + "/goform/setLogin")
		.Post("username=" + modemUsername + "&amp;password=" + modemPassword)
		.GetData();
	if (loginData.error == "0")
  	{	
  		var smsSend = Net
			.WebService("http://" + modemAddress + "/goform/sendSMS")
			.Post("sms_number=" + smsRecipient + "&amp;sms_content=" + message + "&amp;action_type=new")
			.GetData();
      	if (smsSend.error == "0")
        {
          	success = true;
          	Program.Notify("Alcatel Y800Z Notify", "SMS succesfully delivered.");
        }
      	else
        {
          	Program.Notify("Alcatel Y800Z Error!", "Could not send SMS (Err:" + smsSend.error + ").");
        }
    }
  	else
    {
    	Program.Notify("Alcatel Y800Z Error!", "Wrong Modem IP or credentials.");
    }
	return success;
});


// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  	if (Program.InputField("SmsRecipient").Value != "")
    {
        // Security Alarm System Notification
        if (module.Instance.Name == "Security Alarm System" &amp;&amp; property.Name == "HomeGenie.SecurityTriggered" &amp;&amp; property.Value == "1")
        {
            var source = Program.WithName("Security Alarm System").Parameter("HomeGenie.SecurityTriggerSource").Value;
            SmsSend("WARNING! Alarm was just triggered: " + source);
        }
        else if (module.HasFeature("AlcatelY800Z.NotifyEvents") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
        {
            var message = module.Instance.Name + " " + property.Name + "=" + property.Value + " (" + module.Instance.Domain + "." + module.Instance.Address + ")";
            SmsSend(message);
        }      
    }
  	// returning true, will route event to other listeners
    return true; 
  
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow</ForTypes>
        <Property>AlcatelY800Z.NotifyEvents</Property>
        <Description>Send SMS on module event</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>201</Address>
    <Name>Alcatel One Touch Y800Z SMS Notify</Name>
    <Description>Send SMS notifies when a device status changes and/or when the Security Alarm System is triggered.</Description>
    <Group>Messaging and Social</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
  // list the program as custom weather widget
  Program.AddControlWidget("jkUtils/OpenWeatherMap/OpenWeatherMap");

  // set input fields parameters
  Program.AddInputField("Location", "Berlin", "City name");
  Program.AddInputField("Language", "de", "Language. See http://OpenWeatherMap.org/API for available langugae codes.");
  Program.AddInputField("UpdateInterval", "60", "Update interval in minutes. Default is 60 minutes.");
  Program.AddInputField("Custom Display Units", "TRUE", "Display System of Units (TRUE = use metric system, FALSE = use imperial system)");
  Program.AddInputField("Custom Color", "213", "HUE Color Value");
  Program.AddInputField("Custom Zoom", "100%", "Custom Zoom");

  // setup program parameters
  Program.Parameter("jkUtils.OpenWeatherMap.Cod").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Name").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Id").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = "";    // Rain in mm within the last 1 hour
  Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = "";    // .. the last 3 hours
  Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = "";   // .. the last 24 hours
  Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = ""; // .. since midnight
  
  Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = "";  // Snowfall in mm. same as rain.
  Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = "";
    
  //Program.Parameter("jkUtils.OpenWeatherMap.Base").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = "";
  Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = "";
         
  Program.Parameter("jkUtils.OpenWeatherMap.LastUpdated").Value = "";
});

return true;
</ScriptCondition>
    <ScriptSource>
// jkUtils - OpenWeatherMap Ver 2.0 2014-05-08
// this version uses the 2.5 API from OpenWeatherMap.org
// ------------------------------------
// A HomeGenie script to fetch current weather data from http://OpenWeatherMap.org/ .
// No key or account is required to use this service.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use the free API services of http://OpenWeatherMap.org . For details see http://OpenWeatherMap.org/API
// Please use as adviced under http://OpenWeatherMap.org/about .
  

Func&lt;bool&gt; _checkWeather = new Func&lt;bool&gt;(()=&gt;{
 Program.RunAsyncTask(()=&gt;
 {
  string location = Program.InputField("Location").Value;
  string language = Program.InputField("Language").Value; 
  string displayCelsius = Program.InputField("Custom Display Units").Value;
  string webserviceurl = "http://api.OpenWeatherMap.org/data/2.5/weather?q="+ location +"&amp;lang=" + language; 
  TimeSpan t = (DateTime.UtcNow - new DateTime(1970, 1, 1));
  int UTCTimeNow = (int)t.TotalSeconds;
  string UCTTimeNowString = UTCTimeNow.ToString();
      
  Program.Parameter("jkUtils.OpenWeatherMap.LastUpdated").Value = UCTTimeNowString; //last_updated;

      try
      {
        //string last_updated = DateTime.Now.ToString("HH:mm"); 
        
        if (displayCelsius.ToLower() == "true") {
         webserviceurl = webserviceurl + "&amp;units=metric";
         Program.Parameter("jkUtils.OpenWeatherMap.Temp.Label").Value = "°C";
         Program.Parameter("jkUtils.OpenWeatherMap.Wind.Label").Value = "m/s";
        } else {
         webserviceurl = webserviceurl + "&amp;units=imperial";
         Program.Parameter("jkUtils.OpenWeatherMap.Temp.Label").Value = "°F";
         Program.Parameter("jkUtils.OpenWeatherMap.Wind.Label").Value = "kph"; 
        }        
        
        var data = Net.WebService(webserviceurl).GetData();    
      
        //check for update in data     
        //if(data.dt.ToString() != Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value ) {
        if(0 != 1 ) {          
    
         Program.Parameter("jkUtils.OpenWeatherMap.Cod").Value = data.cod ?? "";
         Program.Parameter("jkUtils.OpenWeatherMap.Name").Value = data.name ?? "";
         Program.Parameter("jkUtils.OpenWeatherMap.Id").Value = data.id ?? "";
         Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value = data.dt ?? "";
        
         if(data.clouds != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = data.clouds.all ?? "";
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = ""; 
         }
        
         if(data.rain != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = data.rain["1h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = data.rain["3h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = data.rain["24h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = data.rain["today"] ?? "";
         } else { 
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = "";         
         }
          
         if(data.snow != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = data.snow["1h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = data.snow["3h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = data.snow["24h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = data.snow["today"] ?? "";
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = "";           
         }          
        
         if(data.wind != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = data.wind.speed ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = data.wind.deg ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = data.wind.gust ?? "";
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = "";           
         }
        
         if(data.main != null) {
           if(Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value != "") {
           	Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value;           	 
           }
           if(Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value != "") {
           	Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value;           	 
           }
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = data.main.temp ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = data.main.humidity ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = data.main.pressure ?? "";
           //optional values
           Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = data.main.sea_level ?? "";
           Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = data.main.grnd_level ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = data.main.temp_max ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = data.main.temp_min ?? "";
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = "";           
         }
        
         //Program.Parameter("jkUtils.OpenWeatherMap.Base").Value = data["base"] ?? "";
        
         if(data.weather[0] != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = data.weather[0].id ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = data.weather[0].main ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = data.weather[0].description ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = data.weather[0].icon ?? "";
         /* 
           // Potential fix for problems in recieving JSON UTF encoded data
          
           Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = Regex.Replace(
             			 data.weather[0].description,
                         @"\\u(?&lt;value&gt;[0-9a-f]{4})",
                         match =&gt; {
                             string digits = match.Groups["value"].Value;
                             int number = int.Parse(digits, NumberStyles.HexNumber);
                             return char.ConvertFromUtf32(number);
                         })  ?? "";
          */
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = "";           
         }
        
         if(data.sys != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = data.sys.message ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = data.sys.country ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = data.sys.sunrise ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = data.sys.sunset ?? "";        
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = "";                   
         }
        
         if(data.coord != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = data.coord.lon ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = data.coord.lat ?? "";
         } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = "";           
         }

         //STENCIL: Program.Parameter("jkUtils.OpenWeatherMap.").Value = data. ?? "";
                        
        }
        
        Program.Notify("jkutils - OpenWeatherMap","Data has been updated.");
        //Program.RaiseEvent("jkUtils.OpenWeatherMap.LastUpdated", UCTTimeNowString, "Updated");
      } 
      catch (Exception e) 
      {                
        Program.Notify("jkutils - OpenWeatherMap", "Update of data failed.");
        //DEBUG: Program.Notify("OpenWeatherMap ERROR!", e.Message);
        Console.WriteLine( e.Message );
        //Pause(10);        
      }
  
      
      
    });
  	
  	return true;
});      

//
// Web service calls handling
//

When.WebServiceCallReceived("HomeAutomation.HomeGenie.Automation", (args) =&gt; //"HomeGenie.SecuritySystem", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    var res = "";
    
    try
    {
      string command = reqs[2];
      string pid = reqs[1];
      if (pid == Program.Module.Address)
      {

        switch(command)
        {
          case "Control.Refresh":
            //Program.Notify("jkutils: OpenWeatherMap","Update triggered.");
          	_checkWeather();
            break;
        }

      }
    } 
    catch (Exception ex) 
    { 
      res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
    }
    // unable to process request
    return res;

});

while (Program.IsEnabled)
{
  _checkWeather();
  Pause(Program.InputField("UpdateInterval").DecimalValue * 60); // pause before next check
  //Pause(10);
}
</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>503</Address>
    <Name>jkUtils - OpenWeatherData</Name>
    <Description>Gathers weather data from http://www.OpenWeatherMap.org/ [API Version 2.5] 
No service key required to fetch data.</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime>2014-05-09T16:01:02.7887618Z</ActivationTime>
    <TriggerTime>2014-05-09T16:01:02.8657664Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Call 'hg.SetConditionTrue()' when you want
// the 'Code To Run' to be executed.
hg.SetConditionTrue();
hg.Program.Setup(function(){
  hg.Program.AddControlWidget("jkUtils/SolarAltitude/SolarAltitude");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Latitude", "", "Location: Latitude");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Longitude", "", "Location: Longitude");    
  hg.Program.AddInputField("jkUtils.SolarAltitude.Label", "", "Custom Label");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Zoom", "100%", "Custom Zoom");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Color", "46", "Custom Color (HUE Value)");
  hg.Program.AddInputField("jkUtils.SolarAltitude.Timeformat", "FALSE", "Custom Timeformat (TRUE = use AM/PM Format, FALSE = use 24h Format)");
});
</ScriptCondition>
    <ScriptSource>
// jkUtils - Solar Altitude Ver 2.0 2014-05-07
// ------------------------------------
// A HomeGenie script to locally calculate sunrise/sunset with civil, nautical and astronomical timings.
// This script also sets and automatically updates timers for the scheduler service.
// Requires local longitude and latitude values to be set within programm options.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use of the original SunCalc which is a JavaScript library for calculating sun/mooon position and light phases.
// For more info see https://github.com/mourner/SunCalc (c) 2011-2014, Vladimir Agafonkin. BSD-licensed.

// calculations for illumination parameters of the moon, based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.


// shortcuts for easier to read formulas

var PI = Math.PI,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) {
    return date.valueOf() / dayMs - 0.5 + J1970;
}
function fromJulian(j) {
    return new Date((j + 0.5 - J1970) * dayMs);
}
function toDays(date) {
    return toJulian(date) - J2000;
}


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function getRightAscension(l, b) {
    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));
}
function getDeclination(l, b) {
    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));
}
function getAzimuth(H, phi, dec) {
    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));
}
function getAltitude(H, phi, dec) {
    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));
}
function getSiderealTime(d, lw) {
    return rad * (280.16 + 360.9856235 * d) - lw;
}


// general sun calculations

function getSolarMeanAnomaly(d) {
    return rad * (357.5291 + 0.98560028 * d);
}
function getEquationOfCenter(M) {
    return rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M));
}
function getEclipticLongitude(M, C) {
    var P = rad * 102.9372; // perihelion of the Earth
    return M + C + P + PI;
}
function getSunCoords(d) {

    var M = getSolarMeanAnomaly(d),
        C = getEquationOfCenter(M),
        L = getEclipticLongitude(M, C);

    return {
        dec: getDeclination(L, 0),
        ra: getRightAscension(L, 0)
    };
}


var SolarAltitude = {};


// calculates sun position for a given date and latitude/longitude

SolarAltitude.getPosition = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        c = getSunCoords(d),
        H = getSiderealTime(d, lw) - c.ra;

    return {
        azimuth: getAzimuth(H, phi, c.dec),
        altitude: getAltitude(H, phi, c.dec)
    };
};


// sun times configuration (angle, morning name, evening name)

var times = [
    [ -0.83,'sunrise', 'sunset' ],
    [ -0.3, 'sunriseEnd', 'sunsetStart' ],
    [ -6,   'dawn', 'dusk' ],                     //nautical twilight angle
    [ -12,  'nauticalDawn', 'nauticalDusk'],     //astronomical twilight angle
    [ -18,  'nightEnd', 'night' ],               //darkness angle
    [ 6,    'goldenHourEnd', 'goldenHour' ]
];

// adds a custom time to the times config

SolarAltitude.addTime = function (angle, riseName, setName) {
    times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function getJulianCycle(d, lw) {
    return Math.round(d - J0 - lw / (2 * PI));
}
function getApproxTransit(Ht, lw, n) {
    return J0 + (Ht + lw) / (2 * PI) + n;
}
function getSolarTransitJ(ds, M, L) {
    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);
}
function getHourAngle(h, phi, d) {
    var first = sin(h) - sin(phi) * sin(d),
        second = cos(phi) * cos(d),
        third = first / second;
    if ( third &lt; -1 || third &gt; 1 ) {
        third = Math.round(third);
    }  
  	return acos(third);
}


// calculates sun times for a given date and latitude/longitude

SolarAltitude.getTimes = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        n = getJulianCycle(d, lw),
        ds = getApproxTransit(0, lw, n),

        M = getSolarMeanAnomaly(ds),
        C = getEquationOfCenter(M),
        L = getEclipticLongitude(M, C),

        dec = getDeclination(L, 0),

        Jnoon = getSolarTransitJ(ds, M, L);


    // returns set time for the given sun altitude
    function getSetJ(h) {
        var w = getHourAngle(h, phi, dec),
            a = getApproxTransit(w, lw, n);

        return getSolarTransitJ(a, M, L);
    }


    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };

    var i, len, time, angle, morningName, eveningName, Jset, Jrise;

    for (i = 0, len = times.length; i &lt; len; i += 1) {
        time = times[i];

        Jset = getSetJ(time[0] * rad);
        Jrise = Jnoon - (Jset - Jnoon);

        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }

    return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function getMoonCoords(d) { // geocentric ecliptic coordinates of the moon

    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d), // mean distance

        l = L + rad * 6.289 * sin(M), // longitude
        b = rad * 5.128 * sin(F), // latitude
        dt = 385001 - 20905 * cos(M); // distance to the moon in km

    return {
        ra: getRightAscension(l, b),
        dec: getDeclination(l, b),
        dist: dt
    };
}

SolarAltitude.getMoonPosition = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,
        d = toDays(date),

        c = getMoonCoords(d),
        H = getSiderealTime(d, lw) - c.ra,
        h = getAltitude(H, phi, c.dec);

    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

    return {
        azimuth: getAzimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};

SolarAltitude.getMoonIllumination = function (date) {

    var d = toDays(date),
        s = getSunCoords(d),
        m = getMoonCoords(d),

        sdist = 149598000, // distance from Earth to Sun in km

        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi));

    return {
        fraction: (1 + cos(inc)) / 2,
        angle: atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec)
            - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra))
    };
};

SolarAltitude.printTime = function (d,m){
	var newd = new Date(d.valueOf() + m * 60000);
  	var min = newd.getMinutes();
    var hour = newd.getHours();
    if (min &lt; 10) min = "0" + min;
  	if (hour &lt; 10) hour = "0" + hour;
    return hour+":"+min;
};

SolarAltitude.saveTimer = function (timer,d,m){
	var str = 'hg.Program.Parameter("'+ timer + '").Value = SolarAltitude.printTime(d,m);';
	eval(str);
  	var str = 'var savedTimer = hg.Program.Parameter("'+ timer + '").Value';
  	eval(str);
    var spiltTimer = savedTimer.split(":");
    timer = timer.substring(timer.indexOf(".")+1);
  	hg.Scheduler.WithName(timer).SetSchedule(""+ spiltTimer[1] +" "+ spiltTimer[0] +" * * *");
};


SolarAltitude.main = function () {

  // HomeGenie Main Script Logic starts here ------- 

	var currentTime = new Date();
	var latitude = hg.Program.InputField("jkUtils.SolarAltitude.Latitude").Value;
	var longitude = hg.Program.InputField("jkUtils.SolarAltitude.Longitude").Value;    
	var sun = SolarAltitude.getTimes(currentTime, latitude, longitude);
	var moon = SolarAltitude.getMoonIllumination(currentTime);

	var timeFormat = {hour: "numeric", minute: "numeric"};

	// copy configure inputs to parameters as well
	hg.Program.Parameter("jkUtils.SolarAltitude.Latitude").Value = hg.Program.InputField("jkUtils.SolarAltitude.Latitude").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Longitude").Value = hg.Program.InputField("jkUtils.SolarAltitude.Longitude").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Label").Value = hg.Program.InputField("jkUtils.SolarAltitude.Label").Value;
	hg.Program.Parameter("jkUtils.SolarAltitude.Timeformat").Value = hg.Program.InputField("jkUtils.SolarAltitude.Timeformat").Value;

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Start",sun.nightEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Noon",sun.solarNoon,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Start",sun.night,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Nadir",sun.nadir,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Night.End",sun.nightEnd,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.Start",sun.nightEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.End",sun.nauticalDawn,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.Start",sun.nauticalDawn,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.End",sun.dawn,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.Start",sun.dawn,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.End",sun.sunrise,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.Start",sun.sunrise,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.End",sun.sunriseEnd,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.Start",sun.sunriseEnd,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.End",sun.goldenHourEnd,0);

	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.Start",sun.goldenHour,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.End",sun.sunsetStart,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.Start",sun.sunsetStart,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.End",sun.sunset,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.Start",sun.sunset,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.End",sun.dusk,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.Start",sun.dusk,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.End",sun.nauticalDusk,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.Start",sun.nauticalDusk,0);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.End",sun.night,-1);
	SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Night.Start",sun.night,0);

	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Fraction").Value = moon.fraction;

	moon.fraction = moon.fraction * 100;

	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Precent").Value = Math.round(moon.fraction) + "%";
	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Angle").Value = moon.angle;
	hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Waxing").Value = (moon.angle &lt; 0 ? "1" : "0");

	hg.Program.Parameter("jkUtils.SolarAltitude.LastUpdated").Value = SolarAltitude.printTime(currentTime,0);

	hg.Program.Notify("jkUtils - Solar Altitude", "Data has been updated.");
  
};

while (hg.Program.IsEnabled)
{
  	SolarAltitude.main();
  	// Update every 12 hours
  	hg.Pause(12*60*60);

}


//
// Web service calls handling
//
/* WebServiceCall currently not working 

hg.WebServiceCallReceived("HomeAutomation.HomeGenie.Automation", function (args) {
{
    //string[] reqs = ((string)args).Split('/');
  	var reqs = args.split('/');
    var res = "";
    hg.Program.Notify("SolarAltitude", "WebServiceCall.");
    
    try
    {
      var command = reqs[2];
      var pid = reqs[1];
      if (pid == hg.Program.Module.Address)
      {

        switch(command)
        {
          case "Control.Refresh":
            //Program.Notify("jkutils: SolarAltitude","Update triggered.");
          	SolarAltitude.main();
            break;
        }

      }

    } catch (e) {
    
      var res = "{ 'ResponseValue' : 'ERROR: " + e.Message + " " + e.StackTrace + "' }";
      
    }
    // unable to process request
    return res;

});
*/


// For your convenience:
//   If you should need a way to parse the saved times within you own scripts, you can use the following function.
//   It is able to parse all kind of notations e.g.: '1:00 pm','1:00 p.m.', ...
   
//   function parseTime(timestring) {
//     var d = new Date();
//     var time = timestring.match(/(\d+)(?::(\d\d))?\s*(p?)/);
//     d.setHours( parseInt(time[1]) + (time[3] ? 12 : 0) );
//     d.setMinutes( parseInt(time[2]) || 0 );
     
//    return d;
//   }
   
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>501</Address>
    <Name>jkUtils - Solar Altitude</Name>
    <Description>Calculates schedulers for sunrise/sunset with civil, nautical, astronomical timings. 
  Please set your local longitude/latitude in program options.</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime>2015-01-24T15:29:22.324048Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:18.846263Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.

// ...
Program.Setup(()=&gt;
{              
  	Program.AddInputField("ClientId", "hg-01", "0. Enter unique ID for this client");
	Program.AddInputField("ServerAddress", "", "1. MQTT server address");
  	Program.AddInputField("ServerPort", "1883", "2. MQTT server port");
  	Program.AddInputField("ServerTopic", "#", "3. Topic");
  	Program.AddInputField("Username", "", "4. Username (optional)");
  	Program.AddInputField("Password", "", "5. Password (optional)");
	Program.AddFeature("", "MQTT.SensorPublish", "Publish module on MQTT network");
});
//
return true; // execute "Code To Run"</ScriptCondition>
    <ScriptSource>string server = Program.InputField("ServerAddress").Value.Trim();
int port = 1883; int.TryParse(Program.InputField("ServerPort").Value, out port);
string topic = Program.InputField("ServerTopic").Value.Trim();
string clientid = Program.InputField("ClientId").Value.Trim();
string username = Program.InputField("Username").Value.Trim();
string password = Program.InputField("Password").Value.Trim();

if (server == "")
{
	Program.Notify("MQTT", "Please configure server address");
    Pause(5);
    return;
}
else
{
	Program.Notify("MQTT", "Connecting to " + server + "...");
  	try
    {
      	if (username != "")
        {
          	Net.MqttService(server, port, username, password, clientid);
        }
      	else
        {
      		Net.MqttService(server, port, clientid);
        }
      	Program.Notify("MQTT", "Connected!");
    } 
  	catch (Exception e) 
    {
      	Program.Notify("MQTT", e.Message);
      	Pause(5);
      	return;
    }
}



Net.Subscribe(topic, (mtopic, mpayload) =&gt; {
  	var parts = mtopic.Split('/');
  	var cid = parts[0];
  	//
  	//if (cid == clientid) return;
  	//
  	if (parts.Length == 4)
    {
  		try
        {
            var domain = parts[1];
            var address = parts[2];
            var type = parts[3];

            var module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();
          
          	switch (type)
            {
				case "command":
                        if (domain == "MQTT.Listeners" &amp;&amp; address == clientid)
                        {
                            var cmdobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;dynamic&gt;(mpayload);
                            var targetmodule = Modules.InDomain(cmdobj.Domain.ToString()).WithAddress(cmdobj.Address.ToString());
                            if (targetmodule.Get().Instance != null)
                            {
                                string command = cmdobj.Command.ToString();
                                switch (command)
                                {
                                    case "Module.Describe":
                                    var modinstance = targetmodule.Get().Instance;
                                    Net.Publish(clientid + "/" + modinstance.Domain + "/" + modinstance.Address + "/description", Utility.Module2Json(modinstance, false));
                                    break;
                                    default:
                                    targetmodule.Command(command).Execute();
                                    break;
                                }
                            }
                        }
                      	break;
                  case "description":
                      	if (module.Instance != null)
                      	{
                          	var modobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;Module&gt;(mpayload);
                          	module.Instance.Name = modobj.Name;
                          	module.Instance.Description = modobj.Description;
                          	module.Instance.DeviceType = modobj.DeviceType;
                          	var parentid = module.Parameter("VirtualModule.ParentId").Value;
                          	module.Instance.Properties = modobj.Properties;
                          	module.Parameter("VirtualModule.ParentId").Value = parentid;
                          	module.Parameter("MQTT.SourceNode").Value = cid;
                        	Program.Notify("MQTT", "Created remote module " + module.Instance.Domain + " " + module.Instance.Address);
                      	}
                      	break;
                  case "event":
			            var property = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;ModuleParameter&gt;(mpayload);
                      	if (module.Instance == null)
                   	   {
                    	    Program.AddVirtualModule("MQTT:" + cid + "." + domain, address, "Sensor", "");
                     		module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();
                  	    }
                      	else if (!module.HasParameter("MQTT.SourceNode"))
                      	{
                        	Net.Publish(clientid + "/MQTT.Listeners/" + cid + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : 'Module.Describe' }");      	
                      	}
                      	Program.RaiseEvent(module, property.Name, property.Value, "");
                      	break;
			}
		} catch (Exception e) { Program.Notify("MQTT ERROR!", e.Message);  }
	}
	//Console.WriteLine("MQTT {0} : {1}", mtopic, mpayload); 
});


When.WebServiceCallReceived("MQTT:", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    string domain = reqs[0];
  	string address = reqs[1];
  	var commands = new List&lt;string&gt;(reqs);
  	// remove domain and address to obtain the command parts only
  	commands.RemoveAt(0); commands.RemoveAt(0);
  	string command = String.Join("/", commands.ToArray());
    try
    {
      	int mqttend = domain.IndexOf(".");
      	int mqttdel = domain.IndexOf(":");
      	var mqttdest  = domain.Substring(mqttdel + 1, mqttend - mqttdel - 1);
      	domain = domain.Substring(mqttend + 1);
      	Net.Publish(clientid + "/MQTT.Listeners/" + mqttdest + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : '" + command + "' }");      	
      	return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
        Program.Notify("MQTT ERROR!", e.Message);
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});


// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
    if (module.HasFeature("MQTT.SensorPublish") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.") || property.Name.StartsWith("Meter.")) &amp;&amp; !module.Instance.Domain.StartsWith("MQTT:"))
    {
        try{
            Net.Publish(clientid + "/" + module.Instance.Domain + "/" + module.Instance.Address + "/event", Newtonsoft.Json.JsonConvert.SerializeObject(property));
        } catch  (Exception e){ Console.WriteLine("ERR:"+e.Message + "\n" + e.StackTrace); }
    }
  	// returning true, will route event to other listeners
	return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>77</Address>
    <Name>MQTT Network</Name>
    <Description>Publish modules over an MQTT network.
This is similar to "events forwarding" programs, used for connecting homegenie servers each other, but it relays on an external MQTT service (http://mosquitto.org/).
To publish a module over the MQTT network, activate "Publish module on MQTT" option on it. 
Other HomeGenie servers will automatically discover the published module once an event is generated from it.
Supports full control/scripting of remote modules, just like a standard local module.</Description>
    <Group>Interconnections</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.

Program.Setup(()=&gt;{
		Program.AddFeature(
          	"HomeAutomation.PhilipsHue",
            "Dimmer",
            "Scenarios.SunriseColors",
            "Link to Sunrise Colors Scenario");
  		Program.AddControlWidget("homegenie/generic/program");
});

return false;
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin

// Initialize scenario
var colorLights = Modules.WithFeature("Scenarios.SunriseColors")
  	.Off()
  	.Command("Control.ColorHsb");

// First transition to red, 5 seconds
colorLights.Set("0,1,.8,5");
Pause(5);

// Second transition to orange, 5 seconds
colorLights.Set("0.08,1,.8,5");
Pause(5);

// Last transition to bright white, 10 seconds
colorLights.Set("0.13,0,1,10");
Pause(10);</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.PhilipsHue</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>Scenarios.SunriseColors</Property>
        <Description>Link to Sunrise Colors Scenario</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>8</Address>
    <Name>Sunrise Colors Scenario</Name>
    <Description>Example scenario for Philips Hue lights.</Description>
    <Group>Scenes</Group>
    <ActivationTime>2014-07-25T21:30:38.298025Z</ActivationTime>
    <TriggerTime>2014-07-25T22:01:09.283224Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.
return false;
</ScriptCondition>
    <ScriptSource>var pinDta = ConnectorPin.P1Pin07.ToProcessor();
var pinClk = ConnectorPin.P1Pin13.ToProcessor();

var driver = GpioConnectionSettings.DefaultDriver;

driver.Allocate(pinDta, PinDirection.Output);
driver.Allocate(pinClk, PinDirection.Output);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

//init 
driver.Write(pinDta, false);
Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);


for(int i = 0; i &lt; 4; i++)
{
  	driver.Write(pinDta, true);
	driver.Write(pinDta, false);
}

var sendData16 = new Func&lt;uint, bool&gt;((data)=&gt;{
  // send 16 bit data
   for(int i=0; i&lt;16; i++)
  {
    bool state = ((data&amp;0x8000) &gt; 0 ? true : false);
    driver.Write(pinDta, state);
    state = driver.Read(pinClk) ? false : true;
    driver.Write(pinClk, state);
    data &lt;&lt;= 1;
  }
  return true;
});

var latchData = new Func&lt;bool&gt;(()=&gt;{
    driver.Write(pinDta, false);
	Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);
    for(int i=0; i&lt;4; i++)
    {
         driver.Write(pinDta, true);
         driver.Write(pinDta, false);
    }
  	return true;
});

uint CMDMODE = 0x0000;


var setLeds = new Func&lt;string, bool&gt;((leds)=&gt;{
    sendData16(CMDMODE);
    uint index_bits = (uint)Convert.ToInt32(leds, 2);
    for (int i=0;i&lt;12;i++)
    {
        uint state = (uint)((index_bits&amp;0x0001) &gt; 0 ? 0x00FF : 0x0000);
        sendData16(state);
        index_bits = index_bits&gt;&gt;1;
    }
    latchData();
  	return true;
});

setLeds("1000000000");
//Pause(.1);
setLeds("0100000000");
//Pause(.1);
setLeds("0010000000");
//Pause(.1);
setLeds("0001000000");
//Pause(.1);
setLeds("0000100000");
//Pause(.1);
setLeds("0000010000");
//Pause(.1);
setLeds("0000001000");
//Pause(.1);
setLeds("0000000100");
//Pause(.1);
setLeds("0000000010");
//Pause(.1);
setLeds("0000000001");
//Pause(.1);


Pause(3);


var setLevel = new Func&lt;int, bool&gt;((level)=&gt;{
    sendData16(CMDMODE);
     for(int i=0;i&lt;12;i++)
    {
        uint state1 = (uint)((i&lt; level) ? 0x00FF : 0x0000);
        sendData16(state1);
    }
    latchData();
  	return true;
});

for (int z = 0; z &lt; 1000; z++)
{
	setLevel(z % 11);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>60</Address>
    <Name>Grove - Led Bar</Name>
    <Description>Using a Grove Led Bar.
http://www.seeedstudio.com/wiki/Grove_-_LED_Bar</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Parameter("Spi.Locked").Value = "0";
return true;</ScriptCondition>
    <ScriptSource>#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

var edenModule = Modules.WithAddress("38").Get();
var temperature = edenModule.Parameter("Sensor.Temperature");
string oldTemperature ="-----";

int LCD_X_RES = 84;
int LCD_Y_RES = 48;

const byte
    CmdPowerDown = 0x04,
    CmdEntryMode = 0x02,
    CmdExtendedInstr = 0x01,
    CmdFunctionSet = 0x20,
    CmdDispControl = 0x08, 
    CmdSetBias = 0x10,
    CmdSetVop = 0x80, 
    CmdDispBlank = 0x00,
    CmdDispNormal = 0x04,
    CmdDispAllOn = 0x01,
    CmdDispInverted = 0x05,
    CmdSetTemp = 0x04,
    CmdSetYAddr = 0x40,
    CmdSetXAddr = 0x80;

long[] nanoFont =
{
    0x00000000, // ' ' - chr 32
    0x44404000, // '!' - chr 33
    0xaa000000, // '"' - chr 34
    0xaeaea000, // '#' - chr 35
    0x6ce6c000, // '$' - chr 36
    0xa248a000, // '%' - chr 37
    0x4a5ad000, // '&amp;' - chr 38
    0x44000000, // ''' - chr 39
    0x24442000, // '(' - chr 40
    0x42224000, // ')' - chr 41
    0x0a4a0000, // '*' - chr 42
    0x04e40000, // '+' - chr 43
    0x00048000, // ',' - chr 44
    0x00e00000, // '-' - chr 45
    0x00004000, // '.' - chr 46
    0x22488000, // '/' - chr 47
    0x6aaac000, // '0' - chr 48
    0x4c44e000, // '1' - chr 49
    0xc268e000, // '2' - chr 50
    0xc242c000, // '3' - chr 51
    0x88ae2000, // '4' - chr 52
    0xe8e2c000, // '5' - chr 53
    0x68eac000, // '6' - chr 54
    0xe2488000, // '7' - chr 55
    0x6aeac000, // '8' - chr 56
    0x6ae2c000, // '9' - chr 57
    0x04040000, // ':' - chr 58
    0x04048000, // ';' - chr 59
    0x24842000, // '&lt;' - chr 60
    0x0e0e0000, // '=' - chr 61
    0x84248000, // '&gt;' - chr 62
    0xe2404000, // '?' - chr 63
    0x4aa86000, // '@' - chr 64
    0x6aeaa000, // 'A' - chr 65
    0x6acac000, // 'B' - chr 66
    0x68886000, // 'C' - chr 67
    0xcaaac000, // 'D' - chr 68
    0x68e8e000, // 'E' - chr 69
    0x68e88000, // 'F' - chr 70
    0x68aa6000, // 'G' - chr 71
    0xaaeaa000, // 'H' - chr 72
    0xe444e000, // 'I' - chr 73
    0x622a4000, // 'J' - chr 74
    0xaacaa000, // 'K' - chr 75
    0x8888e000, // 'L' - chr 76
    0xaeaaa000, // 'M' - chr 77
    0xcaaaa000, // 'N' - chr 78
    0x4aaa4000, // 'O' - chr 79
    0xcae88000, // 'P' - chr 80
    0x6aae6000, // 'Q' - chr 81
    0x6acaa000, // 'R' - chr 82
    0x6842c000, // 'S' - chr 83
    0xe4444000, // 'T' - chr 84
    0xaaaa6000, // 'U' - chr 85
    0xaaaa4000, // 'V' - chr 86
    0xaaaea000, // 'W' - chr 87
    0xaa4aa000, // 'X' - chr 88
    0xaa444000, // 'Y' - chr 89
    0xe248e000, // 'Z' - chr 90
    0x64446000, // '[' - chr 91
    0x88422000, // '\' - chr 92
    0x62226000, // ']' - chr 93
    0x4a000000, // '^' - chr 94
    0x0000f000, // '_' - chr 95
    0x42000000, // '`' - chr 96
    0x06aa6000, // 'a' - chr 97
    0x8caac000, // 'b' - chr 98
    0x06886000, // 'c' - chr 99
    0x26aa6000, // 'd' - chr 100
    0x06ac6000, // 'e' - chr 101
    0x4a8c8000, // 'f' - chr 102
    0x04a62c00, // 'g' - chr 103
    0x88caa000, // 'h' - chr 104
    0x40442000, // 'i' - chr 105
    0x40444800, // 'j' - chr 106
    0x8acaa000, // 'k' - chr 107
    0x44442000, // 'l' - chr 108
    0x0aeaa000, // 'm' - chr 109
    0x0caaa000, // 'n' - chr 110
    0x04aa4000, // 'o' - chr 111
    0x0caac800, // 'p' - chr 112
    0x06aa6200, // 'q' - chr 113
    0x0ac88000, // 'r' - chr 114
    0x06c2c000, // 's' - chr 115
    0x8c886000, // 't' - chr 116
    0x0aaa6000, // 'u' - chr 117
    0x0aaac000, // 'v' - chr 118
    0x0aaea000, // 'w' - chr 119
    0x0a4aa000, // 'x' - chr 120
    0x0aa62400, // 'y' - chr 121
    0x0c42ac00, // 'z' - chr 122
    0x64c46000, // '{' - chr 123
    0x44444000, // '|' - chr 124
    0xc464c000, // '}' - chr 125
    0x5a000000, // '~' - chr 126
    0x4aae0000 // '' - chr 127
};


byte[] smallFont =
{
    0x00, 0x00, 0x00, 0x00, 0x00 ,   // sp
    0x00, 0x00, 0x2f, 0x00, 0x00 ,   // !
    0x00, 0x07, 0x00, 0x07, 0x00 ,   // "
    0x14, 0x7f, 0x14, 0x7f, 0x14 ,   // #
    0x24, 0x2a, 0x7f, 0x2a, 0x12 ,   // $
    0x61, 0x66, 0x08, 0x33, 0x43 ,   // %
    0x36, 0x49, 0x55, 0x22, 0x50 ,   // &amp;
    0x00, 0x05, 0x03, 0x00, 0x00 ,   // '
    0x00, 0x1c, 0x22, 0x41, 0x00 ,   // (
    0x00, 0x41, 0x22, 0x1c, 0x00 ,   // )
    0x14, 0x08, 0x3E, 0x08, 0x14 ,   // *
    0x08, 0x08, 0x3E, 0x08, 0x08 ,   // +
    0x00, 0x00, 0x50, 0x30, 0x00 ,   // ,
    0x10, 0x10, 0x10, 0x10, 0x10 ,   // -
    0x00, 0x60, 0x60, 0x00, 0x00 ,   // .
    0x20, 0x10, 0x08, 0x04, 0x02 ,   // /
    0x3E, 0x51, 0x49, 0x45, 0x3E ,   // 0
    0x00, 0x42, 0x7F, 0x40, 0x00 ,   // 1
    0x42, 0x61, 0x51, 0x49, 0x46 ,   // 2
    0x21, 0x41, 0x45, 0x4B, 0x31 ,   // 3
    0x18, 0x14, 0x12, 0x7F, 0x10 ,   // 4
    0x27, 0x45, 0x45, 0x45, 0x39 ,   // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30 ,   // 6
    0x01, 0x71, 0x09, 0x05, 0x03 ,   // 7
    0x36, 0x49, 0x49, 0x49, 0x36 ,   // 8
    0x06, 0x49, 0x49, 0x29, 0x1E ,   // 9
    0x00, 0x36, 0x36, 0x00, 0x00 ,   // :
    0x00, 0x56, 0x36, 0x00, 0x00 ,   // ;
    0x08, 0x14, 0x22, 0x41, 0x00 ,   // &lt;
    0x14, 0x14, 0x14, 0x14, 0x14 ,   // =
    0x00, 0x41, 0x22, 0x14, 0x08 ,   // &gt;
    0x02, 0x01, 0x51, 0x09, 0x06 ,   // ?
    0x32, 0x49, 0x59, 0x51, 0x3E ,   // @
    0x7E, 0x11, 0x11, 0x11, 0x7E ,   // A
    0x7F, 0x49, 0x49, 0x49, 0x36 ,   // B
    0x3E, 0x41, 0x41, 0x41, 0x22 ,   // C
    0x7F, 0x41, 0x41, 0x22, 0x1C ,   // D
    0x7F, 0x49, 0x49, 0x49, 0x41 ,   // E
    0x7F, 0x09, 0x09, 0x09, 0x01 ,   // F
    0x3E, 0x41, 0x49, 0x49, 0x7A ,   // G
    0x7F, 0x08, 0x08, 0x08, 0x7F ,   // H
    0x00, 0x41, 0x7F, 0x41, 0x00 ,   // I
    0x20, 0x40, 0x41, 0x3F, 0x01 ,   // J
    0x7F, 0x08, 0x14, 0x22, 0x41 ,   // K
    0x7F, 0x40, 0x40, 0x40, 0x40 ,   // L
    0x7F, 0x02, 0x0C, 0x02, 0x7F ,   // M
    0x7F, 0x04, 0x08, 0x10, 0x7F ,   // N
    0x3E, 0x41, 0x41, 0x41, 0x3E ,   // O
    0x7F, 0x09, 0x09, 0x09, 0x06 ,   // P
    0x3E, 0x41, 0x51, 0x21, 0x5E ,   // Q
    0x7F, 0x09, 0x19, 0x29, 0x46 ,   // R
    0x46, 0x49, 0x49, 0x49, 0x31 ,   // S
    0x01, 0x01, 0x7F, 0x01, 0x01 ,   // T
    0x3F, 0x40, 0x40, 0x40, 0x3F ,   // U
    0x1F, 0x20, 0x40, 0x20, 0x1F ,   // V
    0x3F, 0x40, 0x38, 0x40, 0x3F ,   // W
    0x63, 0x14, 0x08, 0x14, 0x63 ,   // X
    0x07, 0x08, 0x70, 0x08, 0x07 ,   // Y
    0x61, 0x51, 0x49, 0x45, 0x43 ,   // Z
    0x00, 0x7F, 0x41, 0x41, 0x00 ,   // [
    0x55, 0x2A, 0x55, 0x2A, 0x55 ,   // checker pattern
    0x00, 0x41, 0x41, 0x7F, 0x00 ,   // ]
    0x04, 0x02, 0x01, 0x02, 0x04 ,   // ^
    0x40, 0x40, 0x40, 0x40, 0x40 ,   // _
    0x00, 0x01, 0x02, 0x04, 0x00 ,   // '
    0x20, 0x54, 0x54, 0x54, 0x78 ,   // a
    0x7F, 0x48, 0x44, 0x44, 0x38 ,   // b
    0x38, 0x44, 0x44, 0x44, 0x20 ,   // c
    0x38, 0x44, 0x44, 0x48, 0x7F ,   // d
    0x38, 0x54, 0x54, 0x54, 0x18 ,   // e
    0x08, 0x7E, 0x09, 0x01, 0x02 ,   // f
    0x0C, 0x52, 0x52, 0x52, 0x3E ,   // g
    0x7F, 0x08, 0x04, 0x04, 0x78 ,   // h
    0x00, 0x44, 0x7D, 0x40, 0x00 ,   // i
    0x20, 0x40, 0x44, 0x3D, 0x00 ,   // j
    0x7F, 0x10, 0x28, 0x44, 0x00 ,   // k
    0x00, 0x41, 0x7F, 0x40, 0x00 ,   // l
    0x7C, 0x04, 0x18, 0x04, 0x78 ,   // m
    0x7C, 0x08, 0x04, 0x04, 0x78 ,   // n
    0x38, 0x44, 0x44, 0x44, 0x38 ,   // o
    0x7C, 0x14, 0x14, 0x14, 0x08 ,   // p
    0x08, 0x14, 0x14, 0x18, 0x7C ,   // q
    0x7C, 0x08, 0x04, 0x04, 0x08 ,   // r
    0x48, 0x54, 0x54, 0x54, 0x20 ,   // s
    0x04, 0x3F, 0x44, 0x40, 0x20 ,   // t
    0x3C, 0x40, 0x40, 0x20, 0x7C ,   // u
    0x1C, 0x20, 0x40, 0x20, 0x1C ,   // v
    0x3C, 0x40, 0x30, 0x40, 0x3C ,   // w
    0x44, 0x28, 0x10, 0x28, 0x44 ,   // x
    0x0C, 0x50, 0x50, 0x50, 0x3C ,   // y
    0x44, 0x64, 0x54, 0x4C, 0x44 ,   // z
    0x00, 0x06, 0x09, 0x09, 0x06     // Degree symbol
};

byte[] coolFont2 =
{
    0x00, 0x00, 0x00, 0x00, 0x00,// (space)
    0x00, 0x00, 0x5F, 0x00, 0x00,// !
    0x00, 0x07, 0x00, 0x07, 0x00,// "
    0x14, 0x7F, 0x14, 0x7F, 0x14,// #
    0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
    0x23, 0x13, 0x08, 0x64, 0x62,// %
    0x36, 0x49, 0x55, 0x22, 0x50,// &amp;
    0x00, 0x05, 0x03, 0x00, 0x00,// '
    0x00, 0x1C, 0x22, 0x41, 0x00,// (
    0x00, 0x41, 0x22, 0x1C, 0x00,// )
    0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
    0x08, 0x08, 0x3E, 0x08, 0x08,// +
    0x00, 0x50, 0x30, 0x00, 0x00,// ,
    0x08, 0x08, 0x08, 0x08, 0x08,// -
    0x00, 0x60, 0x60, 0x00, 0x00,// .
    0x20, 0x10, 0x08, 0x04, 0x02,// /
    0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
    0x00, 0x42, 0x7F, 0x40, 0x00,// 1
    0x42, 0x61, 0x51, 0x49, 0x46,// 2
    0x21, 0x41, 0x45, 0x4B, 0x31,// 3
    0x18, 0x14, 0x12, 0x7F, 0x10,// 4
    0x27, 0x45, 0x45, 0x45, 0x39,// 5
    0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
    0x01, 0x71, 0x09, 0x05, 0x03,// 7
    0x36, 0x49, 0x49, 0x49, 0x36,// 8
    0x06, 0x49, 0x49, 0x29, 0x1E,// 9
    0x00, 0x36, 0x36, 0x00, 0x00,// :
    0x00, 0x56, 0x36, 0x00, 0x00,// ;
    0x00, 0x08, 0x14, 0x22, 0x41,// &lt;
    0x14, 0x14, 0x14, 0x14, 0x14,// =
    0x41, 0x22, 0x14, 0x08, 0x00,// &gt;
    0x02, 0x01, 0x51, 0x09, 0x06,// ?
    0x32, 0x49, 0x79, 0x41, 0x3E,// @
    0x7E, 0x11, 0x11, 0x11, 0x7E,// A
    0x7F, 0x49, 0x49, 0x49, 0x36,// B
    0x3E, 0x41, 0x41, 0x41, 0x22,// C
    0x7F, 0x41, 0x41, 0x22, 0x1C,// D
    0x7F, 0x49, 0x49, 0x49, 0x41,// E
    0x7F, 0x09, 0x09, 0x01, 0x01,// F
    0x3E, 0x41, 0x41, 0x51, 0x32,// G
    0x7F, 0x08, 0x08, 0x08, 0x7F,// H
    0x00, 0x41, 0x7F, 0x41, 0x00,// I
    0x20, 0x40, 0x41, 0x3F, 0x01,// J
    0x7F, 0x08, 0x14, 0x22, 0x41,// K
    0x7F, 0x40, 0x40, 0x40, 0x40,// L
    0x7F, 0x02, 0x04, 0x02, 0x7F,// M
    0x7F, 0x04, 0x08, 0x10, 0x7F,// N
    0x3E, 0x41, 0x41, 0x41, 0x3E,// O
    0x7F, 0x09, 0x09, 0x09, 0x06,// P
    0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
    0x7F, 0x09, 0x19, 0x29, 0x46,// R
    0x46, 0x49, 0x49, 0x49, 0x31,// S
    0x01, 0x01, 0x7F, 0x01, 0x01,// T
    0x3F, 0x40, 0x40, 0x40, 0x3F,// U
    0x1F, 0x20, 0x40, 0x20, 0x1F,// V
    0x7F, 0x20, 0x18, 0x20, 0x7F,// W
    0x63, 0x14, 0x08, 0x14, 0x63,// X
    0x03, 0x04, 0x78, 0x04, 0x03,// Y
    0x61, 0x51, 0x49, 0x45, 0x43,// Z
    0x00, 0x00, 0x7F, 0x41, 0x41,// [
    0x02, 0x04, 0x08, 0x10, 0x20,// "\"
    0x41, 0x41, 0x7F, 0x00, 0x00,// ]
    0x04, 0x02, 0x01, 0x02, 0x04,// ^
    0x40, 0x40, 0x40, 0x40, 0x40,// _
    0x00, 0x01, 0x02, 0x04, 0x00,// `
    0x20, 0x54, 0x54, 0x54, 0x78,// a
    0x7F, 0x48, 0x44, 0x44, 0x38,// b
    0x38, 0x44, 0x44, 0x44, 0x20,// c
    0x38, 0x44, 0x44, 0x48, 0x7F,// d
    0x38, 0x54, 0x54, 0x54, 0x18,// e
    0x08, 0x7E, 0x09, 0x01, 0x02,// f
    0x08, 0x14, 0x54, 0x54, 0x3C,// g
    0x7F, 0x08, 0x04, 0x04, 0x78,// h
    0x00, 0x44, 0x7D, 0x40, 0x00,// i
    0x20, 0x40, 0x44, 0x3D, 0x00,// j
    0x00, 0x7F, 0x10, 0x28, 0x44,// k
    0x00, 0x41, 0x7F, 0x40, 0x00,// l
    0x7C, 0x04, 0x18, 0x04, 0x78,// m
    0x7C, 0x08, 0x04, 0x04, 0x78,// n
    0x38, 0x44, 0x44, 0x44, 0x38,// o
    0x7C, 0x14, 0x14, 0x14, 0x08,// p
    0x08, 0x14, 0x14, 0x18, 0x7C,// q
    0x7C, 0x08, 0x04, 0x04, 0x08,// r
    0x48, 0x54, 0x54, 0x54, 0x20,// s
    0x04, 0x3F, 0x44, 0x40, 0x20,// t
    0x3C, 0x40, 0x40, 0x20, 0x7C,// u
    0x1C, 0x20, 0x40, 0x20, 0x1C,// v
    0x3C, 0x40, 0x30, 0x40, 0x3C,// w
    0x44, 0x28, 0x10, 0x28, 0x44,// x
    0x0C, 0x50, 0x50, 0x50, 0x3C,// y
    0x44, 0x64, 0x54, 0x4C, 0x44,// z
    0x00, 0x08, 0x36, 0x41, 0x00,// {
    0x00, 0x00, 0x7F, 0x00, 0x00,// |
    0x00, 0x41, 0x36, 0x08, 0x00,// }
    0x08, 0x08, 0x2A, 0x1C, 0x08,// -&gt;
    0x08, 0x1C, 0x2A, 0x08, 0x08 // &lt;-
};

byte[] coolFont = 
{
    0x00, 0x00, 0x00, 0x00, 0x00 // 20  
    ,0x00, 0x00, 0x5f, 0x00, 0x00 // 21 !
    ,0x00, 0x07, 0x00, 0x07, 0x00 // 22 "
    ,0x14, 0x7f, 0x14, 0x7f, 0x14 // 23 #
    ,0x24, 0x2a, 0x7f, 0x2a, 0x12 // 24 $
    ,0x23, 0x13, 0x08, 0x64, 0x62 // 25 %
    ,0x36, 0x49, 0x55, 0x22, 0x50 // 26 &amp;
    ,0x00, 0x05, 0x03, 0x00, 0x00 // 27 '
    ,0x00, 0x1c, 0x22, 0x41, 0x00 // 28 (
    ,0x00, 0x41, 0x22, 0x1c, 0x00 // 29 )
    ,0x14, 0x08, 0x3e, 0x08, 0x14 // 2a *
    ,0x08, 0x08, 0x3e, 0x08, 0x08 // 2b +
    ,0x00, 0x50, 0x30, 0x00, 0x00 // 2c ,
    ,0x08, 0x08, 0x08, 0x08, 0x08 // 2d -
    ,0x00, 0x60, 0x60, 0x00, 0x00 // 2e .
    ,0x20, 0x10, 0x08, 0x04, 0x02 // 2f /
    ,0x3e, 0x51, 0x49, 0x45, 0x3e // 30 0
    ,0x00, 0x42, 0x7f, 0x40, 0x00 // 31 1
    ,0x42, 0x61, 0x51, 0x49, 0x46 // 32 2
    ,0x21, 0x41, 0x45, 0x4b, 0x31 // 33 3
    ,0x18, 0x14, 0x12, 0x7f, 0x10 // 34 4
    ,0x27, 0x45, 0x45, 0x45, 0x39 // 35 5
    ,0x3c, 0x4a, 0x49, 0x49, 0x30 // 36 6
    ,0x01, 0x71, 0x09, 0x05, 0x03 // 37 7
    ,0x36, 0x49, 0x49, 0x49, 0x36 // 38 8
    ,0x06, 0x49, 0x49, 0x29, 0x1e // 39 9
    ,0x00, 0x36, 0x36, 0x00, 0x00 // 3a :
    ,0x00, 0x56, 0x36, 0x00, 0x00 // 3b ;
    ,0x08, 0x14, 0x22, 0x41, 0x00 // 3c &lt;
    ,0x14, 0x14, 0x14, 0x14, 0x14 // 3d =
    ,0x00, 0x41, 0x22, 0x14, 0x08 // 3e &gt;
    ,0x02, 0x01, 0x51, 0x09, 0x06 // 3f ?
    ,0x32, 0x49, 0x79, 0x41, 0x3e // 40 @
    ,0x7e, 0x11, 0x11, 0x11, 0x7e // 41 A
    ,0x7f, 0x49, 0x49, 0x49, 0x36 // 42 B
    ,0x3e, 0x41, 0x41, 0x41, 0x22 // 43 C
    ,0x7f, 0x41, 0x41, 0x22, 0x1c // 44 D
    ,0x7f, 0x49, 0x49, 0x49, 0x41 // 45 E
    ,0x7f, 0x09, 0x09, 0x09, 0x01 // 46 F
    ,0x3e, 0x41, 0x49, 0x49, 0x7a // 47 G
    ,0x7f, 0x08, 0x08, 0x08, 0x7f // 48 H
    ,0x00, 0x41, 0x7f, 0x41, 0x00 // 49 I
    ,0x20, 0x40, 0x41, 0x3f, 0x01 // 4a J
    ,0x7f, 0x08, 0x14, 0x22, 0x41 // 4b K
    ,0x7f, 0x40, 0x40, 0x40, 0x40 // 4c L
    ,0x7f, 0x02, 0x0c, 0x02, 0x7f // 4d M
    ,0x7f, 0x04, 0x08, 0x10, 0x7f // 4e N
    ,0x3e, 0x41, 0x41, 0x41, 0x3e // 4f O
    ,0x7f, 0x09, 0x09, 0x09, 0x06 // 50 P
    ,0x3e, 0x41, 0x51, 0x21, 0x5e // 51 Q
    ,0x7f, 0x09, 0x19, 0x29, 0x46 // 52 R
    ,0x46, 0x49, 0x49, 0x49, 0x31 // 53 S
    ,0x01, 0x01, 0x7f, 0x01, 0x01 // 54 T
    ,0x3f, 0x40, 0x40, 0x40, 0x3f // 55 U
    ,0x1f, 0x20, 0x40, 0x20, 0x1f // 56 V
    ,0x3f, 0x40, 0x38, 0x40, 0x3f // 57 W
    ,0x63, 0x14, 0x08, 0x14, 0x63 // 58 X
    ,0x07, 0x08, 0x70, 0x08, 0x07 // 59 Y
    ,0x61, 0x51, 0x49, 0x45, 0x43 // 5a Z
    ,0x00, 0x7f, 0x41, 0x41, 0x00 // 5b [
    ,0x02, 0x04, 0x08, 0x10, 0x20 // 5c \
    ,0x00, 0x41, 0x41, 0x7f, 0x00 // 5d ]
    ,0x04, 0x02, 0x01, 0x02, 0x04 // 5e ^
    ,0x40, 0x40, 0x40, 0x40, 0x40 // 5f _
    ,0x00, 0x01, 0x02, 0x04, 0x00 // 60 `
    ,0x20, 0x54, 0x54, 0x54, 0x78 // 61 a
    ,0x7f, 0x48, 0x44, 0x44, 0x38 // 62 b
    ,0x38, 0x44, 0x44, 0x44, 0x20 // 63 c
    ,0x38, 0x44, 0x44, 0x48, 0x7f // 64 d
    ,0x38, 0x54, 0x54, 0x54, 0x18 // 65 e
    ,0x08, 0x7e, 0x09, 0x01, 0x02 // 66 f
    ,0x0c, 0x52, 0x52, 0x52, 0x3e // 67 g
    ,0x7f, 0x08, 0x04, 0x04, 0x78 // 68 h
    ,0x00, 0x44, 0x7d, 0x40, 0x00 // 69 i
    ,0x20, 0x40, 0x44, 0x3d, 0x00 // 6a j 
    ,0x7f, 0x10, 0x28, 0x44, 0x00 // 6b k
    ,0x00, 0x41, 0x7f, 0x40, 0x00 // 6c l
    ,0x7c, 0x04, 0x18, 0x04, 0x78 // 6d m
    ,0x7c, 0x08, 0x04, 0x04, 0x78 // 6e n
    ,0x38, 0x44, 0x44, 0x44, 0x38 // 6f o
    ,0x7c, 0x14, 0x14, 0x14, 0x08 // 70 p
    ,0x08, 0x14, 0x14, 0x18, 0x7c // 71 q
    ,0x7c, 0x08, 0x04, 0x04, 0x08 // 72 r
    ,0x48, 0x54, 0x54, 0x54, 0x20 // 73 s
    ,0x04, 0x3f, 0x44, 0x40, 0x20 // 74 t
    ,0x3c, 0x40, 0x40, 0x20, 0x7c // 75 u
    ,0x1c, 0x20, 0x40, 0x20, 0x1c // 76 v
    ,0x3c, 0x40, 0x30, 0x40, 0x3c // 77 w
    ,0x44, 0x28, 0x10, 0x28, 0x44 // 78 x
    ,0x0c, 0x50, 0x50, 0x50, 0x3c // 79 y
    ,0x44, 0x64, 0x54, 0x4c, 0x44 // 7a z
    ,0x00, 0x08, 0x36, 0x41, 0x00 // 7b {
    ,0x00, 0x00, 0x7f, 0x00, 0x00 // 7c |
    ,0x00, 0x41, 0x36, 0x08, 0x00 // 7d }
    ,0x10, 0x08, 0x08, 0x10, 0x08 // 7e ~
    ,0x78, 0x46, 0x41, 0x46, 0x78 // 7f DEL
};

// This font be freely used without any restriction(It is placed in public domain)
byte[] basicFont =
{
    0x00, 0x00, 0x00, 0x00, 0x00 ,   // sp
    0x00, 0x00, 0x2f, 0x00, 0x00 ,   // !
    0x00, 0x07, 0x00, 0x07, 0x00 ,   // "
    0x14, 0x7f, 0x14, 0x7f, 0x14 ,   // #
    0x24, 0x2a, 0x7f, 0x2a, 0x12 ,   // $
    0x61, 0x66, 0x08, 0x33, 0x43 ,   // %
    0x36, 0x49, 0x55, 0x22, 0x50 ,   // &amp;
    0x00, 0x05, 0x03, 0x00, 0x00 ,   // '
    0x00, 0x1c, 0x22, 0x41, 0x00 ,   // (
    0x00, 0x41, 0x22, 0x1c, 0x00 ,   // )
    0x14, 0x08, 0x3E, 0x08, 0x14 ,   // *
    0x08, 0x08, 0x3E, 0x08, 0x08 ,   // +
    0x00, 0x00, 0x50, 0x30, 0x00 ,   // ,
    0x10, 0x10, 0x10, 0x10, 0x10 ,   // -
    0x00, 0x60, 0x60, 0x00, 0x00 ,   // .
    0x20, 0x10, 0x08, 0x04, 0x02 ,   // /
    0x3E, 0x51, 0x49, 0x45, 0x3E ,   // 0
    0x00, 0x42, 0x7F, 0x40, 0x00 ,   // 1
    0x42, 0x61, 0x51, 0x49, 0x46 ,   // 2
    0x21, 0x41, 0x45, 0x4B, 0x31 ,   // 3
    0x18, 0x14, 0x12, 0x7F, 0x10 ,   // 4
    0x27, 0x45, 0x45, 0x45, 0x39 ,   // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30 ,   // 6
    0x01, 0x71, 0x09, 0x05, 0x03 ,   // 7
    0x36, 0x49, 0x49, 0x49, 0x36 ,   // 8
    0x06, 0x49, 0x49, 0x29, 0x1E ,   // 9
    0x00, 0x36, 0x36, 0x00, 0x00 ,   // :
    0x00, 0x56, 0x36, 0x00, 0x00 ,   // ;
    0x08, 0x14, 0x22, 0x41, 0x00 ,   // &lt;
    0x14, 0x14, 0x14, 0x14, 0x14 ,   // =
    0x00, 0x41, 0x22, 0x14, 0x08 ,   // &gt;
    0x02, 0x01, 0x51, 0x09, 0x06 ,   // ?
    0x32, 0x49, 0x59, 0x51, 0x3E ,   // @
    0x7E, 0x11, 0x11, 0x11, 0x7E ,   // A
    0x7F, 0x49, 0x49, 0x49, 0x36 ,   // B
    0x3E, 0x41, 0x41, 0x41, 0x22 ,   // C
    0x7F, 0x41, 0x41, 0x22, 0x1C ,   // D
    0x7F, 0x49, 0x49, 0x49, 0x41 ,   // E
    0x7F, 0x09, 0x09, 0x09, 0x01 ,   // F
    0x3E, 0x41, 0x49, 0x49, 0x7A ,   // G
    0x7F, 0x08, 0x08, 0x08, 0x7F ,   // H
    0x00, 0x41, 0x7F, 0x41, 0x00 ,   // I
    0x20, 0x40, 0x41, 0x3F, 0x01 ,   // J
    0x7F, 0x08, 0x14, 0x22, 0x41 ,   // K
    0x7F, 0x40, 0x40, 0x40, 0x40 ,   // L
    0x7F, 0x02, 0x0C, 0x02, 0x7F ,   // M
    0x7F, 0x04, 0x08, 0x10, 0x7F ,   // N
    0x3E, 0x41, 0x41, 0x41, 0x3E ,   // O
    0x7F, 0x09, 0x09, 0x09, 0x06 ,   // P
    0x3E, 0x41, 0x51, 0x21, 0x5E ,   // Q
    0x7F, 0x09, 0x19, 0x29, 0x46 ,   // R
    0x46, 0x49, 0x49, 0x49, 0x31 ,   // S
    0x01, 0x01, 0x7F, 0x01, 0x01 ,   // T
    0x3F, 0x40, 0x40, 0x40, 0x3F ,   // U
    0x1F, 0x20, 0x40, 0x20, 0x1F ,   // V
    0x3F, 0x40, 0x38, 0x40, 0x3F ,   // W
    0x63, 0x14, 0x08, 0x14, 0x63 ,   // X
    0x07, 0x08, 0x70, 0x08, 0x07 ,   // Y
    0x61, 0x51, 0x49, 0x45, 0x43 ,   // Z
    0x00, 0x7F, 0x41, 0x41, 0x00 ,   // [
    0x55, 0x2A, 0x55, 0x2A, 0x55 ,   // checker pattern
    0x00, 0x41, 0x41, 0x7F, 0x00 ,   // ]
    0x04, 0x02, 0x01, 0x02, 0x04 ,   // ^
    0x40, 0x40, 0x40, 0x40, 0x40 ,   // _
    0x00, 0x01, 0x02, 0x04, 0x00 ,   // '
    0x20, 0x54, 0x54, 0x54, 0x78 ,   // a
    0x7F, 0x48, 0x44, 0x44, 0x38 ,   // b
    0x38, 0x44, 0x44, 0x44, 0x20 ,   // c
    0x38, 0x44, 0x44, 0x48, 0x7F ,   // d
    0x38, 0x54, 0x54, 0x54, 0x18 ,   // e
    0x08, 0x7E, 0x09, 0x01, 0x02 ,   // f
    0x0C, 0x52, 0x52, 0x52, 0x3E ,   // g
    0x7F, 0x08, 0x04, 0x04, 0x78 ,   // h
    0x00, 0x44, 0x7D, 0x40, 0x00 ,   // i
    0x20, 0x40, 0x44, 0x3D, 0x00 ,   // j
    0x7F, 0x10, 0x28, 0x44, 0x00 ,   // k
    0x00, 0x41, 0x7F, 0x40, 0x00 ,   // l
    0x7C, 0x04, 0x18, 0x04, 0x78 ,   // m
    0x7C, 0x08, 0x04, 0x04, 0x78 ,   // n
    0x38, 0x44, 0x44, 0x44, 0x38 ,   // o
    0x7C, 0x14, 0x14, 0x14, 0x08 ,   // p
    0x08, 0x14, 0x14, 0x18, 0x7C ,   // q
    0x7C, 0x08, 0x04, 0x04, 0x08 ,   // r
    0x48, 0x54, 0x54, 0x54, 0x20 ,   // s
    0x04, 0x3F, 0x44, 0x40, 0x20 ,   // t
    0x3C, 0x40, 0x40, 0x20, 0x7C ,   // u
    0x1C, 0x20, 0x40, 0x20, 0x1C ,   // v
    0x3C, 0x40, 0x30, 0x40, 0x3C ,   // w
    0x44, 0x28, 0x10, 0x28, 0x44 ,   // x
    0x0C, 0x50, 0x50, 0x50, 0x3C ,   // y
    0x44, 0x64, 0x54, 0x4C, 0x44 ,   // z
    0x00, 0x06, 0x09, 0x09, 0x06     // Degree symbol
};

byte[,,] numb = {
    {{0x00,0x00,0xc0,0xe0,0x70,0x30,0x30,0x30,0x70,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00}, // '0'
        {0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00},
        {0x00,0x07,0x1f,0x38,0x70,0x60,0x60,0x60,0x70,0x38,0x1f,0x07,0x00,0x00,0x00,0x00}},

    {{0x00,0x00,0x00,0xc0,0xc0,0xc0,0xf0,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // '1'
        {0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
        {0x00,0x00,0x00,0x60,0x60,0x60,0x7f,0x7f,0x60,0x60,0x60,0x00,0x00,0x00,0x00,0x00}},

    {{0x00,0xe0,0x60,0x70,0x30,0x30,0x30,0x30,0x60,0xe0,0x80,0x00,0x00,0x00,0x00,0x00},  // '2'
        {0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xf0,0x3f,0x1f,0x00,0x00,0x00,0x00,0x00},
        {0x00,0x70,0x78,0x7c,0x6e,0x67,0x63,0x61,0x60,0x60,0x60,0x60,0x00,0x00,0x00,0x00}},  

    {{0x00,0xe0,0x60,0x70,0x30,0x30,0x30,0x30,0x30,0x60,0xe0,0xc0,0x00,0x00,0x00,0x00},  // '3'
        {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x3c,0x7c,0xe7,0xc3,0x00,0x00,0x00,0x00},
        {0x00,0x38,0x30,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x1f,0x0f,0x00,0x00,0x00,0x00}},

    {{0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0x60,0xf0,0xf0,0x00,0x00,0x00,0x00,0x00},  // '4'
        {0x00,0xe0,0xf0,0xdc,0xce,0xc7,0xc1,0xc0,0xc0,0xff,0xff,0x00,0x00,0x00,0x00,0x00},
        {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x00,0x00,0x00}},

    {{0x00,0x00,0xf0,0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,0x00},  // '5'
        {0x00,0x00,0x1f,0x1f,0x18,0x18,0x18,0x18,0x30,0xf0,0xc0,0x00,0x00,0x00,0x00,0x00},
        {0x00,0x30,0x70,0x60,0x60,0x60,0x60,0x70,0x38,0x1f,0x0f,0x00,0x00,0x00,0x00,0x00}},

    {{0x00,0x00,0x80,0xc0,0xe0,0x60,0x30,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,0x00},  // '6'
        {0x00,0xfc,0xff,0x33,0x18,0x18,0x18,0x18,0x18,0x30,0xf0,0xc0,0x00,0x00,0x00,0x00},
        {0x00,0x07,0x1f,0x38,0x70,0x60,0x60,0x60,0x60,0x30,0x1f,0x0f,0x00,0x00,0x00,0x00}},

    {{0x00,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xb0,0xf0,0xf0,0x00,0x00,0x00,0x00,0x00},  // '7'
        {0x00,0x00,0x00,0x00,0xc0,0xf0,0x78,0x1e,0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
        {0x00,0x60,0x78,0x3e,0x0f,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},

    {{0x00,0x80,0xe0,0x60,0x30,0x30,0x30,0x30,0x30,0x60,0xe0,0xc0,0x00,0x00,0x00,0x00},  // '8'
        {0x00,0x87,0xe7,0x6c,0x18,0x18,0x30,0x30,0x38,0x6c,0xc7,0x83,0x00,0x00,0x00,0x00},
        {0x00,0x0f,0x3f,0x38,0x70,0x60,0x60,0x60,0x60,0x30,0x1f,0x0f,0x00,0x00,0x00,0x00}},

    {{0x00,0x80,0xc0,0x60,0x30,0x30,0x30,0x30,0x70,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00},  // '9'
        {0x00,0x0f,0x3f,0x30,0x60,0x60,0x60,0x60,0x60,0x30,0xff,0xff,0x00,0x00,0x00,0x00},
        {0x00,0x00,0x00,0x60,0x60,0x60,0x60,0x70,0x38,0x1e,0x0f,0x03,0x00,0x00,0x00,0x00}},

    {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // '.'
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0}},

    {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, // '+'
        {0,64,64,64,248,64,64,64,0,0,0,0,0,0,0, 0},
        {0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0}},

    {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     // '-'
        {0,64,64,64,64,64,64,64,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
};

byte[] bignum =
{
    0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Code for char .
    0x04, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // Code for char -
    0x0A, 0x00, 0x00, 0xF0, 0x07, 0xFC, 0x1F, 0xFE, 0x3F, 0x0E, 0x38, 0x06, 0x30, 0x0E, 0x38, 0xFE, 0x3F, 0xFC, 0x1F, 0xF0, 0x07, 0x00, 0x00, // Code for char 0
    0x0B, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x0C, 0x30, 0x0E, 0x30, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, // Code for char 1
    0x0A, 0x00, 0x00, 0x18, 0x38, 0x1C, 0x3C, 0x1E, 0x3E, 0x06, 0x37, 0x86, 0x33, 0xC6, 0x31, 0xFE, 0x31, 0xFC, 0x30, 0x78, 0x30, 0x00, 0x00, // Code for char 2
    0x0A, 0x00, 0x00, 0x18, 0x0C, 0x1C, 0x1C, 0x1E, 0x3C, 0xC6, 0x30, 0xC6, 0x30, 0xC6, 0x31, 0xFE, 0x3F, 0xBC, 0x1F, 0x3C, 0x0F, 0x00, 0x00, // Code for char 3
    0x0B, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x07, 0xE0, 0x06, 0x38, 0x06, 0x1E, 0x06, 0xFE, 0x3F, 0xFE, 0x3F, 0xFE, 0x3F, 0x00, 0x06, 0x00, 0x06, // Code for char 4
    0x0A, 0x00, 0x00, 0xFE, 0x0C, 0xFE, 0x1C, 0xC6, 0x3C, 0x66, 0x38, 0x66, 0x30, 0xE6, 0x38, 0xE6, 0x3F, 0xC6, 0x1F, 0x80, 0x0F, 0x00, 0x00, // Code for char 5
    0x0A, 0x00, 0x00, 0xF0, 0x07, 0xFC, 0x1F, 0xFC, 0x3F, 0x8E, 0x38, 0xC6, 0x30, 0xC6, 0x30, 0xCE, 0x3F, 0x8C, 0x1F, 0x08, 0x0F, 0x00, 0x00, // Code for char 6
    0x0A, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x38, 0x06, 0x3F, 0xC6, 0x3F, 0xE6, 0x03, 0xFE, 0x00, 0x3E, 0x00, 0x0E, 0x00, 0x00, 0x00, // Code for char 7
    0x0A, 0x00, 0x00, 0x38, 0x0F, 0xFC, 0x1F, 0xFE, 0x3F, 0xC6, 0x30, 0xC6, 0x30, 0xC6, 0x30, 0xFE, 0x3F, 0xFC, 0x1F, 0x38, 0x0F, 0x00, 0x00, // Code for char 8
    0x0A, 0x00, 0x00, 0x78, 0x08, 0xFC, 0x18, 0xFE, 0x39, 0x86, 0x31, 0x86, 0x31, 0x86, 0x38, 0xFE, 0x1F, 0xFC, 0x1F, 0xF0, 0x07, 0x00, 0x00, // Code for char 9
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // Code for char blank char
};


byte[] tempSymbol =
{
     0x00,0x00
    ,0x3c,0x00
    ,0x43,0xfc
    ,0x58,0x06
    ,0x5f,0x52
    ,0x58,0x06
    ,0x43,0xfc
    ,0x3c,0x50
};


byte[] edenlogo =
{
    0x00, 0x00, 0x00, //                       
    0x3F, 0x80, 0x00, //   #######             
    0x7F, 0xC0, 0x00, //  #########            
    0x7F, 0xE0, 0x00, //  ##########           
    0x7F, 0xF7, 0xC0, //  ########### #####    
    0x70, 0xFF, 0xE0, //  ###    ###########   
    0x60, 0x3F, 0xF0, //  ##       ##########  
    0x60, 0x1E, 0x78, //  ##        ####  #### 
    0x60, 0x08, 0x18, //  ##         #      ## 
    0x20, 0x00, 0x08, //   #                 # 
    0x30, 0x00, 0x08, //   ##                # 
    0x18, 0x01, 0xF8, //    ##          ###### 
    0x1E, 0x00, 0xF0, //    ####         ####  
    0x3F, 0xC0, 0x00, //   ########            
    0x7F, 0xE0, 0x00, //  ##########           
    0x7F, 0xF8, 0x00, //  ############         
    0x71, 0xFC, 0x00, //  ###   #######        
    0x60, 0x1C, 0x00, //  ##        ###        
    0x30, 0x0C, 0x00, //   ##        ##        
    0x18, 0x04, 0x00, //    ##        #        
    0x3F, 0x04, 0x00, //   ######     #        
    0x7F, 0xFC, 0x00, //  #############        
    0x7F, 0xFF, 0x80, //  ################     
    0x7F, 0xFF, 0xE0, //  ##################   
    0x60, 0x7F, 0xF0, //  ##      ###########  
    0x30, 0x03, 0xF0, //   ##          ######  
    0x3C, 0x00, 0x00, //   ####                
    0x3F, 0xC0, 0x00, //   ########            
    0x7F, 0xE0, 0x00, //  ##########           
    0x7F, 0xF0, 0x00, //  ###########          
    0x7F, 0xF8, 0x00, //  ############         
    0x61, 0x1C, 0x00, //  ##    #   ###        
    0x61, 0x0C, 0x00, //  ##    #    ##        
    0x21, 0x84, 0x00, //   #    ##    #        
    0x30, 0xFC, 0x00, //   ##    ######        
    0x10, 0x7C, 0x00, //    #     #####        
    0x58, 0x10, 0x00, //  # ##      #          
    0x7E, 0x00, 0x00, //  ######               
    0x7F, 0xF0, 0x00, //  ###########          
    0x7F, 0xFC, 0x00, //  #############        
    0x1F, 0xFC, 0x00, //    ###########        
    0x00, 0xFC, 0x00, //         ######        
    0x00, 0x1C, 0x00, //            ###        
    0x00, 0x0C, 0x00, //             ##        
    0x3F, 0x0C, 0x00, //   ######    ##        
    0x7F, 0xFC, 0x00, //  #############        
    0x7F, 0xFC, 0x00, //  #############        
    0x7F, 0xFC, 0x00, //  #############        
    0x20, 0x10, 0x00, //   #        #          
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x00, 0x00, 0x00, //                       
    0x1F, 0x03, 0xF8, //    #####      ####### 
    0x20, 0x80, 0x40, //   #     #        #    
    0x3C, 0x80, 0x40, //   ####  #        #    
    0x00, 0x03, 0xF8, //               ####### 
    0x1C, 0x00, 0x00, //    ###                
    0x2A, 0x01, 0xC0, //   # # #        ###    
    0x2C, 0x02, 0x20, //   # ##        #   #   
    0x00, 0x02, 0x20, //               #   #   
    0x3E, 0x01, 0xC0, //   #####        ###    
    0x02, 0x00, 0x00, //       #               
    0x02, 0x03, 0xE0, //       #       #####   
    0x3C, 0x00, 0x20, //   ####            #   
    0x00, 0x00, 0x20, //                   #   
    0x00, 0x03, 0xE0, //               #####   
    0x3E, 0x80, 0x20, //   ##### #         #   
    0x00, 0x03, 0xC0, //               ####    
    0x1C, 0x00, 0x00, //    ###                
    0x2A, 0x01, 0xC0, //   # # #        ###    
    0x2C, 0x02, 0xA0, //   # ##        # # #   
    0x00, 0x02, 0xC0, //               # ##    
    0x00, 0x00, 0x00, //                       
};




byte[] hglogo =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, //                                   ####    
    0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, //                                   #####   
    0x00, 0x00, 0x00, 0x7C, 0x03, 0x00, //                          #####        ##  
    0x00, 0x00, 0x00, 0x7F, 0xE1, 0x80, //                          ##########    ## 
    0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, //                           ############### 
    0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, //                               ########### 
    0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, //                                  #########
    0x00, 0x00, 0x00, 0x00, 0x61, 0x80, //                                  ##    ## 
    0x00, 0x00, 0x00, 0x78, 0x60, 0x00, //                          ####    ##       
    0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, //                          ##########       
    0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, //                          #############    
    0x00, 0x00, 0x00, 0x07, 0xFF, 0x80, //                              ############ 
    0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, //                                   ########
    0x00, 0x00, 0x00, 0x1E, 0x03, 0xC0, //                            ####       ####
    0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, //                           #######         
    0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, //                          ##########       
    0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, //                          ##########       
    0x00, 0x00, 0x00, 0x60, 0x70, 0x00, //                          ##      ###      
    0x00, 0x00, 0x00, 0x30, 0x10, 0x00, //                           ##       #      
    0x00, 0x00, 0x00, 0x38, 0x10, 0x00, //                           ###      #      
    0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, //                            #########      
    0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, //                              ######       
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, //                                 #         
    0x00, 0x1E, 0x00, 0x7C, 0x80, 0x00, //            ####          #####  #         
    0x38, 0x7F, 0xC0, 0x7F, 0xE0, 0x00, //   ###    #########       ##########       
    0x7C, 0xFF, 0xE0, 0x3F, 0xF0, 0x00, //  #####  ###########       ##########      
    0x4C, 0xF3, 0xF0, 0x03, 0xF0, 0x00, //  #  ##  ####  ######          ######      
    0x44, 0xC0, 0x70, 0x00, 0x70, 0x00, //  #   #  ##       ###             ###      
    0x4C, 0x80, 0x38, 0x78, 0x30, 0x00, //  #  ##  #         ###    ####     ##      
    0x70, 0x80, 0x18, 0x7F, 0xF0, 0x00, //  ###    #          ##    ###########      
    0x3F, 0xC0, 0x08, 0x7F, 0xF0, 0x00, //   ########          #    ###########      
    0x1F, 0xF8, 0x08, 0x07, 0xF0, 0x00, //    ##########       #        #######      
    0x07, 0xFC, 0xD8, 0x00, 0x60, 0x00, //      #########  ## ##            ##       
    0x00, 0x7C, 0xF0, 0x00, 0x30, 0x00, //          #####  ####              ##      
    0x00, 0x00, 0x60, 0x3F, 0x30, 0x00, //                  ##       ######  ##      
    0x03, 0xE0, 0x00, 0x7F, 0xF0, 0x00, //       #####              ###########      
    0x07, 0xF8, 0x00, 0x7F, 0xF0, 0x00, //      ########            ###########      
    0x07, 0xFC, 0x00, 0x30, 0xE0, 0x00, //      #########            ##    ###       
    0x06, 0x7E, 0x00, 0x30, 0x00, 0x00, //      ##  ######           ##              
    0x06, 0x27, 0x00, 0x3F, 0x00, 0x00, //      ##   #  ###          ######          
    0x06, 0x23, 0x00, 0x3F, 0xC0, 0x00, //      ##   #   ##          ########        
    0x02, 0x1B, 0x00, 0x7F, 0xE0, 0x00, //       #    ## ##         ##########       
    0x03, 0x1E, 0x00, 0x73, 0xF0, 0x00, //       ##   ####          ###  ######      
    0x07, 0x80, 0x00, 0x62, 0x30, 0x00, //      ####                ##   #   ##      
    0x07, 0xF8, 0x00, 0x33, 0x10, 0x00, //      ########             ##  ##   #      
    0x07, 0xFF, 0x00, 0x11, 0xF0, 0x00, //      ###########           #   #####      
    0x00, 0xFF, 0x00, 0x00, 0xF0, 0x00, //         ########                ####      
    0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, //             ####                          
    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, //               #                           
    0x03, 0xC3, 0x00, 0x00, 0x00, 0x00, //       ####    ##                          
    0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, //      ###########                          
    0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, //      ###########                          
    0x06, 0x1E, 0x00, 0x00, 0x00, 0x00, //      ##    ####                           
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, //       #                                   
    0x03, 0x80, 0x00, 0x00, 0x00, 0x00, //       ###                                 
    0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, //      ########                             
    0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, //      ###########                          
    0x06, 0xFF, 0x70, 0x00, 0x00, 0x00, //      ## ######## ###                      
    0x06, 0x03, 0x70, 0x00, 0x00, 0x00, //      ##       ## ###                      
    0x03, 0x00, 0x60, 0x00, 0x00, 0x00, //       ##         ##                       
    0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, //       ######                              
    0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, //      #########                            
    0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, //      ##########                           
    0x06, 0x7E, 0x00, 0x00, 0x00, 0x00, //      ##  ######                           
    0x06, 0x23, 0x00, 0x00, 0x00, 0x00, //      ##   #   ##                          
    0x06, 0x31, 0x00, 0x00, 0x00, 0x00, //      ##   ##   #                          
    0x01, 0x1F, 0x00, 0x00, 0x00, 0x00, //        #   #####                          
    0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, //             ###                           
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //                                           
};




byte[] pi_logo = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0010 (16) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFC, 0xAE, 0x0E, 0x0E, 0x06, 0x0E, 0x06,   // 0x0020 (32) pixels
    0xCE, 0x86, 0x8E, 0x0E, 0x0E, 0x1C, 0xB8, 0xF0, 0xF8, 0x78, 0x38, 0x1E, 0x0E, 0x8E, 0x8E, 0xC6,   // 0x0030 (48) pixels
    0x0E, 0x06, 0x0E, 0x06, 0x0E, 0x9E, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0040 (64) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0050 (80) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0060 (96) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0xFE,   // 0x0070 (112) pixels
    0xF8, 0xF0, 0x60, 0x60, 0xE0, 0xE1, 0xE3, 0xF7, 0x7E, 0x3E, 0x1E, 0x1F, 0x1F, 0x1F, 0x3E, 0x7E,   // 0x0080 (128) pixels
    0xFB, 0xF3, 0xE1, 0xE0, 0x60, 0x70, 0xF0, 0xF8, 0xBE, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00,   // 0x0090 (144) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00A0 (160) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00B0 (176) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0,   // 0x00C0 (192) pixels
    0xE0, 0xFC, 0xFE, 0xFF, 0xF3, 0x38, 0x38, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x3C, 0x38, 0xF8,   // 0x00D0 (208) pixels
    0xF8, 0x38, 0x3C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x38, 0x38, 0xF3, 0xFF, 0xFF, 0xF8, 0xE0,   // 0x00E0 (224) pixels
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00F0 (240) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0100 (256) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0110 (272) pixels
    0x00, 0x7F, 0xFF, 0xE7, 0xC3, 0xC1, 0xE0, 0xFF, 0xFF, 0x78, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0,   // 0x0120 (288) pixels
    0x60, 0x78, 0x38, 0x3F, 0x3F, 0x38, 0x38, 0x60, 0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF8, 0x7F,   // 0x0130 (304) pixels
    0xFF, 0xE0, 0xC1, 0xC3, 0xE7, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0140 (320) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0150 (336) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0160 (352) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xFF, 0xF1, 0xE0, 0xC0, 0x80, 0x01,   // 0x0170 (368) pixels
    0x03, 0x9F, 0xFF, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFF, 0x9F,   // 0x0180 (384) pixels
    0x03, 0x01, 0x80, 0xC0, 0xE0, 0xF1, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0190 (400) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01A0 (416) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01B0 (432) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,   // 0x01C0 (448) pixels
    0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3B, 0x71, 0x60, 0x60, 0x60, 0x60, 0x60, 0x71,   // 0x01D0 (464) pixels
    0x3B, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01E0 (480) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01F0 (496) pixels
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

var sdaPin = ConnectorPin.P1Pin03;
var sclPin = ConnectorPin.P1Pin05;
var lcdClock = ConnectorPin.P1Pin23;
var lcdMiso = ConnectorPin.P1Pin21;
var lcdMosi = ConnectorPin.P1Pin19;
var lcdCs = ConnectorPin.P1Pin26;

var pinCd = sdaPin.ToProcessor();
var pinRes = sclPin.ToProcessor();

var driver = GpioConnectionSettings.DefaultDriver;
bool isInitialized = false;


var sendCommand = new Func&lt;Raspberry.IO.SerialPeripheralInterface.SpiConnection, byte, bool&gt;((connection, command)=&gt;{
    driver.Write(pinCd, false);
    connection.Write(command, 8);
    return true;
});


var spiSetup = new Func&lt;Raspberry.IO.SerialPeripheralInterface.SpiConnection, bool&gt;((connection)=&gt;{

    // extended function set
    sendCommand(connection, CmdFunctionSet | CmdExtendedInstr);
    // set bias
    sendCommand(connection, CmdSetBias | 0x04);
    // set VOP (contrast)
    sendCommand(connection, CmdSetVop | 80);

    sendCommand(connection, CmdSetTemp | 0x01);
    sendCommand(connection, CmdSetYAddr | 0x00);

    sendCommand(connection, CmdFunctionSet);
    sendCommand(connection, CmdSetYAddr | 0x00);
    sendCommand(connection, CmdSetXAddr | 0x00);    

    return true;

});

var blankScreen = new Func&lt;bool&gt;(()=&gt;{
    return false;
});


driver.Allocate(pinCd, PinDirection.Output);
driver.Allocate(pinRes, PinDirection.Output);


When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

while (Program.IsEnabled)
{

  	Pause(1);
    if (edenModule.Parameter("Spi.Locked").Value == "1") continue;

    Program.Parameter("Spi.Locked").Value = "1";

    using (var spiConnection = new Raspberry.IO.SerialPeripheralInterface.SpiConnection(driver.Out(lcdClock),
        driver.Out(lcdCs),
        driver.In(lcdMiso),
        driver.Out(lcdMosi),
        (Raspberry.IO.SerialPeripheralInterface.Endianness)0))
    {

        spiConnection.SelectSlave();


        // refactor to sendData
        var drawStride = new Func&lt;int, int, byte, bool&gt;((lx, ly, stride)=&gt;{
            if (lx &gt;= LCD_X_RES || ly &gt;= LCD_Y_RES)
                return false;

            driver.Write(pinCd, true);
            spiConnection.Write(stride, 8);
            driver.Write(pinCd, false);

            return true;
        });


        var lcdWrite = new Func&lt;int, int, int, string, int&gt;((row, col, fontid, text)=&gt;{
            int pixelWidth = 0;
            sendCommand(spiConnection, (byte)(CmdSetYAddr | row));
            sendCommand(spiConnection, (byte)(CmdSetXAddr | col));
            switch (fontid)
            {
            case 0:
            case 1:
                for (int c = 0; c &lt; text.Length &amp;&amp; c &lt; 16; c++)
                {
                    string b = Convert.ToString(nanoFont[text[c]-32], 2).PadLeft(32, '0');
                    string[] data = new string[8];
                    data[0] = b.Substring(20, 4);
                    data[1] = b.Substring(16, 4);
                    data[2] = b.Substring(12, 4);
                    data[3] = b.Substring(8, 4);
                    data[4] = b.Substring(4, 4);
                    data[5] = b.Substring(0, 4);
                    data[6] = "0000";
                    data[7] = "0000";
                    for (int sz = 0; sz &lt; 4; sz++)
                    {
                        string btc = "";
                        for (int sk = 0; sk &lt;8; sk++)  
                        {
                            btc += data[sk][sz];
                        }
                        byte bindata = Convert.ToByte(btc, 2);
                      	if ((fontid &amp; 1) == 1) bindata = (byte)~bindata;
                        drawStride(0, 0, bindata);
                        pixelWidth++;
                    }
                    drawStride(0, 0, (byte)((fontid &amp; 1) == 1 ? 0xFF : 0x00));
                    pixelWidth++;
                }
                break;
            default:
                int fontBytes = 5;
                for (int c = 0; c &lt; text.Length &amp;&amp; c &lt; 16; c++)
                {
                    for (int cx = 0; cx &lt; fontBytes; cx++)
                    {
                        int ch = smallFont[((text[c]-32)*fontBytes)+cx];
                        drawStride(0, 0, (byte)(ch));           
                        pixelWidth++;
                    }
                    // 1 px spacing
                    drawStride(0, 0, 0x00);
                    pixelWidth++;
                }
                break; 
            }
            return pixelWidth;
        });      

        var lcdWriteLine = new Func&lt;int, int, string, bool&gt;((row, fontid, text)=&gt;{
            int pixelWidth = lcdWrite(row, 0, fontid, text);
            // clear to end of line
            for(int cx = pixelWidth; cx &lt; 84; cx++)
            {
                drawStride(0, 0, (byte)((fontid &amp; 1) == 1 ? 0xFF : 0x00)); // inverse bit
            }
            return true;
        });


        /*
        var setPage = new Func&lt;int, bool&gt;((page) =&gt;{

            // Enter function mode
            driver.Write(pinCd, false);
            spiConnection.Write(0x20 | 0x01, 8);

            driver.Write(pinCd, false);
            spiConnection.Write(0x04 | 0x00, 8);

            driver.Write(pinCd, false);
            spiConnection.Write((byte)(0x40 | (page*(LCD_Y_RES / 2))), 8);

            // Exit function mode
            driver.Write(pinCd, false);
            spiConnection.Write(0x20 | 0x00, 8);

            return true;

        });
   		*/



        int x = 0, y = 0;



        if (!isInitialized)
        {

            driver.Write(pinRes, false);
            Pause(0.5);
            driver.Write(pinRes, true);

        }    

        spiSetup(spiConnection);  

        if (!isInitialized)
        {

            sendCommand(spiConnection, CmdDispControl | CmdDispBlank);
            /*
    		// clear screen
            for (y = 0; y &lt; 6; y++)  
            {

                sendCommand(spiConnection, (byte)(CmdSetYAddr | y));
                sendCommand(spiConnection, CmdSetXAddr | 0x00);
                //driver.Write(pinCd, false);
                //spiConnection.Write((byte)(0x40 | y), 8);
                //driver.Write(pinCd, false);
                //spiConnection.Write((byte)(0x80 | 0x00), 8);

                for (x = 0; x &lt; 84; x++)
                {
                    drawStride(x, y, 0x00);
                }
            }
            */


          	var drawImage = new Func&lt;int, int, int, byte[], bool&gt;((row, col, lines, data)=&gt;{

                for (int cy = 0; cy &lt; lines; cy++)  
                {

                    sendCommand(spiConnection, (byte)(CmdSetYAddr | row + cy));
                    sendCommand(spiConnection, (byte)(CmdSetXAddr | col));

                    for (int cx = 0; cx &lt; 84; cx++)
                    {
                        int i = (cx * lines) + lines -  cy - 1;
                        if (i &gt;= data.Length)
                        {
                          	// clear to end of line
                            //drawStride(0, 0, 0x00);
                          	break;
                        }
                        else
                        {
                            drawStride(0, 0, (byte)(data[i]));          
                        }
                    }
                }
              
              	return true;
            });
          
          drawImage(0, 0, 3, edenlogo);
          
          lcdWriteLine(3, 0, "");
          lcdWriteLine(4, 0, "");

          drawImage(3, 32, 2, tempSymbol);

          sendCommand(spiConnection, CmdDispControl | CmdDispNormal);

        }
        else
        {

            //       driver.Write(pinRes, false);
            //    Pause(0.5);
            //    driver.Write(pinRes, true);


            //   sendCommand(spiConnection, CmdFunctionSet);
            //    sendCommand(spiConnection, CmdSetYAddr | 0x00);
            //   sendCommand(spiConnection, CmdSetXAddr | 0x00);
            //   sendCommand(spiConnection, CmdDispControl | CmdDispNormal);
        }

      
        string txt = (temperature.DecimalValue * 100).ToString();
        if (!txt.StartsWith("-")) txt = "+" + txt;
        if (txt.Length &gt;= 4) txt = txt.Substring(0, 3) + "." + txt.Substring(3, 1);

        for (y = 0; y &lt; 2; y++)
        {
            //  new line
            sendCommand(spiConnection, (byte)(CmdSetYAddr | (3 + y)));
            sendCommand(spiConnection, CmdSetXAddr | 0x2B);

            int cx = 0;
            for(int s = 0; s &lt; txt.Length; s++)
            {
                var c = txt[s];
                int idx = (int)(txt[s]) - 46;
                //if (oldTemperature.Length != txt.Length || oldTemperature[s] != c)
                {
                    if (c == '+' || c == ' ') idx = 12;
                    else if (c == '.' || c == ',') idx = 0;
                    else if (c == '-' || idx &lt; 1) idx = 1;

                    for (x = 0; x &lt; bignum[idx*23]; x++) 
                    {
                        byte xv = (byte)(bignum[(idx*23) + y + (x*2) + 1]);
                        drawStride(x, y, xv);
                    }

                }
                cx += bignum[idx*23];
            }
        }
        oldTemperature = txt;


        var weatherApp = Modules.WithName("Weather Underground").Get();
        var location = weatherApp.Parameter("Conditions.City");
        var conditions = weatherApp.Parameter("Conditions.Description");
        var locationTemp = weatherApp.Parameter("Conditions.TemperatureC");
        var locationTempF = weatherApp.Parameter("Conditions.TemperatureF");

        lcdWriteLine(5, 1, " " + location.Value.ToUpper() + " " + locationTemp.Value + "C");
        Pause(2);
        lcdWriteLine(5, 1, " " + location.Value.ToUpper() + " " + locationTempF.Value + "F");
        Pause(2);
        lcdWriteLine(5, 1, " " + conditions.Value.ToUpper());

        if (!isInitialized)
        {
            //lcdWrite(0, 30, 0, "-----------!");
            lcdWrite(1, 56, 0, "Hello");
            lcdWrite(2, 56, 0, "World!");
            //lcdWrite(2, 56, 0, "      ");
            isInitialized = true;    
        }
        else
        {
            var dt = DateTime.Now.ToString().Split(' ');
            lcdWrite(0, 33, 0, dt[0]); // date
            lcdWrite(4, 2, 0, dt[1].Substring(0, 5)); // time
            lcdWrite(3, 2, 0, DateTime.Now.DayOfWeek.ToString().Substring(0, 3).ToUpper());
        }

    }
    Program.Parameter("Spi.Locked").Value = "0";

    Pause(30);


}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>61</Address>
    <Name>Olimex - Nokia 3310 LCD display</Name>
    <Description>Using a Nokia 3310 lcd display.
( see http://homegenie.it/docs/diy/eden.php )</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.

Program.Setup(()=&gt;{
  	Program.AddInputField("LedsNumber", "1", "Number of chained RGB leds");
});
return true;
</ScriptCondition>
    <ScriptSource>var rgbModules = Modules.InDomain("HomeAutomation.GroveRGB");

int ledsCount = (int)Program.InputField("LedsCount").DecimalValue;

var driver = GpioConnectionSettings.DefaultDriver;
var gpioOut1 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin13.ToProcessor());
var gpioOut2 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin07.ToProcessor());
var groveRgb = new GroveRgbConnection(gpioOut1, gpioOut2, ledsCount);

Program.AddVirtualModules("HomeAutomation.GroveRGB", "Dimmer", "homegenie/generic/colorlight", 1, ledsCount);
for(int x = 0; x &lt; ledsCount; x++)
{
  	var module = rgbModules.WithAddress((x+1).ToString()).Get();
	groveRgb.SetColor(x, new RgbColor(0, 0, 0));
  	module.Parameter("Status.Level").Value = "0";
  	module.Parameter("Status.ColorHsb").Value = "1,1,1";
}

When.ProgramStopping(()=&gt;{
  ((IDisposable)groveRgb).Dispose();
  return true;
});

When.WebServiceCallReceived("HomeAutomation.GroveRGB", ( args ) =&gt; 
{
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
    try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = rgbModules.WithAddress(lightnumber).Get();
      int lightId = int.Parse(lightnumber) - 1;
      //
      switch(command)
      {
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
        case "Control.On":
        	string[] memory = module.Parameter("Status.ColorHsb").Value.Split(',');
        	groveRgb.SetColor(lightId, RgbColor.FromHsv(double.Parse(memory[0], System.Globalization.CultureInfo.InvariantCulture),
                        double.Parse(memory[1], System.Globalization.CultureInfo.InvariantCulture),
                        double.Parse(memory[2], System.Globalization.CultureInfo.InvariantCulture)));
        	Program.RaiseEvent(module, "Status.Level", "1", "Groove RGB Led");
            Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
        case "Control.Off":
			groveRgb.SetColor(lightId, new RgbColor());
        	Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
        	break;
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
				groveRgb.SetColor(lightId, new RgbColor(255, 255, 255));
              	Program.RaiseEvent(module, "Status.Level", "1", "Groove RGB Led");
            }
        	else
            {
				groveRgb.SetColor(lightId, new RgbColor());
	        	Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
            }
        	break;
        case "Control.Level":
    	    //bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
            //Program.RaiseEvent(module, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "Hue Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
        	string[] values = parameter.Split(',');
        	//double transition = 5;
        	//if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
          	groveRgb.SetColor(lightId, RgbColor.FromHsv(double.Parse(values[0], System.Globalization.CultureInfo.InvariantCulture),
                        double.Parse(values[1], System.Globalization.CultureInfo.InvariantCulture),
                        double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)));
            Program.RaiseEvent(module, "Status.Level", (double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)).ToString(), "Color Light");
            Program.RaiseEvent(module, "Status.ColorHsb", parameter, "Color Light");
        	break; 
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
      
    	Program.Notify("Grove RGB ERROR!", e.Message);
                       
    }
    return "{ 'ResponseValue' : 'ERROR' }";
}); 


Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>62</Address>
    <Name>Grove - Chainable RGB Led</Name>
    <Description>Chainable RGB color leds modules wired to GPIO#4 and GPIO#21/27 (power with 3v3).
http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this Setup delegate will be executed once, when program become active
Program.Setup(()=&gt;
{
  
  // Add analog channels modules
  Program.AddVirtualModule("Components.MCP3008", "CH0", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH1", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH2", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH3", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH4", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH5", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH6", "Sensor", "homegenie/generic/sensor");
  Program.AddVirtualModule("Components.MCP3008", "CH7", "Sensor", "homegenie/generic/sensor");

  Program.AddFeatureTextInput("Components.MCP3008", "Sensor", "AnalogInput.ParameterName", "Parameter name to store computed value");
  Program.AddFeatureTextInput("Components.MCP3008", "Sensor", "AnalogInput.ParameterFactor", "Multiply read raw value by");
  Program.AddFeatureTextInput("Components.MCP3008", "Sensor", "AnalogInput.ParameterAdjust", "Adjust computed value by");
  Program.AddFeatureTextInput("Components.MCP3008", "Sensor", "AnalogInput.StabilizeValue", "Soft stabilize value (yes/no)");
  
  // add program configuration parameters
  Program.AddInputField("PollFrequency", "10", "Pause between updates (seconds)");

}); // end program setup

return true;
</ScriptCondition>
    <ScriptSource>const decimal voltage = 3.3m;

var adcClock = ConnectorPin.P1Pin23.ToProcessor();
var adcMiso = ConnectorPin.P1Pin21.ToProcessor();
var adcMosi = ConnectorPin.P1Pin19.ToProcessor();
var adcCs = ConnectorPin.P1Pin24.ToProcessor();

/*  
// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.MCP3008/0/Sensor.Temperature
When.WebServiceCallReceived("Components.MCP3008/0/Sensor.Temperature", ( args ) =&gt; 
{
  	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.MCP3008/0/Sensor.Luminance
When.WebServiceCallReceived("Components.MCP3008/0/Sensor.Luminance", ( args ) =&gt; 
{
	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Luminance").Value + "' }";
});
*/

var valuesHistory = new Queue&lt;decimal&gt;[8];
for (int q = 0; q &lt; 8; q++) valuesHistory[q] = new Queue&lt;decimal&gt;();

var driver = GpioConnectionSettings.DefaultDriver;

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

while (Program.IsEnabled)
{
  	
  	//uncomment this line when using Nokia3110 LCD display
    //if (Modules.WithAddress("61").Get().Parameter("Spi.Locked").Value == "1")	continue;
  
    Program.Parameter("Spi.Locked").Value = "1";
	{
		driver.Allocate(adcClock, PinDirection.Output);
		driver.Allocate(adcCs, PinDirection.Output);
		driver.Allocate(adcMosi, PinDirection.Output);
		driver.Allocate(adcMiso, PinDirection.Input);
  
		using (var adcConnection = new Mcp3008SpiConnection(
				driver.Out(adcClock),
				driver.Out(adcCs),
				driver.In(adcMiso),
				driver.Out(adcMosi)))
		{
          /*
          while(Program.IsEnabled)
          {
          	var v = adcConnection.Read((Raspberry.IO.Components.Converters.Mcp3008.Mcp3008Channel)(0));
          	Program.Notify("CH0", "V = " + v.Value);
			Pause(1);
          }
          */
          	// read channel voltage values and map/normalize configured parameter names
          	for(int x = 0; x &lt; 8; x++)
            {
              	var channelPrefix = "CH" + x.ToString();
            	var channelModule = Modules.InDomain("Components.MCP3008").WithAddress(channelPrefix).Get();
              
              	var parameterName = channelModule.Parameter("AnalogInput.ParameterName").Value;
              	var parameterFactor = (decimal)channelModule.Parameter("AnalogInput.ParameterFactor").DecimalValue;
              	var parameterAdjust = (decimal)channelModule.Parameter("AnalogInput.ParameterAdjust").DecimalValue;
              
              	if (parameterFactor != 0)
                {
                    var v = adcConnection.Read((Raspberry.IO.Components.Converters.Mcp3008.Mcp3008Channel)(x)).Value;
                  	valuesHistory[x].Enqueue(v);
                  
                  	// Software value stabilization
                  	if (channelModule.Parameter("AnalogInput.StabilizeValue").Value.ToLower().StartsWith("y"))
                    {
                        decimal avg = 0;
                        foreach(decimal sv in valuesHistory[x]) avg += sv;
                        v = (decimal)Math.Round(avg / (decimal)valuesHistory[x].Count, 0);
                      	// prefer smoothed value
                      	valuesHistory[x].Dequeue();
                      	valuesHistory[x].Enqueue(v);
                    }                	
                  
                  	if (valuesHistory[x].Count &gt; 5) valuesHistory[x].Dequeue();
                  
                    Program.RaiseEvent(channelModule,
                                       "Sensor.RawValue",
                                       v.ToString(),
                                       "Analog Channel");
					if (parameterName != "")
                    {
                      	var adjustedValue = (v * parameterFactor) + parameterAdjust;
                      	adjustedValue = (Math.Round(adjustedValue * 10m / 5m, 0) * 5m / 10m); // 0.5 resolution
                        Program.RaiseEvent(channelModule, 
                                           parameterName, 
                                           adjustedValue.ToString(), 
                                           "Analog Channel");
                    }
                  
                }
              
              	Pause(2);

            }
          
        }

        try
        {
            driver.Release(adcClock);
            driver.Release(adcCs);
            driver.Release(adcMosi);
            driver.Release(adcMiso);
        } catch { }
      
    }
    Program.Parameter("Spi.Locked").Value = "0";

    double pauseseconds = double.Parse(Program.InputField("PollFrequency").Value);
  	if (pauseseconds &lt; 1) pauseseconds = 1;
    Pause( pauseseconds ); // pause 

}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterName</Property>
        <Description>Parameter name to store computed value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterFactor</Property>
        <Description>Multiply read raw value by</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterAdjust</Property>
        <Description>Adjust computed value by</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>38</Address>
    <Name>MCP3008 - Analog Input Modules</Name>
    <Description>MCP3008 8 channels ADC connected to SPI interface. 
Use with Eden Sensor Board http://www.homegenie.it/docs/diy/eden.php
or experiment on a breadboard http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/overview .
Each analog channel can be mapped to a virtual module with configurable field name.
 
</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.
Program.Setup(()=&gt;{
  	Program.AddControlWidget("homegenie/generic/thermostat");
  	Program.AddInputField("TemperatureModule", "", "Module to read temperature from");
  	Program.AddInputField("SwitchModule", "", "Module to switch on/off on set point");
  	//Program.AddInputField("ScheduleCheck", "", "Scheduler expression constraint");
});

return true;
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin
// Example for using Helper Classes:
// Modules.WithName("Light 1").On();
const int HOLDING_MODE_DIFF = 1;

var temperature = Program.Parameter("Sensor.Temperature");
var operatingState = Program.Parameter("Thermostat.OperatingState");
var thermostatMode = Program.Parameter("Thermostat.Mode");
var heatSetPoint = Program.Parameter("Thermostat.SetPoint.Heating");

var holdingMode = false;

var ThermostatLogicRun = new Func&lt;bool&gt;(()=&gt;{
  string domainAddress = "";
  string domain = "";
  string address = "";

  try
  {
    // Get a reference to the temperature module
    domainAddress = Program.InputField("TemperatureModule").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var temperatureModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || temperatureModule.Instance == null)
    {
      Program.RaiseEvent("Thermostat.OperatingState", "Idle", "Eden Thermostat");
      Program.Notify("Generic Thermostat", "Please specify a valid temperature module.");
      return false;
    }
    // Update Thermostat module Temperature field
    temperature.Value = temperatureModule.Parameter("Sensor.Temperature").Value;

    // get a reference to the switch/relay module
    domain = address = "";
    domainAddress = Program.InputField("SwitchModule").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var switchModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule.Instance == null)
    {
      Program.RaiseEvent("Thermostat.OperatingState", "Idle", "Eden Thermostat");
      Program.Notify("Generic Thermostat", "Please specify a valid switch module.");
      return false;
    }

    // Heat Mode logic
    if (thermostatMode.Value == "Heat")
    {
      if (temperature.DecimalValue &lt; heatSetPoint.DecimalValue - (holdingMode ? HOLDING_MODE_DIFF : 0))
      {
        if (switchModule.IsOff) holdingMode = false;
        if (operatingState.Value != "Heating")
        {
          Program.RaiseEvent("Thermostat.OperatingState", "Heating", "Eden Thermostat");
        }
        // Heating
        switchModule.On();
      }
      else
      {
        if (switchModule.IsOn) holdingMode = true;
        if (operatingState.Value != "PendingHeat")
        {
          Program.RaiseEvent("Thermostat.OperatingState", "PendingHeat", "Eden Thermostat");
        }
        // Waiting
        switchModule.Off();
      }
    }
    else
    {
      if (operatingState.Value != "Off" &amp;&amp; operatingState.Value != "Idle")
      {
        Program.RaiseEvent("Thermostat.OperatingState", "Idle", "Eden Thermostat");
        holdingMode = false;
      }
      // Off
      switchModule.Off();
    }  
  } 
  catch (Exception e) 
  {
    Program.Notify("Generic Thermostat", "ERROR: " + e.Message);
  }
  return true;
});

When.ModuleParameterChanged((module, parameter)=&gt;{
  	if (parameter.Is("Sensor.Temperature"))
    {
      var domainAddress = Program.InputField("TemperatureModule").Value;
      if (domainAddress != "" &amp;&amp; domainAddress.IndexOf(":") &gt; 0)
      {
        var domain = domainAddress.Split(':')[0].ToLower();
        var address = domainAddress.Split(':')[1].ToLower();
        if (module.Instance.Domain.ToLower() == domain &amp;&amp; module.Instance.Address.ToLower() == address)
        {
          Program.RaiseEvent("Sensor.Temperature", parameter.Value, "Eden Thermostat");
          ThermostatLogicRun();
        }
      }
    }
  	return true;
});

// implement Web API calls as defined in the Thermostat widget
When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address + "/Thermostat.SetPointSet", (args)=&gt;{
  if (args.ToString().Split('/')[0] == "Heating")
  {
    Program.RaiseEvent("Thermostat.SetPoint.Heating", args.ToString().Split('/')[1], "Eden Thermostat");
    holdingMode = false;
    ThermostatLogicRun();
  }
  return true;
});

When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address + "/Thermostat.ModeSet", (args)=&gt;{
  Program.RaiseEvent("Thermostat.Mode", args.ToString().Split('/')[0], "Eden Thermostat");
  holdingMode = false;
  ThermostatLogicRun();
  return true;
});

while (Program.IsEnabled)
{
  ThermostatLogicRun();
  Pause(30);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>78</Address>
    <Name>Basic Thermostat</Name>
    <Description>Use any temperature sensor and relay switch module to implement Thermostat device logic.
Module must be specified in the form &lt;i&gt;&amp;lt;domain&amp;gt:&amp;lt;address&amp;gt;&lt;/i&gt;, eg: HomeAutomation.ZWave:5</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.

Program.Setup(()=&gt;{
	Program.AddInputField("ModulesCount", "3", "Connected sensors number");
	Program.AddInputField("UpdateInterval", "60", "Update interval");
	Program.AddFeatureTextInput("HomeAutomation.OneWire", "Sensor", "OneWire.DeviceId", "Device ID");
});
      
return true;
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin
// 1-Wire Sensor Modules
// NOTE: Currently only temperature sensors are supported

// Read sensor data text lines
var readSensorData = new Func&lt;string, List&lt;string&gt;&gt;((sensorId) =&gt; {
    string oneWireSysPath = "/sys/bus/w1/devices/";
    string currentLine = "";
    var lines = new List&lt;string&gt;();
	//lines.Add("7c 01 4b 46 7f ff 04 10 09 : crc=09 YES");
	//lines.Add("7c 01 4b 46 7f ff 04 10 09 t=23750");
    try
    {
        System.IO.StreamReader file = new System.IO.StreamReader(oneWireSysPath + sensorId + "/w1_slave");
        while((currentLine = file.ReadLine()) != null)
        {
            lines.Add(currentLine);
        }
        file.Close();
    } catch (Exception ex) {
        Program.Notify("OneWire Error", ex.Message);
    }
    return lines;
});

// Parse data from a 1-wire temperature sensors (DS18B20).
// It returns decimal value indicating temperature in celsius degree.
var parseTemperatureData = new Func&lt;List&lt;string&gt;, double&gt;((dataLines) =&gt; {
  	double temperature = 0;
  	foreach(string l in dataLines)
    {
      	if (l.IndexOf(" t=") &gt; 0)
        {
          	var ts = l.Substring(l.LastIndexOf(" t=") + 3);
          	temperature = double.Parse(ts) / 1000D;
        }
    }
  	return temperature;
});

//  Add virtual modules for 1-wire domain
int sensorCount = (int)(Program.InputField("ModulesCount").DecimalValue);
Program.AddVirtualModules("HomeAutomation.OneWire", "Sensor", "homegenie/generic/sensor", 1, sensorCount);

while (Program.IsEnabled)
{
  	for(int n = 1; n &lt;= sensorCount; n++)
    {
      	// Get a reference to the virtual module associated with current sensor
      	var module = Modules.InDomain("HomeAutomation.OneWire").WithAddress(n.ToString()).Get();
      	var deviceId = module.Parameter("OneWire.DeviceId").Value;
		// If a sensor id has been specified for the module, then we read and update temperature values
      	if (deviceId != "")
       	{
				var data = readSensorData(deviceId);
          		if (data.Count &gt; 0 &amp;&amp; data[0].Contains(" crc=") &amp;&amp; data[0].Contains(" NO")) continue;
          		var temperatureCelsius = parseTemperatureData(data);
          		// Update virtual module data
          		Program.RaiseEvent(module, "Sensor.TemperatureF", (temperatureCelsius * 9d / 5d + 32d).ToString(), "1-Wire Device");
          		Pause(1);
          		Program.RaiseEvent(module, "Sensor.Temperature", temperatureCelsius.ToString(), "1-Wire Device");
        }
	}
  
	double updateInterval = Program.InputField("UpdateInterval").DecimalValue;
  	if (updateInterval &lt; 1) updateInterval = 1;
  	Pause(updateInterval);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.OneWire</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>OneWire.DeviceId</Property>
        <Description>Device ID</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>133</Address>
    <Name>One-Wire Devices</Name>
    <Description>Integrates 1-wire devices as HG modules (linux only).
To enable a 1-wire device, its ID must be specified in the module options popup.
To find out your connected devices ID, issue from a terminal the command:
&amp;nbsp;&amp;nbsp;&lt;i&gt;ls -la /sys/bus/w1/devices/&lt;/i&gt;</Description>
    <Group>Devices and Things</Group>
    <ActivationTime>2014-11-13T15:39:01.375637Z</ActivationTime>
    <TriggerTime>2014-11-13T15:39:01.407546Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.
Program.Setup(()=&gt;
{
  
  // set the widget that will display this program data (the temperature,luminance).
  Program.AddControlWidget("homegenie/generic/sensor");
  
  // set a configuration parameter
  //Program.AddInputField("PollFrequency", "10", "Pause between updates (seconds)");
  
  // initialize program parameters
  Program.Parameter("Sensor.Humidity").Value = "";
  Program.Parameter("Sensor.Temperature").Value = "";
  Program.Parameter("Sensor.TemperatureF").Value = "";

  Program.AddInputField("UpdateInterval", "600", "Update Interval (seconds)");
  
  // it makes program to respond to webservices calls:
  // - http://&lt;hg_address&gt;/api/EmbeddedSystems.Raspberry/DHT22/Sensor.Temperature
  When.WebServiceCallReceived("EmbeddedSystems.Raspberry/DHT22/Sensor.Temperature", ( args ) =&gt; 
  {
    return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
  });
  // - http://&lt;hg_address&gt;/api/EmbeddedSystems.Raspberry/DHT22/Sensor.Humidity
  When.WebServiceCallReceived("EmbeddedSystems.Raspberry/DHT22/Sensor.Humidity", ( args ) =&gt; 
  {
    return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
  });
  
}); // end program setup

return true;
</ScriptCondition>
    <ScriptSource>// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Temperature", ( args ) =&gt; 
{
  	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Humidity", ( args ) =&gt; 
{
  	return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

var dataPin = ConnectorPin.P1Pin7.ToProcessor();
var driver = new MemoryGpioConnectionDriver();

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

while (Program.IsEnabled)
{
    driver.Allocate(dataPin, PinDirection.Output);
    driver.Write(dataPin, true);
	int[] data;
  	for(int a = 0; a &lt; 30; a++)
    {
        driver.Allocate(dataPin, PinDirection.Output);
        driver.Write(dataPin, false);
        Pause(0.018);
        //  
        driver.Allocate(dataPin, PinDirection.Input);
        //
        int i = 0, j = 0;
        int counter = 0;
        bool laststate = true;  
        data = new int[5];
        //
        // detect change and read data
        for ( i=0; i&lt;= 85; i++) 
        {
          counter = 0;
          while (driver.Read(dataPin) == laststate) 
          {
            //Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);
            if (++counter == 255) 
            {
              break;
            }
          }
          laststate = driver.Read(dataPin);
          //Console.WriteLine(i);
          if (counter == 255) break;
      
          // ignore first 3 transitions
          if ((i &gt;= 4) &amp;&amp; (i%2 == 0)) 
          {
            // shove each bit into the storage bytes
            data[j/8] &lt;&lt;= 1;
            if (counter &gt; 40)
              data[j/8] |= 1;
            j++;
          }
        }
        // 
      	//Program.Notify("DHT-22", "J = " + j.ToString());
        if ((j &gt;= 40) &amp;&amp; (data[4] == ((data[0] + data[1] + data[2] + data[3]) &amp; 0xFF)) ) 
        {
          	int umidita =((data[0]&lt;&lt;8) + data[1])/10;
          	int decumid = ((data[0]&lt;&lt;8) + data[1]) - umidita*10;
            //var hum = data[0] + "." + data[1];
          	//var hum = (data[0] * 256 + data[1])/10;
          	var hum = umidita + "." + decumid;	
          	int moltiplicatore =1;
          	if (data[2] &gt; 128)
          	{
            	moltiplicatore = -1;
            	data[2] = data[2] - 128;
            }
                            
            int temperatura =((data[2]&lt;&lt;8)+data[3])/10;
          	int decimale = 	((data[2]&lt;&lt;8)+data[3]) - temperatura*10;
          	//data[2] = ((data[2]&lt;&lt;8)+data[3]);
          	//data[2] /= 10;
              
            var tempc = (moltiplicatore * temperatura) + "." + decimale;

          	//if (hum != Program.Parameter("Sensor.Humidity").Value)
            {
              	Program.RaiseEvent("Sensor.Humidity", hum, "DHT-22 Sensor");
            }
          	//if (tempc != Program.Parameter("Sensor.Temperature").Value)
            {
                Program.RaiseEvent("Sensor.Temperature", tempc, "DHT-22 Sensor");
            }
            break;
        }
        else
        {
            //Console.WriteLine(j + ") Data not good, skip\n");
          	Pause(2);
        }
    }
    //
    //Console.WriteLine(data[0]);
    //Console.WriteLine(data[1]);
    //Console.WriteLine(data[2]);
    //Console.WriteLine(data[3]);
    //Console.WriteLine(data[4]);
  	//
  	var pause = Program.InputField("UpdateInterval").DecimalValue;
  	if (pause == 0) pause = 600; // default pause is 10 minutes
  	Pause(pause);

}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>63</Address>
    <Name>DHT-22 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-22 with data pin on GPIO#4. 
Edit program code line #13 to change the data pin GPIO.
</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>// returning true will execute the "Code to Run"
return true;
</ScriptCondition>
    <ScriptSource>var moduleDomain = "Components.MCP23017";

// This examples will add 32 modules of type "Sensor"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var pinConfigurationA = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  //
  new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};

var pinConfigurationB = new List&lt;dynamic&gt;(){
  new { Address =  "17", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "18", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "19", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "20", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "21", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "22", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "23", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address =  "24", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  //
  new { Address =  "25", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "26", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "27", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "28", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "29", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "30", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "31", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
  new { Address = "32", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};


bool[] pinStatusA = new bool[16]; 
bool[] pinStatusB = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnectionA = new Mcp23017I2cConnection(driver.Connect(0x20));
Pause(0.5);
var deviceConnectionB = new Mcp23017I2cConnection(driver.Connect(0x21));

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
    string returnValue =  "{ 'ResponseValue' : 'OK' }";
  	var errormessage = "";
	try
	{
		string pinid = reqs[1];
      	string command = reqs[2];
        //
        var module = Modules.InDomain(moduleDomain).WithAddress(pinid).Get();
        // modules with id from 1 to 8 are mapped as A0-A7
        // modules with id from 9 to 16 are mapped as B0-B7
        // modules with id from 17 to 24 are mapped as A0-A7
        // modules with id from 25 to 32 are mapped as B0-B7
      	var pinname = "";
      	var i = int.Parse(pinid); 
      	if (i &gt;=1 &amp;&amp; i &lt;= 8) 
        {
          	pinname = "A" + (i - 1).ToString();
        }
      	else if  (i &gt;=9 &amp;&amp; i &lt;= 16) 
        {
          	pinname = "B" + (i - 9).ToString();
        }      
      	else if (i &gt;= 17 &amp;&amp; i &lt;= 24)
        {
        	pinname = "A" + (i - 17).ToString();
        }
       	else if (i &gt;= 25 &amp;&amp; i &lt;= 32)
        {
        	pinname = "B" + (i - 25).ToString();
        }
      	//
		var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);
      
        if (i &lt;= 16)
    	{  
        	switch(command)
        	{
          		// eg. http://hg_address/api/Components.MCP23017/1/Control.On
          		case "Control.On":
          			deviceConnectionA.SetPinStatus(mcppin, true);
                	Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
          			break;
          		// eg. http://hg_address/api/Components.MCP23017/3/Control.Off
          		case "Control.Off":
          			deviceConnectionA.SetPinStatus(mcppin, false);
              		Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
          			break;
          		// eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
         		 case "Control.Toggle":
          			deviceConnectionA.Toogle(mcppin);
              		Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
          			break;
                // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
         		 case "Get.Status":
              		returnValue = "{ 'ResponseValue' : '" + (deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1") + "' }";
                    break;
        	}
          
        			
        } 
     	else
        {
        	switch(command)
        	{
          		// eg. http://hg_address/api/Components.MCP23017/1/Control.On
          		case "Control.On":
          			deviceConnectionB.SetPinStatus(mcppin, true);
                    Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
          			break;
          		// eg. http://hg_address/api/Components.MCP23017/3/Control.Off
          		case "Control.Off":
          			deviceConnectionB.SetPinStatus(mcppin, false);
              		Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
          			break;
          		// eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
         		 case "Control.Toggle":
          			deviceConnectionB.Toogle(mcppin);
              		Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
          			break;
               // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
         		 case "Get.Status":
              		returnValue = "{ 'ResponseValue' : '" + (deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1") + "' }";
                    break;
        	}
          
        			
      	}
      
      
        return returnValue;  
    } 
  	catch (Exception ex) 
    { 
	    errormessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});



// Initialize MCP23017 A pins
for (int p = 0; p &lt; pinConfigurationA.Count; p++)
{
	var pincfg = pinConfigurationA[p];
  	// set direction and read pin status
    deviceConnectionA.SetDirection(pincfg.Pin, pincfg.Direction);
    pinStatusA[p] = deviceConnectionA.GetPinStatus(pincfg.Pin);
  	// associate a virtual module with the pin
  	if (pincfg.Direction == Mcp23017PinDirection.Output)
    {
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
    }
  	else // Input 
    {
      	if (pincfg.PullUpResistor)
        {
        	deviceConnectionA.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
        }
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
    }
    // get the module associated to the pin and store current status
    var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  	module.Parameter("Status.Level").Value = (pinStatusA[p] ? "0" : "1");
}

// Initialize MCP23017 B pins
for (int p = 0; p &lt; pinConfigurationB.Count; p++)
{
	var pincfg = pinConfigurationB[p];
  	// set direction and read pin status
    deviceConnectionB.SetDirection(pincfg.Pin, pincfg.Direction);
    pinStatusB[p] = deviceConnectionB.GetPinStatus(pincfg.Pin);
  	// associate a virtual module with the pin
  	if (pincfg.Direction == Mcp23017PinDirection.Output)
    {
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
    }
  	else // Input 
    {
      	if (pincfg.PullUpResistor)
        {
        	deviceConnectionB.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
        }
		Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
    }
    // get the module associated to the pin and store current status
    var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  	module.Parameter("Status.Level").Value = (pinStatusB[p] ? "0" : "1");
}




// status polling loop
while (Program.IsEnabled)
{
  
  	Pause(0.1); // 100 ms poll resolution
  	//
  	for (int p = 0; p &lt; pinConfigurationA.Count; p++)
    {
      	var pincfg = pinConfigurationA[p];
      	if (pincfg.Direction == Mcp23017PinDirection.Input)
        {
            bool status = deviceConnectionA.GetPinStatus(pincfg.Pin);
            // check if the pin status changed
            if (pinStatusA[p] != status)
            {
                // get the module associated to the pin
                var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
                // raise the event and update the current pin status
                Program.RaiseEvent(module, "Status.Level",  status ? "0" : "1", "MCP23017 A " + pincfg.Pin.ToString());
                pinStatusA[p] = status;
              	Pause(0.1);
            }
        }
    }
   	//
    for (int p = 0; p &lt; pinConfigurationB.Count; p++)
    {
      	var pincfg = pinConfigurationB[p];
      	if (pincfg.Direction == Mcp23017PinDirection.Input)
        {
            bool status = deviceConnectionB.GetPinStatus(pincfg.Pin);
            // check if the pin status changed
            if (pinStatusB[p] != status)
            {
                // get the module associated to the pin
                var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
                // raise the event and update the current pin status
                Program.RaiseEvent(module, "Status.Level", status ? "0" : "1", "MCP23017 B " + pincfg.Pin.ToString());
                pinStatusB[p] = status;
              	Pause(0.1);
            }
        }
    }
  
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>79</Address>
    <Name>SmartIC - MCP23017</Name>
    <Description>Using 2 MCP23017 I/O expanders connected to 0x20 and 0x21 I2C bus. 
Contributed by Christophe De Boeck.
Based on HomeGenie MCP23017 example app.</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this is a background app
// so we just put initialization code here and a return true
// to activate the background task loop

// ...
Program.Setup(()=&gt;
{              
	Program.AddInputField("PollInterval", "120", "Poll Interval (seconds)");
	//Program.AddFeature("HomeAutomation.ZWave", "Thermostat", "HomeGenie.ZWaveLevelPoll", "Poll module level");
});
//
return true; // execute "Code To Run"
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  	// basic get will returns current device level 
  	Modules.InDomain("HomeAutomation.ZWave").OfDeviceType("Thermostat").Each((module) =&gt; {
  		Program.Notify("Z-Wave Thermostat Poll", "Polling thermostat " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
      	module.Command("SensorMultiLevel.Get").Execute();
		Pause(Program.InputField("PollInterval").DecimalValue);
      	return false; // do not break, continue iterating...
  	});
	// pause between each poll
  	var pause = Program.InputField("PollInterval").DecimalValue;
  	if (pause &lt; 15)
    {
    	pause = 15;
      	Program.Notify("Z-Wave Thermostat Poll", "Poll interval seconds must be &gt;= 15!");
    }
    Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>92</Address>
    <Name>Z-Wave Thermostat Poll</Name>
    <Description />
    <Group>Z-Wave</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.


Program.Setup(()=&gt;{
    Program.AddControlWidget("homegenie/generic/colorlight");

  	Program.AddVirtualModules("HomeAutomation.MiLightRGBW", "Light", "homegenie/generic/colorlight", 0, 4);
  	//Program.AddVirtualModules("HomeAutomation.MiLightWhite", "Light", "homegenie/generic/light", 0, 4);

  	Program.AddInputField("HomeGenieMiLightAddress", "192.168.0.?", "MiLight IP Address");
  	Program.AddInputField("HomeGenieMiLightPort","8899", "MiLight UDP Port");
  
	Program.AddFeature("HomeAutomation.MiLightRGBW", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on");
	//Program.AddFeature("HomeAutomation.MiLightWhite", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on");
});

return true;
</ScriptCondition>
    <ScriptSource>#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

//   Script created by Smeghead based on and thanks to
//      Version 0.1   30/11/2014
// https://github.com/yasharrashedi/LimitlessLED
// https://github.com/yasharrashedi/LimitlessLED/blob/master/Milight.php
//  I used these entensivelly when creating this script
//    At the moment, only RBGW lights are supported and not the White only LED lights


var MILIGHT_IP_ADDR = "HomeGenieMiLightAddress";
var MILIGHT_PORT    = "HomeGenieMiLightPort";

Func&lt;byte, byte, bool&gt; sendCommand = (byte code, byte param) =&gt; 
{
    byte[] buffer = new byte[] { code, param, 0x55 };
    UdpClient.SendMessage(buffer); 
    return true;
};

Func&lt;int, bool&gt; sendRGBWOnCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x42, 0x45, 0x47, 0x49, 0x4B};
  Program.Notify("MiLight On", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is On");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWOffCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x41, 0x46, 0x48, 0x4A, 0x4C};
  Program.Notify("MiLight Off", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is Off");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWWhiteCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{(byte) 0xC2, (byte) 0xC5, (byte) 0xC7, (byte) 0xC9, (byte) 0xCB};
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand(codes[zone], (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWColorCommand = (int zone, int color) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x40, (byte) color);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x4D, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoDecCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x43, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoIncCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x44, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWBrightnessCommand = (int zone, int brightness) =&gt; 
{
  if ( brightness &gt;= 0 &amp;&amp; brightness &lt;= 100 ) {
     int[] codes = new int[]{0x02, 0x03, 0x04, 0x05, 0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E,
                             0x0F, 0x10, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
     bool result1 = sendRGBWOnCommand(zone);
     Pause(0.11);
     int val = Math.Max(0, Math.Min(19, brightness / 5));
     bool result2 = sendCommand((byte) 0x4E, (byte) codes[val]);
     return (result1 &amp;&amp; result2);
  }
  return false;
};

Func &lt;int[], int&gt; hslToMilightColor = (int[] hsl) =&gt;                
{
    int color = (256 + 176 - (int)(hsl[0] / 360.0 * 255.0)) % 256;
    return color &amp; 0xfa;
};

Func &lt;string, int&gt; hexdec = (string h) =&gt;                
{
    h = h.Replace("x", string.Empty);
    long result = 0;
    long.TryParse(h, System.Globalization.NumberStyles.HexNumber, null, out result);
    return (int)result;
};

Func &lt;string, int[]&gt; rgbHexToIntArray = (string hexColor) =&gt; 
{
    hexColor = hexColor.Replace("#", string.Empty);
    if ( hexColor.StartsWith("0x") ) {
        hexColor = hexColor.Substring(2);
    }
    int hexColorLenghth = hexColor.Length;
    if (hexColorLenghth != 8 &amp;&amp; hexColorLenghth != 6) {
        return new int[] {0,0,0};
    }
    int r,g,b;
    if (hexColorLenghth == 8) {
        r = hexdec(hexColor.Substring(2, 2));
        g = hexdec(hexColor.Substring(4, 2));
        b = hexdec(hexColor.Substring(6, 2));
        if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
            return new int[] {0,0,0};
        }
        return new int[]{r, g, b};
    }
    r = hexdec(hexColor.Substring(0, 2));
    g = hexdec(hexColor.Substring(2, 2));
    b = hexdec(hexColor.Substring(4, 2));
    if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
        return new int[] {0,0,0};
    }
    return new int[]{r, g, b};
};
     
Func &lt;int, int, int, int[]&gt; rgbToHsl = (int r, int g, int b) =&gt;                
{
    r = r / 255;
    g = g / 255;
    b = b / 255;
    int max = Math.Max(r, Math.Max(g, b));
    int min = Math.Min(r, Math.Min(g, b));
    int l = (max + min) / 2;
    int d = max - min;
    int h = 0;
    int s = 0;
    if (d == 0) {
       h = s = 0;
    }
    else {
       s = d / (1 - Math.Abs(2 * l - 1));
       if ( max == r ) {
           h = 60 * (((g - b) / d) % 6);
           if (b &gt; g) {
               h += 360;
           }         
       }
       else if (max == g) {
          h = 60 * ((b - r) / d + 2);
       }
       else {
          h = 60 * ((r - g) / d + 4);
       }
    }
    return new int[] {h, s, l};
};
               

Func &lt;int, int[], bool&gt; sendRGBWSetColorHsv = (int zone, int[] hsvColor) =&gt; 
{
   int milightColor = hslToMilightColor(hsvColor);
   int brightness = (hsvColor[2] * 100) / 250;
   //Console.WriteLine("       MiLight Color " + milightColor + "    brightness " + brightness);
   Pause(0.11);
   sendRGBWBrightnessCommand (zone,  brightness);
   Pause(0.11);
   return sendRGBWColorCommand (zone, milightColor); //$this-&gt;sendCommand(array(0x40, $milightColor));
};

Func &lt;int, string, bool&gt; sendRGBWSetColorHexString = (int zone, string color) =&gt; 
//public function rgbwSetColorHexString($color)
{
    int[] rgb = rgbHexToIntArray(color);
    int[] hsl = rgbToHsl(rgb[0], rgb[1], rgb[2]);
    int milightColor = hslToMilightColor(hsl);
    return sendRGBWColorCommand (zone, milightColor);
};

var milightModules = Modules.InDomain("HomeAutomation.MiLightRGBW");

When.ModuleParameterChanged( (module, property) =&gt; {

  	if (module.Instance.Domain == "HomeAutomation.MiLightRGBW" )
	{
        //Console.WriteLine("MiLight ************************ ModuleParameterChanged RGBW");
        int lightnumber = Convert.ToInt32(module.Instance.Address);
        switch (property.Name) {
          case "Meter.Watts":
              break;
          case "Control.On":
              sendRGBWOnCommand(lightnumber);
        	  Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
              break;
          case "Control.Off":
              sendRGBWOffCommand(lightnumber);
        	  Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
              break;
          default:  
              break;
        }
        return false;
    }
  	else if (module.Instance.Domain == "HomeAutomation.MiLightWhite" )
	{
        //Console.WriteLine("MiLight ************************ ModuleParameterChanged White");
      
        return false;
    }

    return true;
  
});

When.WebServiceCallReceived("HomeAutomation.MiLight", ( args ) =&gt; 
{
    //Console.WriteLine("MiLight ************************ WebServiceCallReceived");
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
    try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; 
      if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = milightModules.WithAddress(lightnumber).Get();
      
      //Console.WriteLine("module name " + module.Instance.Name);
      //
      
      //Console.WriteLine("MiLight ************************ Command "+ command);
      switch(command)
      {
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
        case "Control.On":
            sendRGBWOnCommand(Convert.ToInt32(lightnumber));
        	Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
        case "Control.Off":
            sendRGBWOffCommand(Convert.ToInt32(lightnumber));
        	Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
        	break;
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
                sendRGBWOnCommand(Convert.ToInt32(lightnumber));
              	Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
            }
        	else
            {
                sendRGBWOffCommand(Convert.ToInt32(lightnumber));
	        	Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
            }
        	break;
        case "Control.Level":
            int brightness = (int)(double.Parse(parameter));
            sendRGBWBrightnessCommand (Convert.ToInt32(lightnumber),  brightness);
    	    //bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
            //Console.WriteLine("MiLight ************************ brightness "+ brightness);
            Program.RaiseEvent(module, "Status.Level", brightness.ToString(), "MiLight Light");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
        	string[] values = parameter.Split(',');
        	double transition = 5;
        	//if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
            int[] hsbColor = new int[] { (int)(double.Parse(values[0]) * 255), (int)(double.Parse(values[1]) * 255), (int)(double.Parse(values[2]) * 255) };
            //Console.WriteLine("       Color HSB " + hsbColor[0] + " : " + hsbColor[1] + " : " + hsbColor[2] );
    	    sendRGBWSetColorHsv(Convert.ToInt32(lightnumber), hsbColor);
            double levelHsb = hsbColor[2] / 250.0;
            Program.RaiseEvent(module, "Status.Level", levelHsb.ToString(), "MiLight Light");
            Program.RaiseEvent(module, "Status.ColorHsb", parameter, "MiLight Light");
        	break; 
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
    	Program.Notify("MiLight ERROR!", e.Message);
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});

while (Program.IsEnabled)
{
	string addr = Program.InputField(MILIGHT_IP_ADDR).Value;
	string port = Program.InputField(MILIGHT_PORT).Value; 

	if (!UdpClient.IsConnected) 
    {
  		if (!String.IsNullOrWhiteSpace(addr) &amp;&amp; !addr.EndsWith("?") &amp;&amp; !String.IsNullOrWhiteSpace(port))
   		{
   			UdpClient.Sender(addr, Convert.ToInt32(port));
        }
      	else
        {
          	Program.Notify("MiLight", "Please configure a valid address and port.");
        }
    } 
 	Pause(5);
}


</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.MiLightRGBW</ForDomains>
        <ForTypes>Dimmer,Light</ForTypes>
        <Property>MiLight.LevelFix</Property>
        <Description>Set level to 100% when switched on</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>28</Address>
    <Name>MiLight Control</Name>
    <Description>MiLight and EasyBulb Lights</Description>
    <Group>Devices and Things</Group>
    <ActivationTime>2014-12-04T14:55:48.706099Z</ActivationTime>
    <TriggerTime>2014-12-04T14:55:48.742104Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this Setup delegate will be executed once, when the program is enabled
Program.Setup(()=&gt;
{
	Program.AddVirtualModule("Components.Ssd1306", "0", "Sensor", "");
}); // end program setup
//return true; // execute the 'Code to Run'
return true;</ScriptCondition>
    <ScriptSource>#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

const int displayWidth = 128;  
const int displayHeight = 64;

int currentX = 0, currentY = 0;

// Constants
const byte SSD1306_I2C_ADDRESS = 0x3C; // 011110+SA0+RW - 0x3C or 0x3D
const byte SSD1306_SETCONTRAST = 0x81;
const byte SSD1306_DISPLAYALLON_RESUME = 0xA4;
const byte SSD1306_DISPLAYALLON = 0xA5;
const byte SSD1306_NORMALDISPLAY = 0xA6;
const byte SSD1306_INVERTDISPLAY = 0xA7;
const byte SSD1306_DISPLAYOFF = 0xAE;
const byte SSD1306_DISPLAYON = 0xAF;
const byte SSD1306_SETDISPLAYOFFSET = 0xD3;
const byte SSD1306_SETCOMPINS = 0xDA;
const byte SSD1306_SETVCOMDETECT = 0xDB;
const byte SSD1306_SETDISPLAYCLOCKDIV = 0xD5;
const byte SSD1306_SETPRECHARGE = 0xD9;
const byte SSD1306_SETMULTIPLEX = 0xA8;
const byte SSD1306_SETLOWCOLUMN = 0x00;
const byte SSD1306_SETHIGHCOLUMN = 0x10;
const byte SSD1306_SETSTARTLINE = 0x40;
const byte SSD1306_MEMORYMODE = 0x20;
const byte SSD1306_COLUMNADDR = 0x21;
const byte SSD1306_PAGEADDR = 0x22;
const byte SSD1306_COMSCANINC = 0xC0;
const byte SSD1306_COMSCANDEC = 0xC8;
const byte SSD1306_SEGREMAP = 0xA0;
const byte SSD1306_CHARGEPUMP = 0x8D;
const byte SSD1306_EXTERNALVCC = 0x1;
const byte SSD1306_SWITCHCAPVCC = 0x2;
// Scrolling constants
const byte SSD1306_ACTIVATE_SCROLL = 0x2F;
const byte SSD1306_DEACTIVATE_SCROLL = 0x2E;
const byte SSD1306_SET_VERTICAL_SCROLL_AREA = 0xA3;
const byte SSD1306_RIGHT_HORIZONTAL_SCROLL = 0x26;
const byte SSD1306_LEFT_HORIZONTAL_SCROLL = 0x27;
const byte SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29;
const byte SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL = 0x2A;

List&lt;byte[]&gt; basicFont = new List&lt;byte[]&gt;() {
    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},
    new byte[] {0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},
    new byte[] {0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},
    new byte[] {0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},
    new byte[] {0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},
    new byte[] {0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},
    new byte[] {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},
    new byte[] {0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
    new byte[] {0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},
    new byte[] {0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00},
    new byte[] {0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},
    new byte[] {0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},
    new byte[] {0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},
    new byte[] {0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},
    new byte[] {0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},
    new byte[] {0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},
    new byte[] {0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},
    new byte[] {0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},
    new byte[] {0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},
    new byte[] {0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},
    new byte[] {0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},
    new byte[] {0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},
    new byte[] {0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},
    new byte[] {0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},
    new byte[] {0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},
    new byte[] {0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},
    new byte[] {0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},
    new byte[] {0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},
    new byte[] {0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},
    new byte[] {0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},
    new byte[] {0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},
    new byte[] {0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},
    new byte[] {0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},
    new byte[] {0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},
    new byte[] {0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},
    new byte[] {0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},
    new byte[] {0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},
    new byte[] {0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},
    new byte[] {0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},
    new byte[] {0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},
    new byte[] {0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},
    new byte[] {0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},
    new byte[] {0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},
    new byte[] {0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},
    new byte[] {0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},
    new byte[] {0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},
    new byte[] {0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},
    new byte[] {0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},
    new byte[] {0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},
    new byte[] {0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},
    new byte[] {0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},
    new byte[] {0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},
    new byte[] {0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},
    new byte[] {0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},
    new byte[] {0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},
    new byte[] {0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},
    new byte[] {0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},
    new byte[] {0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},
    new byte[] {0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},
    new byte[] {0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},
    new byte[] {0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},
    new byte[] {0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},
    new byte[] {0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},
    new byte[] {0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},
    new byte[] {0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},
    new byte[] {0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},
    new byte[] {0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},
    new byte[] {0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},
    new byte[] {0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},
    new byte[] {0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},
    new byte[] {0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},
    new byte[] {0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},
    new byte[] {0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},
    new byte[] {0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},
    new byte[] {0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},
    new byte[] {0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},
    new byte[] {0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00}
};

byte[][] lcdfont_2l = {
   new byte[] { (byte)' ', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'!', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'"', 8, 16, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   //new byte[] { (byte)'#', 8, 16, 0x00, 0x20, 0xe0, 0x3c, 0x20, 0xe0, 0x3c, 0x20, 0x08, 0x78, 0x0f, 0x08, 0x78, 0x0f, 0x08, 0x00 },
   new byte[] { (byte)'$', 8, 16, 0x00, 0x38, 0x44, 0x84, 0xfe, 0x04, 0x04, 0x18, 0x00, 0x18, 0x20, 0x20, 0x7f, 0x21, 0x22, 0x1c },
   new byte[] { (byte)'%', 8, 16, 0x00, 0x38, 0x44, 0x44, 0xb8, 0x60, 0x10, 0x0c, 0x00, 0x18, 0x04, 0x03, 0x1c, 0x22, 0x22, 0x1c },
   new byte[] { (byte)'&amp;', 8, 16, 0x00, 0x00, 0x38, 0xc4, 0xc4, 0x38, 0x00, 0x80, 0x00, 0x1e, 0x21, 0x20, 0x20, 0x13, 0x0c, 0x33 },
   new byte[] { (byte)'\'', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'(', 8, 16, 0x00, 0x00, 0xe0, 0x18, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0x20, 0x40, 0x00, 0x00 },
   new byte[] { (byte)')', 8, 16, 0x00, 0x00, 0x02, 0x04, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x18, 0x07, 0x00, 0x00 },
   new byte[] { (byte)'*', 8, 16, 0x00, 0x40, 0x80, 0xe0, 0x80, 0x40, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x01, 0x02, 0x00, 0x00 },
   new byte[] { (byte)'+', 8, 16, 0x00, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 },
   new byte[] { (byte)',', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x30, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'-', 8, 16, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'.', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'/', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0x00, 0x00, 0x30, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'0', 8, 16, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x08, 0xf0, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0f },
   new byte[] { (byte)'1', 8, 16, 0x00, 0x00, 0x08, 0x08, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'2', 8, 16, 0x00, 0x18, 0x04, 0x04, 0x04, 0x84, 0x78, 0x00, 0x00, 0x38, 0x24, 0x22, 0x21, 0x20, 0x20, 0x00 },
   new byte[] { (byte)'3', 8, 16, 0x00, 0x18, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x00 },
   new byte[] { (byte)'4', 8, 16, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x0c, 0xfc, 0x00, 0x00, 0x04, 0x07, 0x04, 0x04, 0x04, 0x3f, 0x04 },
   new byte[] { (byte)'5', 8, 16, 0x00, 0xfc, 0x44, 0x44, 0x44, 0x44, 0x84, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x00 },
   new byte[] { (byte)'6', 8, 16, 0x00, 0xf8, 0x84, 0x84, 0x84, 0x84, 0x18, 0x00, 0x00, 0x1f, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x00 },
   new byte[] { (byte)'7', 8, 16, 0x00, 0x04, 0x04, 0x04, 0xc4, 0x34, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'8', 8, 16, 0x00, 0x78, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x1f, 0x20, 0x20, 0x20, 0x20, 0x1f, 0x00 },
   new byte[] { (byte)'9', 8, 16, 0x00, 0xf8, 0x04, 0x04, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x18, 0x21, 0x21, 0x21, 0x21, 0x1f, 0x00 },
   new byte[] { (byte)':', 8, 16, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)';', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1c, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'&lt;', 8, 16, 0x80, 0x40, 0x40, 0x20, 0x10, 0x10, 0x08, 0x00, 0x00, 0x01, 0x01, 0x02, 0x04, 0x04, 0x08, 0x00 },
   new byte[] { (byte)'=', 8, 16, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 },
   new byte[] { (byte)'&gt;', 8, 16, 0x00, 0x08, 0x10, 0x10, 0x20, 0x40, 0x40, 0x80, 0x00, 0x08, 0x04, 0x04, 0x02, 0x01, 0x01, 0x00 },
   //new byte[] { (byte)'|'  /* ☂ */, 16, 32, 0x00, 0xe0, 0x30, 0x78, 0xf8, 0x3c, 0x3c, 0xfe, 0x7c, 0x3c, 0x3c, 0xf8, 0x78, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'@', 8, 16, 0x00, 0xf0, 0x08, 0xc4, 0x24, 0xe4, 0x08, 0xf0, 0x00, 0x0f, 0x10, 0x23, 0x24, 0x23, 0x24, 0x17 },
   new byte[] { (byte)'A', 8, 16, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x07, 0x04, 0x04, 0x04, 0x07, 0x38 },
   new byte[] { (byte)'B', 8, 16, 0x00, 0xfc, 0x84, 0x84, 0x84, 0x84, 0x48, 0x30, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x11, 0x0e },
   new byte[] { (byte)'C', 8, 16, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x08, 0x30, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0c },
   new byte[] { (byte)'D', 8, 16, 0x00, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x18, 0xe0, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x18, 0x07 },
   new byte[] { (byte)'E', 8, 16, 0x00, 0xfc, 0x84, 0x84, 0x84, 0x84, 0x84, 0x04, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 },
   new byte[] { (byte)'F', 8, 16, 0x00, 0xfc, 0x84, 0x84, 0x84, 0x84, 0x84, 0x04, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'G', 8, 16, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x21, 0x11, 0x3f },
   new byte[] { (byte)'H', 8, 16, 0x00, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f },
   new byte[] { (byte)'I', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'J', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x1f, 0x00, 0x00 },
   new byte[] { (byte)'K', 8, 16, 0x00, 0xfc, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x3f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20 },
   new byte[] { (byte)'L', 8, 16, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00 },
   new byte[] { (byte)'M', 8, 16, 0x00, 0xfc, 0x30, 0xc0, 0x00, 0xc0, 0x30, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0x07, 0x00, 0x00, 0x3f },
   new byte[] { (byte)'N', 8, 16, 0x00, 0xfc, 0x18, 0x60, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x3f, 0x00, 0x00, 0x01, 0x06, 0x18, 0x3f },
   new byte[] { (byte)'O', 8, 16, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x08, 0xf0, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0f },
   new byte[] { (byte)'P', 8, 16, 0x00, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x88, 0x70, 0x00, 0x3f, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },
   new byte[] { (byte)'Q', 8, 16, 0x00, 0xf0, 0x08, 0x04, 0x04, 0x04, 0x08, 0xf0, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x28, 0x10, 0x2f },
   new byte[] { (byte)'R', 8, 16, 0x00, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x88, 0x70, 0x00, 0x3f, 0x01, 0x01, 0x01, 0x01, 0x02, 0x3c },
   new byte[] { (byte)'S', 8, 16, 0x00, 0x38, 0x44, 0x84, 0x84, 0x04, 0x04, 0x18, 0x00, 0x18, 0x20, 0x20, 0x20, 0x21, 0x22, 0x1c },
   new byte[] { (byte)'T', 8, 16, 0x00, 0x04, 0x04, 0x04, 0xfc, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'U', 8, 16, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x1f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1f },
   new byte[] { (byte)'V', 8, 16, 0x00, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00 },
   new byte[] { (byte)'W', 8, 16, 0x00, 0xfc, 0x00, 0x80, 0x7c, 0x80, 0x00, 0xfc, 0x00, 0x03, 0x3c, 0x03, 0x00, 0x03, 0x3c, 0x03 },
   new byte[] { (byte)'X', 8, 16, 0x00, 0x0c, 0x30, 0x40, 0x80, 0x40, 0x30, 0x0c, 0x00, 0x30, 0x0c, 0x03, 0x00, 0x03, 0x0c, 0x30 },
   new byte[] { (byte)'Y', 8, 16, 0x00, 0x0c, 0x30, 0xc0, 0x00, 0xc0, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'Z', 8, 16, 0x00, 0x04, 0x04, 0x04, 0xc4, 0x34, 0x0c, 0x00, 0x00, 0x30, 0x2c, 0x23, 0x20, 0x20, 0x20, 0x00 },
   new byte[] { (byte)'[', 8, 16, 0x00, 0x00, 0x00, 0xfe, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x40, 0x40, 0x40, 0x00 },
   new byte[] { (byte)']', 8, 16, 0x00, 0x02, 0x02, 0x02, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00 },
   //new byte[] { (byte)'^', 8, 16, 0x00, 0x00, 0x08, 0x04, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'_', 8, 16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 },
   new byte[] { (byte)'`', 8, 16, 0x00, 0x00, 0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'a', 8, 16, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x22, 0x22, 0x1f, 0x20 },
   new byte[] { (byte)'b', 8, 16, 0x00, 0xfc, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x3f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0f },
   new byte[] { (byte)'c', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x20, 0x10 },
   new byte[] { (byte)'d', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0xfc, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x3f },
   new byte[] { (byte)'e', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x0f, 0x12, 0x22, 0x22, 0x22, 0x22, 0x13 },
   new byte[] { (byte)'f', 8, 16, 0x00, 0x40, 0x40, 0xf8, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'g', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x80, 0xc0, 0x00, 0x00, 0x27, 0x48, 0x50, 0x50, 0x48, 0x3f, 0x00 },
   new byte[] { (byte)'h', 8, 16, 0x00, 0xfc, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00 },
   new byte[] { (byte)'i', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'j', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'k', 8, 16, 0x00, 0xfc, 0x00, 0x00, 0x80, 0x40, 0x20, 0x00, 0x00, 0x3f, 0x02, 0x05, 0x08, 0x10, 0x20, 0x00 },
   new byte[] { (byte)'l', 8, 16, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'m', 8, 16, 0x00, 0xc0, 0x40, 0x40, 0x80, 0x40, 0x40, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f },
   new byte[] { (byte)'n', 8, 16, 0x00, 0xc0, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00 },
   new byte[] { (byte)'o', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x0f, 0x10, 0x20, 0x20, 0x20, 0x10, 0x0f },
   new byte[] { (byte)'p', 8, 16, 0x00, 0xc0, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x7f, 0x08, 0x10, 0x10, 0x10, 0x08, 0x07 },
   new byte[] { (byte)'q', 8, 16, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x80, 0xc0, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x08, 0x7f },
   new byte[] { (byte)'r', 8, 16, 0x00, 0x00, 0xc0, 0x80, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'s', 8, 16, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x11, 0x22, 0x22, 0x24, 0x24, 0x18, 0x00 },
   new byte[] { (byte)'t', 8, 16, 0x00, 0x40, 0x40, 0xfc, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x20, 0x20, 0x20, 0x00 },
   new byte[] { (byte)'u', 8, 16, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x1f, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x00 },
   new byte[] { (byte)'v', 8, 16, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x0c, 0x30, 0x0c, 0x03, 0x00 },
   new byte[] { (byte)'w', 8, 16, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x38, 0x0c, 0x03, 0x0c, 0x38, 0x07 },
   new byte[] { (byte)'x', 8, 16, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x20, 0x10, 0x09, 0x06, 0x09, 0x10, 0x20 },
   new byte[] { (byte)'y', 8, 16, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x40, 0x43, 0x4c, 0x30, 0x0c, 0x03, 0x00 },
   new byte[] { (byte)'z', 8, 16, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x00, 0x00, 0x30, 0x28, 0x24, 0x22, 0x21, 0x20, 0x00 },
   new byte[] { (byte)'©', 8, 16, 0xe0, 0x18, 0xe4, 0x14, 0x14, 0x24, 0x18, 0xe0, 0x07, 0x18, 0x27, 0x28, 0x28, 0x24, 0x18, 0x07 },
   new byte[] { (byte)'®', 16, 32, 0x00, 0x00, 0xc0, 0x30, 0x08, 0xe8, 0x14, 0x14, 0x14, 0x14, 0xe8, 0x08, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x10, 0x1f, 0x21, 0x21, 0x21, 0x21, 0x1e, 0x10, 0x0c, 0x03, 0x00, 0x00 },
   new byte[] { (byte)'\\' /* ° */, 16, 32, 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'#' /* bulb */, 11, 22, 0x00, 0x78, 0xe4, 0xfa, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x01, 0x17, 0x77, 0x77, 0x77, 0x17, 0x01, 0x00, 0x00 },
   new byte[] { (byte)'|' /* plug */, 12, 24, 0x00, 0x60, 0xe0, 0xfe, 0xfe, 0xe0, 0xe0, 0xfe, 0xfe, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x7f, 0x7f, 0x0f, 0x0f, 0x07, 0x00, 0x00 },
   new byte[] { (byte)'^' /* energy */, 9, 18, 0x00, 0xe0, 0xfe, 0xfe, 0x5e, 0xc6, 0xe0, 0xe0, 0x00, 0x00, 0x01, 0x60, 0x38, 0x0e, 0x07, 0x01, 0x00, 0x00 }
     
};

byte[][] lcdfont_3l = 
{
   new byte[] { (byte)' ', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'!', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'"', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'#', 12, 36, 0x00, 0x00, 0x80, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x80, 0xfc, 0xfc, 0x80, 0x00, 0x40, 0x40, 0xc0, 0xff, 0x7f, 0x40, 0xc0, 0xff, 0x7f, 0x40, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'$', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0xff, 0xff, 0x04, 0x0c, 0x38, 0x30, 0x00, 0x00, 0x81, 0x83, 0x06, 0x04, 0xff, 0xff, 0x08, 0x18, 0xf0, 0xe0, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x3f, 0x3f, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'%', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0xfc, 0xf8, 0xc0, 0xf0, 0x3c, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x01, 0xe1, 0xf9, 0xde, 0xe7, 0x21, 0x20, 0xe0, 0xc0, 0x00, 0x00, 0x0c, 0x0f, 0x03, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x0f, 0x07 },
   new byte[] { (byte)'&amp;', 12, 36, 0x00, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0x39, 0x0f, 0x0e, 0x3b, 0xf1, 0xc0, 0x80, 0xf0, 0x70, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x07, 0x0d, 0x08 },
   new byte[] { (byte)'\'', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'(', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x78, 0x1c, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1e, 0x38, 0x60, 0x40, 0x00, 0x00 },
   new byte[] { (byte)')', 12, 36, 0x00, 0x00, 0x02, 0x06, 0x1c, 0x78, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x38, 0x1e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'*', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x64, 0x3c, 0x1f, 0x1f, 0x3c, 0x64, 0x46, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'+', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0xff, 0xff, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)',', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x2c, 0x1c, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'-', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'.', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'/', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x3e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'0', 12, 36, 0x00, 0xc0, 0xf0, 0x38, 0x0c, 0x04, 0x04, 0x04, 0x0c, 0x38, 0xf0, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'1', 12, 36, 0x00, 0x00, 0x00, 0x10, 0x10, 0x18, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'2', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x20, 0x30, 0x18, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x0e, 0x0f, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
   new byte[] { (byte)'3', 12, 36, 0x00, 0x70, 0x78, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0x80, 0x80, 0x00, 0x04, 0x04, 0x04, 0x04, 0x0e, 0xfb, 0xf1, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'4', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x1c, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0x9c, 0x87, 0x81, 0x80, 0x80, 0xff, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00 },
   new byte[] { (byte)'5', 12, 36, 0x00, 0x00, 0xfc, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x80, 0x87, 0x07, 0x02, 0x02, 0x02, 0x02, 0x06, 0xfc, 0xf8, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'6', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0x38, 0x30, 0x00, 0x00, 0xff, 0xff, 0x04, 0x02, 0x02, 0x02, 0x02, 0x06, 0xfc, 0xf8, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'7', 12, 36, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xe4, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf8, 0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'8', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0xf1, 0xfb, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x0e, 0xfb, 0xf1, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'9', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0x07, 0x0f, 0x18, 0x10, 0x10, 0x10, 0x10, 0x08, 0xff, 0xff, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)':', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)';', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x07, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'&lt;', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0x60, 0x60, 0x30, 0x00, 0x00, 0x1c, 0x3e, 0x36, 0x63, 0xc1, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x06, 0x00 },
   new byte[] { (byte)'=', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'&gt;', 12, 36, 0x00, 0x30, 0x60, 0x60, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc1, 0xc1, 0x63, 0x36, 0x3e, 0x1c, 0x00, 0x00, 0x06, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   //new byte[] { (byte)'☂', 24, 72, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x01, 0x01, 0x03, 0x0f, 0x03, 0x01, 0x01, 0x01, 0xff, 0x07, 0x01, 0x01, 0x01, 0x03, 0x0f, 0x03, 0x01, 0x01, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'@', 12, 36, 0x00, 0x80, 0xe0, 0x70, 0x18, 0x08, 0x88, 0x08, 0x98, 0x30, 0xe0, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x7e, 0xff, 0x81, 0xff, 0x7f, 0x80, 0xff, 0x7f, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x06, 0x02 },
   new byte[] { (byte)'A', 12, 36, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0x3c, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfe, 0x4f, 0x41, 0x40, 0x41, 0x4f, 0xfe, 0xf0, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f },
   new byte[] { (byte)'B', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0xfb, 0xf1, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'C', 12, 36, 0x00, 0xc0, 0xf0, 0x38, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0x38, 0x30, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03 },
   new byte[] { (byte)'D', 12, 36, 0x00, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x0c, 0x38, 0xf0, 0xc0, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'E', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
   new byte[] { (byte)'F', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'G', 12, 36, 0x00, 0xc0, 0xf0, 0x38, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0x78, 0x70, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0xfc, 0xfc, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x06, 0x0f, 0x0f },
   new byte[] { (byte)'H', 12, 36, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'I', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'J', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00, 0x00 },
   new byte[] { (byte)'K', 12, 36, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x06, 0x03, 0x0f, 0x3c, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x00 },
   new byte[] { (byte)'L', 12, 36, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
   new byte[] { (byte)'M', 12, 36, 0x00, 0xfc, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0xfc, 0x00, 0xff, 0xff, 0x03, 0x1f, 0xf8, 0xc0, 0xf8, 0x1f, 0x03, 0xff, 0xff, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x0f },
   new byte[] { (byte)'N', 12, 36, 0x00, 0xfc, 0xfc, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x00, 0x01, 0x07, 0x1c, 0x70, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'O', 12, 36, 0x00, 0xc0, 0xf0, 0x38, 0x0c, 0x04, 0x04, 0x04, 0x0c, 0x38, 0xf0, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'P', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'Q', 12, 36, 0x00, 0xc0, 0xf0, 0x38, 0x0c, 0x04, 0x04, 0x04, 0x0c, 0x38, 0xf0, 0xc0, 0x00, 0xff, 0xff, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x09, 0x0b, 0x0e, 0x0f, 0x1b, 0x10 },
   new byte[] { (byte)'R', 12, 36, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0c, 0xf8, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0xfb, 0xf1, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'S', 12, 36, 0x00, 0xf0, 0xf8, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0c, 0x38, 0x30, 0x00, 0x00, 0x80, 0x81, 0x03, 0x02, 0x06, 0x04, 0x0c, 0x18, 0xf0, 0xe0, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'T', 12, 36, 0x00, 0x04, 0x04, 0x04, 0x04, 0xfc, 0xfc, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'U', 12, 36, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'V', 12, 36, 0x00, 0x3c, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfc, 0x3c, 0x00, 0x00, 0x00, 0x03, 0x3f, 0xfc, 0xc0, 0xc0, 0xfc, 0x3f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'W', 12, 36, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0xc0, 0xfc, 0xc0, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x01, 0x7f, 0xfe, 0xe0, 0x7f, 0x01, 0x7f, 0xe0, 0xfe, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00 },
   new byte[] { (byte)'X', 12, 36, 0x00, 0x0c, 0x3c, 0xf0, 0xc0, 0x00, 0x00, 0xc0, 0xf0, 0x3c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf3, 0x3f, 0x3f, 0xf3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x00 },
   new byte[] { (byte)'Y', 12, 36, 0x00, 0x1c, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0xfc, 0xfc, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'Z', 12, 36, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xc4, 0xf4, 0x3c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0x0b, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
   new byte[] { (byte)'[', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x40, 0x40, 0x40, 0x00, 0x00 },
   new byte[] { (byte)']', 12, 36, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'^', 12, 36, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x06, 0x06, 0x0c, 0x18, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'_', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 },
   new byte[] { (byte)'`', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0c, 0x18, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'a', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xc6, 0x63, 0x21, 0x21, 0x21, 0x23, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x0f, 0x08 },
   new byte[] { (byte)'b', 12, 36, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x01, 0x01, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x04, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'c', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x03, 0x01, 0x01, 0x01, 0x03, 0x06, 0x04, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x06, 0x02, 0x00 },
   new byte[] { (byte)'d', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x03, 0x01, 0x01, 0x01, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x04, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'e', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x23, 0x21, 0x21, 0x21, 0x23, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x06, 0x02, 0x00 },
   new byte[] { (byte)'f', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xff, 0xff, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'g', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x03, 0x01, 0x01, 0x01, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x11, 0x33, 0x66, 0x44, 0x44, 0x44, 0x62, 0x3f, 0x1f, 0x00 },
   new byte[] { (byte)'h', 12, 36, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x01, 0x01, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'i', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'j', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x60, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'k', 12, 36, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x70, 0xd8, 0x8c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x08 },
   new byte[] { (byte)'l', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'m', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x01, 0x01, 0xff, 0xfe, 0x01, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f },
   new byte[] { (byte)'n', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x01, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00 },
   new byte[] { (byte)'o', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x03, 0x01, 0x01, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'p', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x01, 0x01, 0x01, 0x03, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x04, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'q', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0x03, 0x01, 0x01, 0x01, 0x02, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x04, 0x7f, 0x7f, 0x00 },
   new byte[] { (byte)'r', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'s', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x33, 0x21, 0x21, 0x61, 0x43, 0xce, 0x8c, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x0c, 0x07, 0x03, 0x00 },
   new byte[] { (byte)'t', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xff, 0xff, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x08, 0x08, 0x08, 0x00, 0x00 },
   new byte[] { (byte)'u', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0c, 0x08, 0x08, 0x08, 0x04, 0x0f, 0x0f, 0x00 },
   new byte[] { (byte)'v', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xf8, 0xc0, 0x00, 0xc0, 0xf8, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'w', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0xf0, 0x3e, 0xf0, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x01, 0x00, 0x01, 0x0f, 0x0f, 0x00, 0x00 },
   new byte[] { (byte)'x', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x9c, 0xf0, 0x60, 0xf0, 0x9c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x00 },
   new byte[] { (byte)'y', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xf8, 0xc0, 0x00, 0x00, 0xc0, 0xf8, 0x3f, 0x07, 0x00, 0x00, 0x40, 0x40, 0x60, 0x33, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'z', 12, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xc1, 0xe1, 0x39, 0x1d, 0x07, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x0e, 0x0b, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
   new byte[] { (byte)'©', 12, 36, 0x00, 0x80, 0x60, 0x10, 0x88, 0x88, 0x88, 0x88, 0x88, 0x10, 0x60, 0x80, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0x00, 0xff, 0x00, 0x01, 0x06, 0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x08, 0x06, 0x01 },
   new byte[] { (byte)'®', 24, 72, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x10, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x10, 0x10, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x10, 0x10, 0x30, 0xf0, 0xdf, 0x0e, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x09, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x09, 0x09, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'\\' /* ° */, 10, 30, 0x00, 0x00, 0x1c, 0x36, 0x22, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
   new byte[] { (byte)'|' /* temp symbol */, 16, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x81, 0x81, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0xff, 0xff, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x20, 0x4e, 0x5f, 0x5f, 0x4e, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00 }
};

var logo = new byte[]{
  0xC0, 0xF0, 0xF8, 0x1C, 0x0C, 0x06, 0xF6, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xC0, 0xFE,
  0xFF, 0xFF, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00,
  0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0x7E, 0x1E, 0x0E, 0x07, 0x03, 0x03, 0x03, 0x23, 0x7E, 0x3E,
  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x9E,
  0xBE, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x03, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x06, 0x06, 0x86, 0xFE, 0xFF, 0xFF,
  0xFF, 0x0F, 0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0x7F, 0x07, 0x03, 0x01, 0x99, 0xFF, 0xFF, 0x10, 0x10,
  0xD8, 0xFE, 0xFF, 0xFF, 0x7F, 0x0F, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x06, 0x03, 0xFF,
  0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFF, 0xDF, 0xC7, 0x41, 0x71, 0x3F, 0x1F,
  0x00, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF8, 0xFC, 0xFC, 0x3C,
  0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x71, 0x3F, 0x0F, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0x3F, 0x07, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF,
  0x1F, 0x00, 0x00, 0xC0, 0xF8, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x39, 0x1F, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3C, 0x3F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F,
  0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x1C, 0x0F, 0x07, 0x01, 0x00, 0x38,
  0x3F, 0x3F, 0x3F, 0x0F, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x0E, 0x3F,
  0x3F, 0x3F, 0x39, 0x38, 0x18, 0x0E, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x18, 0x04, 0x00,
  0x00, 0x00, 0x01, 0xE1, 0xF3, 0x73, 0x77, 0x77, 0x67, 0x03, 0xF3, 0xFF, 0xFF, 0x7F, 0x07, 0x00,
  0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x30, 0x38, 0x18, 0x08, 0x04, 0x3E, 0x3F, 0x3F, 0x3F,
  0x07, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x1C, 0x0F, 0x3F, 0x3F, 0x3F, 0x3F,
  0x38, 0x18, 0x0C, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x38, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x07, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

ConnectorPin sdaPin = ConnectorPin.P1Pin03;
ConnectorPin sclPin = ConnectorPin.P1Pin05;

var sendCommand = new Func&lt;byte[],bool&gt;((commands)=&gt;{
  lock (this)
  using (var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor()))
  {
    var connection = driver.Connect(SSD1306_I2C_ADDRESS);
    for(int c = 0; c &lt; commands.Length; c++)
    {
      connection.Write(new byte[]{ 0x00, commands[c] });
    }
  }
  return true;
});

var initialize = new Func&lt;bool&gt;(()=&gt;{
  // initialize display
  sendCommand(new byte[]{
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,
    SSD1306_SETMULTIPLEX, 0x3F,
    SSD1306_SETDISPLAYOFFSET, 0x00,
    SSD1306_SETSTARTLINE | 0x0,
    SSD1306_CHARGEPUMP, 0x14,
    SSD1306_MEMORYMODE, 0x00,
    SSD1306_SEGREMAP | 0x1,
    SSD1306_COMSCANDEC,
    SSD1306_SETCOMPINS, 0x12,
    SSD1306_SETCONTRAST, 0x9F,
    SSD1306_SETPRECHARGE, 0x22,
    SSD1306_SETVCOMDETECT, 0x40,
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_NORMALDISPLAY
  });
  return true;
});

var clearScreen = new Func&lt;bool&gt;(()=&gt;{
  // clear screen
  lock (this)
  using (var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor()))
  {
    var connection = driver.Connect(SSD1306_I2C_ADDRESS);
    for(int y = 0; y &lt; displayWidth * displayHeight / 8; y++)
    {
      connection.Write(new byte[]{ 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
    }
  }
  return true;
});

var displayInvert = new Func&lt;bool&gt;(()=&gt;{
  sendCommand(new byte[]{
    SSD1306_INVERTDISPLAY
  });
  return true;
});

var displayNormal = new Func&lt;bool&gt;(()=&gt;{
  sendCommand(new byte[]{
    SSD1306_NORMALDISPLAY
  });
  return true;
});

var displayOn = new Func&lt;bool&gt;(()=&gt;{
  sendCommand(new byte[]{
    SSD1306_DISPLAYON
  });
  return true;
});

var displayOff = new Func&lt;bool&gt;(()=&gt;{
  sendCommand(new byte[]{
    SSD1306_DISPLAYOFF
  });
  return true;
});

var gotoTextXY = new Func&lt;int, int, bool&gt;((col, row)=&gt;{
  // goto row,col
  sendCommand(new byte[]{
    (byte)(0xB0 + row),					//set page address
      (byte)(0x00 + (8*col &amp; 0x0F)),		//set column lower address
    (byte)(0x10 + ((8*col&gt;&gt;4)&amp;0x0F))	//set column higher address
  });
  return true;
});

var drawStride = new Func&lt;byte[], bool&gt;((data)=&gt;{
  lock (this)
  using (var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor()))
  {
    var connection = driver.Connect(SSD1306_I2C_ADDRESS);
    connection.Write(data);
  }
  return true;
});

var drawText = new Func&lt;string, bool&gt;((s)=&gt;{
  // draw text
  for(int x = 0; x &lt; s.Length; x++)
  {
    var data = new byte[9];
    data[0] = 0x40;
    Array.Copy(basicFont[s[x]-32], 0, data, 1, 8);
    drawStride(data);
  }
  return true;
});

var drawTextEx = new Func&lt;string, int, int, int, bool&gt;((s, cx, cy, font)=&gt;{
  int cursorX = cx;
  var charset = lcdfont_2l;
  if (font == 3) charset = lcdfont_3l;
  
  // draw text on the center
  for (int c = 0; c &lt; s.Length; c++)
  {
    int charIndex = -1;
    for(int i = 0; i &lt; charset.Length; i++)
    {
    	if (charset[i][0] == s[c])
        {
          charIndex = i;
          break;
        }
    }
    if (charIndex == -1) continue;
    
    byte[] fontData = charset[charIndex];
    int fontWidth = fontData[1];
    int fontLength = fontData[2];
    for (int y = 0; y &lt; (fontLength / fontWidth); y++)
    {

      sendCommand(new byte[]{
        (byte)(0xB0 + cy + y),						//set page address
        (byte)(0x00 + (cursorX &amp; 0x0F)),			//set column lower address
        (byte)(0x10 + ((cursorX&gt;&gt;4)&amp;0x0F))			//set column higher address
      });      

      var data = new byte[fontWidth + 1];
      data[0] = 0x40;
      Array.Copy(fontData, (y * fontWidth) + 3, data, 1, fontWidth);
      drawStride(data);

    }
    cursorX += fontWidth;
  }
  return true;
});

var drawLogo = new Func&lt;bool&gt;(()=&gt;{
  var data2 = new byte[512+1];
  data2[0] = 0x40;
  Array.Copy(logo, 0, data2, 1, 512);
  drawStride(data2);
  return true;
});

initialize();

// ...
sendCommand(new byte[]{
  SSD1306_COLUMNADDR, 0, (displayWidth - 1),
  SSD1306_PAGEADDR, 0, ((displayHeight / 8) - 1)
});

clearScreen();
//displayInvert();
displayNormal();
gotoTextXY(0, 0);
drawLogo();
gotoTextXY(0, 4);
drawText("Ssd 1306  Driver");
displayOn();



// handles web service calls
When.WebServiceCallReceived("Components.Ssd1306", (args)=&gt;{
  var response = "{ 'ResponseValue' : 'OK' }";
  var cmdParts = args.ToString().Split('/');
  if (cmdParts.Length &lt; 3) return false;
  //
  var nodeId = cmdParts[1];
  var command = cmdParts[2];
  var argument = ""; if (cmdParts.Length &gt; 3) argument = cmdParts[3];
  //
  if (nodeId == "0") // control the OLED display
  {
    switch(command)
    {
      case "Oled.DisplayClear":
      	clearScreen();
      	break;
      case "Oled.DisplayInvert":
      	displayInvert();
      	break;
      case "Oled.DisplayNormal":
      	displayNormal();
      	break;
      case "Oled.DisplayOn":
      	displayOn();
      	break;
      case "Oled.DisplayOff":
      	displayOff();
      	break;
      case "Oled.GoTo":
      	if (cmdParts.Length &lt;= 4) 
        {
          response = "{ 'ResponseValue' : 'INVALID ARGUMENTS' }";
          break;
        }
        int x = currentX = int.Parse(cmdParts[3]);
      	int y = currentY = int.Parse(cmdParts[4]);
      	gotoTextXY(x, y);
      	break;
      case "Oled.ShowLogo":
      	drawLogo();
      	break;
//      case "Oled.DrawNumber":
//      	drawNumbers(argument);
//      	break;
      case "Oled.DrawText":
      case "Oled.DrawText2":
      case "Oled.DrawText3":
        var align="";
        if (cmdParts.Length &gt; 4)
        {
          // align argument is the 5th parameter
          align = cmdParts[4].ToUpper();
        }
        var text = argument.Replace("%20", " ");
        switch (align)
        {
          case "LEFT":
          text = text.PadRight(16, ' ');
          break;
          case "RIGHT":
          text = text.PadLeft(16, ' ');
          break;
          case "CENTER":
          int spaces = 16 - text.Length; if (spaces &lt; 0) spaces = 0;
          int padLeft = (spaces / 2) + text.Length;
          text = text.PadLeft(padLeft).PadRight(16);          
          break;
        }
      	if (command.EndsWith("2"))
        {
	      	drawTextEx(text, currentX, currentY, 2);
        }
      	else if (command.EndsWith("3"))
        {
	      	drawTextEx(text, currentX, currentY, 3);
        }
      	else
        {
	      	drawText(text);
        }
      	break;
    }
  }
  return response;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>64</Address>
    <Name>SSD1306 OLED display (128x64)</Name>
    <Description>Display driver for I2C Ssd 1306 Oled display.</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// Call 'hg.SetConditionTrue()' when you want
// the 'Code To Run' to be executed.
hg.SetConditionTrue();
</ScriptCondition>
    <ScriptSource>var oled = hg.Modules.InDomain("Components.Ssd1306").WithAddress("0");
var temperature = hg.Modules.InDomain("Components.MCP3008").WithAddress("CH0").Get().Parameter("Sensor.Temperature");
var luminance = hg.Modules.InDomain("Components.MCP3008").WithAddress("CH1").Get().Parameter("Sensor.Luminance");
var energyLoad = hg.Program.WithName("Energy Monitor").Parameter("EnergyMonitor.KwLoad");
var operatingLights = hg.Program.WithName("Energy Monitor").Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = hg.Program.WithName("Energy Monitor").Parameter("EnergyMonitor.OperatingSwitches");
var weather = hg.Program.WithName("Weather Underground");

var monthNames = new Array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");
var dayNames = new Array("SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT");

oled.Command("Oled.DisplayClear").Execute();

while (hg.Program.IsEnabled)
{
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Eden TMP36 sensor
    oled.Command("Oled.GoTo").Execute("42/0");
    oled.Command("Oled.DrawText3").Execute("|" + (Math.round(temperature.DecimalValue * 10) / 10) + "\\");

    // Eden photo cell light sensor
    var lux = luminance.DecimalValue.toFixed(0);
    while (lux.length &lt; 4) lux = " " + lux;
    oled.Command("Oled.GoTo").Execute("0/0");
    oled.Command("Oled.DrawText2").Execute(lux);
    oled.Command("Oled.GoTo").Execute("0/2");
    oled.Command("Oled.DrawText").Execute("*LUX");

    // Current date time
    var today = new Date();
    var time = formatTime(today);
    var displayDate = dayNames[today.getDay()] + ',' + monthNames[today.getMonth()] + ' ' + today.getDate(); 
    oled.Command("Oled.GoTo").Execute("0/4");
    oled.Command("Oled.DrawText2").Execute(displayDate + "/CENTER");
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute(time.Time + ' ' + time.AmPm + "/CENTER");
    hg.Pause(5);
  }
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Weather Underground data  
    var weatherText = weather.Parameter("Conditions.City").Value + " " + weather.Parameter("Conditions.TemperatureC").Value;
    if (weatherText.trim() != '')
    {
      oled.Command("Oled.GoTo").Execute("0/4");
      oled.Command("Oled.DrawText2").Execute(weatherText + "/CENTER");
      oled.Command("Oled.GoTo").Execute("0/6");
      oled.Command("Oled.DrawText2").Execute(weather.Parameter("Conditions.Description").Value + "/CENTER");
      hg.Pause(5);
    }
  }
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Energy monitor Kw Load
    oled.Command("Oled.GoTo").Execute("0/4");
    oled.Command("Oled.DrawText2").Execute("Energy Use/CENTER");
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute('/CENTER');
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute('#' + operatingLights.Value + ' |' + operatingSwitches.Value + ' ^' + (Math.round(energyLoad.DecimalValue * 10) / 10));
  }  
  hg.Pause(5);
}

function formatTime(date) {
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var ampm = hours &gt;= 12 ? 'PM' : 'AM';
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes &lt; 10 ? '0'+minutes : minutes;
  var strTime = hours + ':' + minutes;
  return { 'Time' : strTime, 'AmPm' : ampm};
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>65</Address>
    <Name>Eden Oled Display</Name>
    <Description>Push Eden Board data to Ssd 1306 Oled Display connected to Raspberry Pi I2C port.
(Ssd 1306 display program must be also enabled)</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// Call 'hg.SetConditionTrue()' when you want
// the 'Code To Run' to be executed.
hg.Program.Setup(function(){
  hg.Program.AddInputField("EdenDisplay.ButtonProgram.1", "", "Button #1 program");
  hg.Program.AddInputField("EdenDisplay.ButtonProgram.2", "", "Button #2 program");
  hg.Program.AddInputField("EdenDisplay.ButtonProgram.3", "", "Button #3 program");
  hg.Program.AddInputField("EdenDisplay.ButtonProgram.4", "", "Button #4 program");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.1", "Toggle by button #1");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.2", "Toggle by button #2");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.3", "Toggle by button #3");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.4", "Toggle by button #4");
});
hg.SetConditionTrue();
</ScriptCondition>
    <ScriptSource>// Get a reference to the OLED object
var oled = hg.Modules.InDomain("Components.Ssd1306").WithAddress("0");

// Get a reference to other programs of which data will be displayed on the OLED screen
var thermostat = hg.Modules.WithName("Generic Thermostat").Get();
var setPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
var securitySystem = hg.Modules.WithName("Security Alarm System").Get();
var securityArmed = securitySystem.Parameter("HomeGenie.SecurityArmed");

// Global state variables
var currentContext = '';
var displayMode = 'normal';
var lastButton = '';
var startPressTs = new Date().getTime();
// This system wide parameter is used to prevent other apps
// from writing on the OLED screen  when the menu is open
hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';

// Menu screens

function menuShowMain()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("----[ MENU ]----");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("1 Set Point/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText").Execute("2 Security/LEFT");
  oled.Command("Oled.GoTo").Execute("0/6");
  oled.Command("Oled.DrawText").Execute("3 Invert Display/LEFT");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("4 Exit/LEFT");
}

function menuShowSetPoint()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Set Point:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute(setPoint.Value + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("2 + 3 -   EXIT 4/CENTER");  
}

function menuShowSecurity()
{
  var level = securitySystem.Parameter("Status.Level");
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Security:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute((securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0 ? "ARMED" : "DISARMED") + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  if (securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0)
  {
    oled.Command("Oled.DrawText").Execute("2 DISARM  EXIT 4/CENTER");
  }
  else
  {
    oled.Command("Oled.DrawText").Execute("2 ARM     EXIT 4/CENTER");
  }
}

// Context switch functions

function setContext(ctx)
{
  currentContext = ctx;
  hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'ON';
  switch(ctx)
  {
    case 'main':
      menuShowMain();
      break;
    case 'setpoint':
      menuShowSetPoint();
      break;
    case 'security':
      menuShowSecurity();
      break;
    case 'energysaving':
      menuShowEnergySaving();
      break;
    case 'exit':
      oled.Command("Oled.GoTo").Execute("0/3");
      oled.Command("Oled.DrawText").Execute("/CENTER");
      oled.Command("Oled.GoTo").Execute("0/4");
      oled.Command("Oled.ShowLogo").Execute();
      hg.Pause(2);
      hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';
      break;
  }
}

function setContextInput(input)
{
  switch (input)
  {
    case '1': // BUTTON #1
      switch (currentContext)
      {
        case 'main':
          setContext('setpoint');
          break;
      }
      break;
    case '2': // BUTTON #2
      switch (currentContext)
      {
        case 'main':
          setContext('security');
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue + 1));
          menuShowSetPoint();
          break;
        case 'security':
          if (securityArmed.DecimalValue == 0)
          {
            securitySystem.Command("Control.On").Execute();
          }
          else
          {
            securitySystem.Command("Control.Off").Execute();
          }
          menuShowSecurity();
          break;
      }
      break;
    case '3': // BUTTON #3
      switch (currentContext)
      {
        case 'main':
          if (displayMode == 'normal')
          {
            displayMode = 'inverse';
            oled.Command("Oled.DisplayInvert").Execute();
          }
          else
          {
            displayMode = 'normal';
            oled.Command("Oled.DisplayNormal").Execute();
          }
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue - 1));
          menuShowSetPoint();
          break;
      }
      break;
    case '4': // BUTTON #4
      switch (currentContext)
      {
        case 'main':
          setContext('exit');
          break;
        default:
          setContext('main');
          break;
      }
      break;
  }

}

hg.When.ModuleParameterChange(function(module, parameter){
  if (module.Instance.Domain == 'RaspberryPi.Gpio' &amp;&amp; parameter.Is("Status.Level") &amp;&amp; parameter.DecimalValue &gt; 0)
  {
    // A button was pressed, store the timestamp
    startPressTs = new Date().getTime();
    if (currentContext == '')
    {
      // A long press of 3 seconds will open the settings menu
      var duration = 0;
      while (duration &lt; 3 &amp;&amp; parameter.DecimalValue &gt; 0)
      {
          hg.Pause(1);
          duration++;
      }
      if (duration &gt;= 3) setContext('main');
      return true;
    }
    //
    // The input is only processed when the settings menu is opened
    switch (module.Instance.Address)
    {
        // BUTTON #1 pressed
      case 'GPIO22': 
        setContextInput('1');
        break;
        // BUTTON #2 pressed
      case 'GPIO23':
        setContextInput('2');
        break;
        // BUTTON #3 pressed
      case 'GPIO24':
        setContextInput('3');
        break;
        // BUTTON #4 pressed
      case 'GPIO25':
        setContextInput('4');
        break;
    }
  }
  else if (module.Instance.Domain == 'RaspberryPi.Gpio' &amp;&amp; parameter.Is("Status.Level") &amp;&amp; parameter.DecimalValue == 0)
  {
    // A button was released
    var currentTs = new Date().getTime();
    if (currentContext == 'exit')
    {
      currentContext = '';
    }
    else if (currentContext == '' &amp;&amp; currentTs - startPressTs &lt; 3000) // 3 seconds
    {
      // We are outside the settings menu, so
      // the buttons functionality is to toggle scenarios/devices
      lastButton = '';
      switch (module.Instance.Address)
      {
          // BUTTON #1 released
        case 'GPIO22': 
          lastButton = '1';
          break;
          // BUTTON #2 released
        case 'GPIO23': 
          lastButton = '2';
          break;
          // BUTTON #3 released
        case 'GPIO24': 
          lastButton = '3';
          break;
          // BUTTON #4 released
        case 'GPIO25':
          lastButton= '4';
          break;
      }
      if (lastButton != '')
      {
        hg.Modules.WithFeature("EdenDisplay.ToggleButton." + lastButton).Toggle();
        var program = hg.Program.InputField("EdenDisplay.ButtonProgram." + lastButton).Value;
        // scenarios are specified in the form &lt;program_id_or_name&gt;/&lt;options&gt;
        if (program != '')
        {
          // it is a scenario
          var options = '';
          if (program.lastIndexOf('/') &gt; 0) 
          {
            options = program.substring(program.lastIndexOf('/') + 1);
            program = program.substring(0, program.lastIndexOf('/'));
          }
          hg.Program.Run(program, options);
        }
      }
    }
    // Reset long press timestamp
    startPressTs = new Date().getTime();
  }
  else if (parameter.Is("HomeGenie.SecurityArmed") &amp;&amp; currentContext == "security")
  {
    // update security menu
    menuShowSecurity();
  }
  return true;
});

hg.Program.GoBackground();
</ScriptSource>
    <ScriptErrors />
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>66</Address>
    <Name>Eden Oled Menu</Name>
    <Description>Implement a settings menu for Eden Oled Display.
It requires 4 input buttons connected to GPIO#22,#23,#24,#25.
A long press of at least 3 seconds will open the settings menu.
A normal press will toggle scenarios/devices associated to the buttons.
</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>// returning true will execute the "Code to Run"
Program.Setup(()=&gt;{
  	// Connector CN8
  	Program.AddInputField("Gpio.PC19", "OFF", "#03 PC19");
  	Program.AddInputField("Gpio.PC21", "OFF", "#04 PC21");
  	Program.AddInputField("Gpio.PC20", "OFF", "#05 PC20");
  	Program.AddInputField("Gpio.PC22", "OFF", "#06 PC22");
  	Program.AddInputField("Gpio.PB14", "OFF", "#07 PB14");
  	Program.AddInputField("Gpio.PB16", "OFF", "#08 PB16");
  	Program.AddInputField("Gpio.PB15", "OFF", "#09 PB15");
  	Program.AddInputField("Gpio.PB17", "OFF", "#10 PB17");
  	Program.AddInputField("Gpio.PI20", "OFF", "#11 PI20");
  	Program.AddInputField("Gpio.PI14", "OFF", "#12 PI14");
  	Program.AddInputField("Gpio.PI21", "OFF", "#13 PI21");
  	Program.AddInputField("Gpio.PI15", "OFF", "#14 PI15");
  	Program.AddInputField("Gpio.PI03", "OFF", "#15 PI03");
  	Program.AddInputField("Gpio.PB03", "OFF", "#16 PB03");
  	Program.AddInputField("Gpio.PB02", "OFF", "#17 PB02");
  	Program.AddInputField("Gpio.PB04", "OFF", "#18 PB04");
  	Program.AddInputField("Gpio.PB18", "OFF", "#19 PB18");
  	Program.AddInputField("Gpio.PB19", "OFF", "#20 PB19");
  	// Connector CN9
  	Program.AddInputField("Gpio.PG00", "OFF", "#21 PG00");
  	Program.AddInputField("Gpio.PG03", "OFF", "#22 PG03");
  	Program.AddInputField("Gpio.PG02", "OFF", "#23 PG02");
  	Program.AddInputField("Gpio.PG01", "OFF", "#24 PG01");
  	Program.AddInputField("Gpio.PG04", "OFF", "#25 PG04");
  	Program.AddInputField("Gpio.PG05", "OFF", "#26 PG05");
  	Program.AddInputField("Gpio.PG06", "OFF", "#27 PG06");
  	Program.AddInputField("Gpio.PG07", "OFF", "#28 PG07");
  	Program.AddInputField("Gpio.PG08", "OFF", "#29 PG08");
  	Program.AddInputField("Gpio.PG09", "OFF", "#30 PG09");
  	Program.AddInputField("Gpio.PG10", "OFF", "#31 PG10");
  	Program.AddInputField("Gpio.PG11", "OFF", "#32 PG11");
});
return true;
</ScriptCondition>
    <ScriptSource>var moduleDomain = "RaspberryPi.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
// GPIO on connector CN8
var pc19 = Program.InputField("Gpio.PC19").Value.ToLower();
var pc21 = Program.InputField("Gpio.PC21").Value.ToLower();
var pc20 = Program.InputField("Gpio.PC20").Value.ToLower();
var pc22 = Program.InputField("Gpio.PC22").Value.ToLower();
var pb14 = Program.InputField("Gpio.PB14").Value.ToLower();
var pb16 = Program.InputField("Gpio.PB16").Value.ToLower();
var pb15 = Program.InputField("Gpio.PB15").Value.ToLower();
var pb17 = Program.InputField("Gpio.PB17").Value.ToLower();
var pi20 = Program.InputField("Gpio.PI20").Value.ToLower();
var pi14 = Program.InputField("Gpio.PI14").Value.ToLower();
var pi21 = Program.InputField("Gpio.PI21").Value.ToLower();
var pi15 = Program.InputField("Gpio.PI15").Value.ToLower();
var pi03 = Program.InputField("Gpio.PI03").Value.ToLower();
var pb03 = Program.InputField("Gpio.PB03").Value.ToLower();
var pb02 = Program.InputField("Gpio.PB02").Value.ToLower();
var pb04 = Program.InputField("Gpio.PB04").Value.ToLower();
var pb18 = Program.InputField("Gpio.PB18").Value.ToLower();
var pb19 = Program.InputField("Gpio.PB19").Value.ToLower();
// GPIO on connector CN9
var pg00 = Program.InputField("Gpio.PG00").Value.ToLower();
var pg03 = Program.InputField("Gpio.PG03").Value.ToLower();
var pg02 = Program.InputField("Gpio.PG02").Value.ToLower();
var pg01 = Program.InputField("Gpio.PG01").Value.ToLower();
var pg04 = Program.InputField("Gpio.PG04").Value.ToLower();
var pg05 = Program.InputField("Gpio.PG05").Value.ToLower();
var pg06 = Program.InputField("Gpio.PG06").Value.ToLower();
var pg07 = Program.InputField("Gpio.PG07").Value.ToLower();
var pg08 = Program.InputField("Gpio.PG08").Value.ToLower();
var pg09 = Program.InputField("Gpio.PG09").Value.ToLower();
var pg10 = Program.InputField("Gpio.PG10").Value.ToLower();
var pg11 = Program.InputField("Gpio.PG11").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
// GPIO on connector CN8
if (pc19 != "off") pinMapping.Add(new { Config = pc19, Address = "PC19", Pin = ConnectorPin.CB3_CN8Pin05, Direction = (pc19 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc21 != "off") pinMapping.Add(new { Config = pc21, Address = "PC21", Pin = ConnectorPin.CB3_CN8Pin06, Direction = (pc21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc20 != "off") pinMapping.Add(new { Config = pc20, Address = "PC20", Pin = ConnectorPin.CB3_CN8Pin07, Direction = (pc20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc22 != "off") pinMapping.Add(new { Config = pc22, Address = "PC22", Pin = ConnectorPin.CB3_CN8Pin08, Direction = (pc22 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb14 != "off") pinMapping.Add(new { Config = pb14, Address = "PB14", Pin = ConnectorPin.CB3_CN8Pin09, Direction = (pb14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb16 != "off") pinMapping.Add(new { Config = pb16, Address = "PB16", Pin = ConnectorPin.CB3_CN8Pin10, Direction = (pb16 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb15 != "off") pinMapping.Add(new { Config = pb15, Address = "PB15", Pin = ConnectorPin.CB3_CN8Pin11, Direction = (pb15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb17 != "off") pinMapping.Add(new { Config = pb17, Address = "PB17", Pin = ConnectorPin.CB3_CN8Pin12, Direction = (pb17 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi20 != "off") pinMapping.Add(new { Config = pi20, Address = "PI20", Pin = ConnectorPin.CB3_CN8Pin15, Direction = (pi20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi14 != "off") pinMapping.Add(new { Config = pi14, Address = "PI14", Pin = ConnectorPin.CB3_CN8Pin16, Direction = (pi14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi21 != "off") pinMapping.Add(new { Config = pi21, Address = "PI21", Pin = ConnectorPin.CB3_CN8Pin17, Direction = (pi21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi15 != "off") pinMapping.Add(new { Config = pi15, Address = "PI15", Pin = ConnectorPin.CB3_CN8Pin18, Direction = (pi15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi03 != "off") pinMapping.Add(new { Config = pi03, Address = "PI03", Pin = ConnectorPin.CB3_CN8Pin19, Direction = (pi03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb03 != "off") pinMapping.Add(new { Config = pb03, Address = "PB03", Pin = ConnectorPin.CB3_CN8Pin20, Direction = (pb03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb02 != "off") pinMapping.Add(new { Config = pb02, Address = "PB02", Pin = ConnectorPin.CB3_CN8Pin21, Direction = (pb02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb04 != "off") pinMapping.Add(new { Config = pb04, Address = "PB04", Pin = ConnectorPin.CB3_CN8Pin22, Direction = (pb04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb18 != "off") pinMapping.Add(new { Config = pb18, Address = "PB18", Pin = ConnectorPin.CB3_CN8Pin23, Direction = (pb18 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb19 != "off") pinMapping.Add(new { Config = pb19, Address = "PB19", Pin = ConnectorPin.CB3_CN8Pin25, Direction = (pb19 == "out" ? PinDirection.Output : PinDirection.Input) });
// GPIO on connector CN9
if (pg00 != "off") pinMapping.Add(new { Config = pg00, Address = "PG00", Pin = ConnectorPin.CB3_CN9Pin03, Direction = (pg00 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg03 != "off") pinMapping.Add(new { Config = pg03, Address = "PG03", Pin = ConnectorPin.CB3_CN9Pin04, Direction = (pg03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg02 != "off") pinMapping.Add(new { Config = pg02, Address = "PG02", Pin = ConnectorPin.CB3_CN9Pin05, Direction = (pg02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg01 != "off") pinMapping.Add(new { Config = pg01, Address = "PG01", Pin = ConnectorPin.CB3_CN9Pin06, Direction = (pg01 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg04 != "off") pinMapping.Add(new { Config = pg04, Address = "PG04", Pin = ConnectorPin.CB3_CN9Pin07, Direction = (pg04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg05 != "off") pinMapping.Add(new { Config = pg05, Address = "PG05", Pin = ConnectorPin.CB3_CN9Pin08, Direction = (pg05 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg06 != "off") pinMapping.Add(new { Config = pg06, Address = "PG06", Pin = ConnectorPin.CB3_CN9Pin09, Direction = (pg06 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg07 != "off") pinMapping.Add(new { Config = pg07, Address = "PG07", Pin = ConnectorPin.CB3_CN9Pin10, Direction = (pg07 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg08 != "off") pinMapping.Add(new { Config = pg08, Address = "PG08", Pin = ConnectorPin.CB3_CN9Pin11, Direction = (pg08 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg09 != "off") pinMapping.Add(new { Config = pg09, Address = "PG09", Pin = ConnectorPin.CB3_CN9Pin12, Direction = (pg09 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg10 != "off") pinMapping.Add(new { Config = pg10, Address = "PG10", Pin = ConnectorPin.CB3_CN9Pin13, Direction = (pg10 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg11 != "off") pinMapping.Add(new { Config = pg11, Address = "PG11", Pin = ConnectorPin.CB3_CN9Pin14, Direction = (pg11 == "out" ? PinDirection.Output : PinDirection.Input) });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	if (pc.Direction == PinDirection.Input)
    {
	  	configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
      	if (pc.Config.EndsWith("+"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
        }
      	else if (pc.Config.EndsWith("-"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
        }
		Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
    }
  	else
    {
	  	configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
		Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
    }
    configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
	connection = new GpioConnection(configuration);
}
catch 
{
  	Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  	Pause(10);
  	return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  	var address = args.Configuration.Name;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
    Program.RaiseEvent(module, "Status.Level", 
                       args.Enabled ? "1" : "0",
                       address);
  
});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	var address = pc.Address;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
	module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errorMessage = "";
	try
	{
		string address = reqs[1];
      	string command = reqs[2];
        //
        switch(command)
        {
          // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
          case "Control.On":
          connection[address] = true;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
          case "Control.Off":
          connection[address] = false;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
          case "Control.Toggle":
          connection.Toggle(address);
          break;
        }
      	//
        return "{ 'ResponseValue' : 'OK' }";    
    } 
  	catch (Exception ex) 
    { 
	    errorMessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>150</Address>
    <Name>GPIO Modules</Name>
    <Description>CubieTruck/CubieBoard3 GPIOs mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1).
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
    <Group>CubieTruck</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// this is a background app
// so we just put initialization code here and a return true
// to activate the background task loop

// ...
Program.Setup(()=&gt;
{              
	Program.AddInputField("PollInterval", "45", "Poll Interval (seconds)");
	Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Sensor", "HomeGenie.ZWaveMeterPoll", "Poll meter Watt");
});
//
return true; // execute "Code To Run"
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveMeterPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Meter.Get").Execute("2");
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.InputField("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveMeterPoll</Property>
        <Description>Poll meter Watt</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>40</Address>
    <Name>Meter Watt Poll</Name>
    <Description>Periodically reads instant Watt value from meter devices</Description>
    <Group>Z-Wave</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.
return true;
</ScriptCondition>
    <ScriptSource>var address = 0x38;

var clockPin = Pcf8574Pin.P2;
var readWritePin = Pcf8574Pin.P1;
var registerSelectPin = Pcf8574Pin.P0;
var backlightPin = Pcf8574Pin.P3;

var dataPins = new[]
{
  Pcf8574Pin.P4,
  Pcf8574Pin.P5,
  Pcf8574Pin.P6,
  Pcf8574Pin.P7
};

var sdaPin = ConnectorPin.P1Pin03;
var sclPin = ConnectorPin.P1Pin05;
var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor()) { ClockDivider = 512 };
var connection = new Pcf8574I2cConnection(driver.Connect(address));

dynamic configuration = new dynamic();
configuration.Pins = new Hd44780Pins(
  connection.Out(registerSelectPin),
  connection.Out(clockPin),
  dataPins.Select(p =&gt; (IOutputBinaryPin)connection.Out(p)))
{
  Backlight = connection.Out(backlightPin),
  ReadWrite = connection.Out(readWritePin),
};

var settings = new Hd44780LcdConnectionSettings
{
  ScreenWidth = 20,
  ScreenHeight = 2,
};

using (var display = new Hd44780LcdConnection(settings, configuration.Pins))
{
  display.SetCustomCharacter(1, new byte[] {0x0, 0x0, 0x04, 0xe, 0x1f, 0x0, 0x0});
  display.SetCustomCharacter(2, new byte[] {0x0, 0x0, 0x1f, 0xe, 0x04, 0x0, 0x0});
  display.Clear();
  display.WriteLine("OS Version");
  display.WriteLine(Environment.OSVersion);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>false</IsRunning>
    <Features />
    <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>67</Address>
    <Name>HD44780 LCD PCF8574</Name>
    <Description>Example of using HD44780 LCD with PCF8574 I2C I/O expander</Description>
    <Group>Raspberry Pi</Group>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>DateTime dateCou ; 
DateTime dateInit ;
DateTime dateBase ;
string tabMonth = "" ;

int offsetYear, yearCou ;
int moiInit = 1 ;
int nbYear = 0 ;
DayOfWeek dayOfWeek ;

Program.Setup( () =&gt; {
  
    Program.AddControlWidget("DaniMail/generic/calendrier");

    Program.AddInputField("Calend.Pair", "", "Année Paire" );
    Program.AddInputField("Calend.Impair", "", "Année Impaire" );
    for( int i=0 ; i&lt;12 ; i++ )
    {
      Program.AddInputField("Calend.Year.0." + i.ToString(), "", "Calendrier année paire - Mois " + i.ToString() );
      Program.AddInputField("Calend.Year.1." + i.ToString(), "", "Calendrier année impaire - Mois " + i.ToString() );
    }
  
    dateCou = DateTime.Now ;
    yearCou = dateCou.Year ;
    dateInit = new DateTime( yearCou, 1, 1 ) ;
    offsetYear = (yearCou % 2) ;
    if( (yearCou % 2) == 0 )
        tabMonth =  Program.InputField("Calend.Year.0." + (dateCou.Month-1) ).Value ;
    else
        tabMonth = Program.InputField("Calend.Year.1." + (dateCou.Month-1) ).Value;
    if( String.IsNullOrEmpty( tabMonth ) )
    {
        if( (yearCou % 2) == 0 )
        {
            Program.InputField("Calend.Pair").Value = yearCou.ToString() ;
            Program.InputField("Calend.Impair").Value = (yearCou+1).ToString() ;
        }
        else
        {
            Program.InputField("Calend.Impair").Value = yearCou.ToString() ;
            Program.InputField("Calend.Pair").Value = (yearCou+1).ToString() ;
        }
        do
        {
            dateBase = dateInit ;
            if( moiInit != dateInit.Month )
            {
              Program.InputField( "Calend.Year." + offsetYear.ToString() + "." + (moiInit-1).ToString() ).Value = tabMonth ;
              if( dateInit.Month == 1 )
              {
                 if( offsetYear == 0)
                   offsetYear = 1 ;
                 else
                   offsetYear = (dateInit.Year % 2) ;
                 nbYear += 1 ;
              }
              moiInit = dateInit.Month ;
              tabMonth = "" ;
            }
            if( ((dateInit.Month == 1) || (dateInit.Month == 5) || (dateInit.Month == 11)) &amp;&amp; (dateInit.Day == 1) )
               tabMonth += "F" ;
            else {
              if( (dateInit.Month == 5) &amp;&amp; (dateInit.Day == 8) )
                tabMonth += "F" ;
              else
                if( (dateInit.Month == 7) &amp;&amp; (dateInit.Day == 14) )
                  tabMonth += "F" ;
                else
                if( (dateInit.Month == 8) &amp;&amp; (dateInit.Day == 15) )
                  tabMonth += "F" ;
                else
                  if( (dateInit.Month == 11) &amp;&amp; (dateInit.Day == 11) )
                    tabMonth += "F" ;
                  else {
                    if( (dateInit.Month == 12) &amp;&amp; (dateInit.Day == 25) )
                      tabMonth += "F" ;
                    else
                    {
                      dayOfWeek = dateInit.DayOfWeek ;
                      if( (dayOfWeek == DayOfWeek.Saturday) || (dayOfWeek == DayOfWeek.Sunday) )
                        tabMonth += "W" ;
                      else
                        tabMonth += "O" ;
                    }
                  }
            }
            dateInit = dateBase.AddDays( 1 ) ;
        }
        while( nbYear &lt; 2 ) ;
    }
//  Program.Notify("Calendrier", Program.Module.Domain+" "+Program.Module.Name+" "+Program.Module.Address );
});

return true;</ScriptCondition>
    <ScriptSource>DateTime newDate ; 
bool init = false ;
int yearSel = 0 ;
int yearNow = 0 ;

When.WebServiceCallReceived(Program.Module.Domain+"/"+Program.Module.Address+"/Calendrier.SetMonth",(args)=&gt;{
    string[] reqs = ((string)args).Split('/');

    int annee = Convert.ToInt32(reqs[0]);
    int mois = Convert.ToInt32(reqs[1]);
    if((mois&gt;=0) &amp;&amp; (mois&lt;12))
    {
        DateTime localDate = DateTime.Now ;
        Settings.Parameter("Calend.Year."+mois.ToString()).Value = Program.InputField("Calend.Year."+(annee%2).ToString()+"."+mois.ToString()).Value;
        Settings.Parameter("Schedule.Set").Value = "1" ;
        Program.Notify("Calendrier","SetMonth "+mois.ToString()+"/"+annee.ToString());
    }
    return true;
});

while (Program.IsEnabled)
{
//  int timePause ;
    newDate = DateTime.Now ;
    yearNow = newDate.Year ;
    if( yearSel != yearNow )
    {
        DateTime dateInit ;
        DateTime dateBase ;
        string tabMonth = "" ;
        int offsetYear ;
        int moiInit = 1 ;
        int nbYear = 0 ;
        DayOfWeek dayOfWeek ;
        string szPar ;
        int nextYear = yearNow+1 ;
      
        offsetYear = nextYear%2 ;
        if( offsetYear == 0 )
            szPar = "Calend.Pair" ;
        else
            szPar = "Calend.Impair" ;
        if( nextYear.ToString() != Program.InputField( szPar ).Value )
        {
            dateInit = new DateTime( nextYear, 1, 1 ) ;
            do
            {
                dateBase = dateInit ;
                if( moiInit != dateInit.Month )
                {
                  Program.InputField( "Calend.Year." + offsetYear.ToString() + "." + (moiInit-1).ToString() ).Value = tabMonth ;
                  if( dateInit.Month == 1 )
                  {
                     if( offsetYear == 0)
                       offsetYear = 1 ;
                     else
                       offsetYear = (dateInit.Year % 2) ;
                     nbYear += 1 ;
                  }
                  moiInit = dateInit.Month ;
                  tabMonth = "" ;
                }
                if( ((dateInit.Month == 1) || (dateInit.Month == 5) || (dateInit.Month == 11)) &amp;&amp; (dateInit.Day == 1) )
                   tabMonth += "F" ;
                else {
                  if( (dateInit.Month == 5) &amp;&amp; (dateInit.Day == 8) )
                    tabMonth += "F" ;
                  else
                    if( (dateInit.Month == 7) &amp;&amp; (dateInit.Day == 14) )
                      tabMonth += "F" ;
                    else
                    if( (dateInit.Month == 8) &amp;&amp; (dateInit.Day == 15) )
                      tabMonth += "F" ;
                    else
                      if( (dateInit.Month == 11) &amp;&amp; (dateInit.Day == 11) )
                        tabMonth += "F" ;
                      else {
                        if( (dateInit.Month == 12) &amp;&amp; (dateInit.Day == 25) )
                          tabMonth += "F" ;
                        else
                        {
                          dayOfWeek = dateInit.DayOfWeek ;
                          if( (dayOfWeek == DayOfWeek.Saturday) || (dayOfWeek == DayOfWeek.Sunday) )
                            tabMonth += "W" ;
                          else
                            tabMonth += "O" ;
                        }
                      }
                }
                dateInit = dateBase.AddDays( 1 ) ;
            }
            while( nbYear &lt; 1 ) ;
            Program.InputField(szPar).Value = nextYear.ToString() ;
       }
        yearSel = yearNow ;
        init = false ;
    }
    if( init == false )
    {
      for( int i=0 ; i&lt;12 ; i++ )
      {
        if( (yearNow % 2) == 0 )
           Settings.Parameter("Calend.Year."+i.ToString()).Value = Program.InputField("Calend.Year.0."+i.ToString()).Value;
        else
           Settings.Parameter("Calend.Year."+i.ToString()).Value = Program.InputField("Calend.Year.1."+i.ToString()).Value;
      }
      Settings.Parameter("Schedule.Set").Value="0"; ;
      init = true ;
    }
//  timePause=((23-newDate.Hour)*3600)+((59-newDate.Minute)*60)+(60-newDate.Second);
    Pause(300);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>510</Address>
    <Name>Timetable Calendar</Name>
    <Description>Calendar widget for use with Timetable widget.</Description>
    <Group>Scheduling</Group>
    <ActivationTime>2015-01-25T19:16:04.748911Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:19.786261Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup( () =&gt; {
   Program.AddControlWidget("DaniMail/generic/tablehoraire");
   for( int i=0 ; i&lt;10 ; i++ )
      Program.AddInputField("Table.Therm." + i.ToString(), "", "Thermostat : Timetable "+i.ToString() );
   for( int i=0 ; i&lt;6 ; i++ )
      Program.AddInputField("Table.OnOff." + i.ToString(), "", "Switch and light : Timetable "+i.ToString() );
   for( int i=0 ; i&lt;6 ; i++ )
      Program.AddInputField("Table.Level." + i.ToString(), "", "Shutter and dimmer : Timetable "+i.ToString() );
});

return true;</ScriptCondition>
    <ScriptSource>bool initGlobal = false ;
  
// implement Web API calls as defined in the Thermostat widget No used and not finished actually
When.WebServiceCallReceived(Program.Module.Domain+"/"+Program.Module.Address+"/Table.Set",(args)=&gt;{
  string typeTable = args.ToString().Split('/')[0] ;
  string []parSet = typeTable.Split('.'); 
  
  switch( parSet[2] )
  {
      case "Therm":
      case "OnOff":
      case "Level":
        string namePar = parSet[1]+"."+parSet[2]+"."+parSet[3];
        Settings.Parameter(namePar).Value = Program.InputField(namePar).Value;
        Program.Notify("Timetable","Set " + namePar);
        if(parSet[2] == "Therm")
            Settings.Parameter("Schedule.Set").Value = "1" ;
        break;
      default :
        Program.Notify("Timetable","Error setting " + typeTable);
        break;
  }
  return true;
});

while (Program.IsEnabled)
{
  if( initGlobal == false )
  {
 //  Settings.Parameter("TabHOR.Module").Value = Program.Module.Address ;
     for( int i=0 ; i&lt;10 ; i++ )
         Settings.Parameter("Table.Therm."+i.ToString() ).Value = Program.InputField("Table.Therm."+i.ToString()).Value;
     for( int i=0 ; i&lt;6 ; i++ )
         Settings.Parameter("Table.OnOff."+i.ToString() ).Value = Program.InputField("Table.OnOff."+i.ToString()).Value;
     for( int i=0 ; i&lt;6 ; i++ )
         Settings.Parameter("Table.Level."+i.ToString() ).Value = Program.InputField("Table.Level."+i.ToString()).Value;
      Settings.Parameter("Schedule.Set").Value = "0" ;
      initGlobal = true ;  
  }
  Pause(300);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features />
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>511</Address>
    <Name>Timetable</Name>
    <Description>Widget for scheduling thermostats, lights and shutters.</Description>
    <Group>Scheduling</Group>
    <ActivationTime>2015-01-25T19:16:06.050387Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:20.288007Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Put your trigger code logic here.
// To execute the Code To Run,
// use a 'return true' or 'return false' otherwise.
Program.Setup(()=&gt;{
  Program.AddInputField("ThermostatsNumber", "4", "Number of virtual thermostats (Max.8)");
  int thermsCount = (int)Program.InputField("ThermostatsNumber").DecimalValue;
  if( thermsCount &gt; 8 )
    thermsCount = 8;
  if(thermsCount &gt; 0) 
  {
    Program.AddVirtualModules("HomeAutomation.DaniMail", "Thermostat", "DaniMail/generic/thermostats", 1, thermsCount);
    for(int x = 0; x &lt; thermsCount; x++)
    {
      var module = Modules.InDomain("HomeAutomation.DaniMail").WithAddress((x+1).ToString()).Get();
      if( module.Instance != null &amp;&amp; module.Parameter("ModuleTemperature").Value.Length == 0 )
      {
        // Paramètres statiques
        module.Parameter("TimeTable.W").Value = "0";
        module.Parameter("TimeTable.O").Value = "1";
        module.Parameter("TimeTable.F").Value = "2";
        module.Parameter("TimeTable.S").Value = "3";
        module.Parameter("Thermostat.SetPoint.NoFrost").Value = "5";
        module.Parameter("Thermostat.SetPoint.Eco").Value = "16";
        module.Parameter("Thermostat.SetPoint.Heating").Value = "20";
        // Pamètres dynamiques
        module.Parameter("Sensor.Temperature").Value = "";
        module.Parameter("Sensor.Humidity").Value = "";
        module.Parameter("Status.Battery").Value = "";
        module.Parameter("Thermostat.OperatingState").Value = "";
        module.Parameter("Thermostat.Mode").Value = "Arrêt";
      }
    }
  }
  Program.AddFeatureTextInput("HomeAutomation.DaniMail", "Thermostat", "ModuleTemperature", "Module to read temperature from");
  Program.AddFeatureTextInput("HomeAutomation.DaniMail", "Thermostat", "SwitchModule1", "Module 1 to switch on/off");  
  Program.AddFeatureTextInput("HomeAutomation.DaniMail", "Thermostat", "SwitchModule2", "Module 2 to switch on/off");  
  Program.AddFeatureTextInput("HomeAutomation.DaniMail", "Thermostat", "SwitchModule3", "Module 3 to switch on/off");  
});

return true;
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin
const int HOLDING_MODE_DIFF = 1;

char typeDay,typeAction ;
string currentTable = "";
string newTable = "";
string szState = "";
int index, currentMonth = -1;
double temperatureAComparer = 0;
string currentMode = "";
int thermsCount = 0;
int nTempo=60;

bool[] holdingMode = new bool[8];
string tabMon = "";
string tabScene = "";

var ThermostatLogicRun = new Func&lt;bool&gt;(()=&gt;{
  string domainAddress = "";
  string domain = "";
  string address = "";

  thermsCount = (int)Program.InputField("ThermostatsNumber").DecimalValue;
  if( thermsCount &gt; 8 )
     thermsCount = 8;
  for(int x=0;x&lt;thermsCount;x++)
  {
    var moduleVirtuel = Modules.InDomain("HomeAutomation.DaniMail").WithAddress((x+1).ToString()).Get();
    
    if( moduleVirtuel.Instance.Name == "" )
    {
        Pause(1) ;
        continue ;
    }
    var name = "Thermostat " + moduleVirtuel.Instance.Name ;
    var temperature = moduleVirtuel.Parameter("Sensor.Temperature");
    var operatingState = moduleVirtuel.Parameter("Thermostat.OperatingState");
    var thermostatMode = moduleVirtuel.Parameter("Thermostat.Mode").Value;
    double nofrostSetPoint = moduleVirtuel.Parameter("Thermostat.SetPoint.NoFrost").DecimalValue;
    double ecoSetPoint = moduleVirtuel.Parameter("Thermostat.SetPoint.Eco").DecimalValue;
    double heatSetPoint = moduleVirtuel.Parameter("Thermostat.SetPoint.Heating").DecimalValue;
    // Get a reference to the temperature module
    domainAddress = moduleVirtuel.Parameter("ModuleTemperature").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var temperatureModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || temperatureModule.Instance == null)
    {
      Program.RaiseEvent(moduleVirtuel,"Thermostat.OperatingState", "! Erreur MT", "Thermostat");
      Program.Notify(name, "Spécifiez un Module Sonde valide.");
      Pause(2);
      continue;
    }
    // Get a reference to the switch/relay module 1
    domain = address = "";
    domainAddress = moduleVirtuel.Parameter("SwitchModule1").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var switchModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule.Instance == null)
    {
      Program.RaiseEvent(moduleVirtuel,"Thermostat.OperatingState", "! Erreur MS", "Thermostat");
      Program.Notify(name, "Spécifiez un Module Switch valide.");
      Pause(2);
      continue;
    }
    // Get a reference to the switch/relay module 2
    domain = address = "";
    domainAddress = moduleVirtuel.Parameter("SwitchModule2").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    bool switch2 = true ;
    var switchModule2 = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule2.Instance == null)
      switch2 = false ;
    // Get a reference to the switch/relay module 3
    domain = address = "";
    domainAddress = moduleVirtuel.Parameter("SwitchModule3").Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    bool switch3 = true ;
    var switchModule3 = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule3.Instance == null)
      switch3 = false ;
    // Traitement du module virtuel
    // Update Thermostat module Temperature field
    temperature.Value = temperatureModule.Parameter("Sensor.Temperature").Value;
    // Heat Mode
    typeAction = 'T'; // Test tempétarure
    currentMode = "";
    if(thermostatMode == "Comfort")
    {
       currentMode = "(C)";
       temperatureAComparer = heatSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0);
    }
    else
    //  Eco Mode
    if(thermostatMode == "Eco")
    {
       currentMode = "(E)";
       temperatureAComparer = ecoSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0);
    }
    else
    // NoFrost Mode
    if (thermostatMode == "NoFrost")
    {
       currentMode = "(H)";
       temperatureAComparer = nofrostSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0);
    }
    else
    // Off Mode
    if (thermostatMode == "Off")
    {
       currentMode = "(A)";
       temperatureAComparer = 0;
    }
    else
    // Program Mode
    if (thermostatMode == "Program")
    {
        DateTime currentTime = DateTime.Now ;
        if( Settings.Parameter("Schedule.Set").Value == "1" )
        {
           Settings.Parameter("Schedule.Set").Value = "0" ;
//         Program.Notify("Thermostat","Schedule.Set 1") ;
           currentMonth = -1 ;
           currentTable = "" ;
        }
        if( currentMonth != currentTime.Month )
        {
            currentMonth = currentTime.Month - 1 ;
            tabMon = Settings.Parameter( "Calend.Year." + currentMonth ).Value ;
        }
        if( tabMon.Length &lt; currentTime.Day )
        {
            typeAction = 'E'; // Erreur
            szState = "! Erreur LGCA";
            Program.Notify("Eclairage","Calendrier Erreur LG mois "+currentTime.Month) ;
            continue;
        }
        typeDay = tabMon[currentTime.Day-1] ;
        newTable = moduleVirtuel.Parameter("TimeTable."+typeDay).Value;
        if( newTable.Length != 0 )
        {
           if( newTable != currentTable )
           {
               currentTable = newTable ;
               tabScene = Settings.Parameter( "Table.Therm." + currentTable ).Value ;
           }
        }
        else
        {
           szState = "! Erreur THND";
           typeAction = 'E'; // Erreur
           Program.Notify(name+" Jour "+typeDay, "TH non définie") ;
        }
        if( tabScene.Length == 96 )
        {
          index = (int)(currentTime.Hour*4)+(int)(currentTime.Minute/15) ;
          switch( tabScene[index])
          {
              case 'A' :
                  currentMode = "(A)";
                  temperatureAComparer = 0 ;
                  break ;
              case 'H' :
                  currentMode = "(H)" ;
                  temperatureAComparer = nofrostSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0) ;
                  break ;
              case 'E' :
                  currentMode = "(E)" ;
                  temperatureAComparer = ecoSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0) ;
                  break ;
              case 'C' :
                  currentMode = "(C)" ;
                  temperatureAComparer = heatSetPoint - (holdingMode[x] ? HOLDING_MODE_DIFF : 0) ;
                  break ;
              default :
                  temperatureAComparer = 0 ;
                  szState = "! Erreur THAI";
                  typeAction = 'E'; // Erreur
                  Program.Notify(name,"TH Action indéfinie '"+tabScene[index]+"'") ;
                  break ;
          }
        }
        else
        {
           if( newTable.Length != 0 )
           {
              szState = "! Erreur LGTH";
              typeAction = 'E'; // Erreur
              Program.Notify(name+" Jour "+typeDay, "TH Erreur longueur") ;
           }
        }
    }
    else
    {
       szState = "! Erreur MODE";
       typeAction = 'E'; // Erreur
       Program.Notify(name, "Erreur Mode "+thermostatMode) ;
    }
    if(typeAction == 'T')
    {
       if ( temperatureAComparer != 0 )
       {
          if (temperature.DecimalValue &lt; temperatureAComparer)
          {
             if(switchModule.IsOff || (operatingState.Value != currentMode+"On"))
                holdingMode[x] = false;
             szState = "On";
          }
          else
          {
            if (switchModule.IsOn || (operatingState.Value != currentMode+"Off")) 
               holdingMode[x] = true;
            szState = "Off";
          }
       }
       else
       {
          holdingMode[x] = false;
          szState = "Off";
       }
    }
    else
        holdingMode[x] = false;
    if(szState == "On")
    {
      switchModule.On();
      if( switch2 == true )
        switchModule2.On();
      if( switch3 == true )
        switchModule3.On();
    }
    else
    {
      switchModule.Off();
      if( switch2 == true )
        switchModule2.Off();
      if( switch3 == true )
        switchModule3.Off();
    }
    // Store last time the switch change of state
    if(operatingState.Value != currentMode+szState)
       Program.RaiseEvent(moduleVirtuel,"Thermostat.OperatingState", currentMode+szState, "Thermostat");
    Pause(2);
  }
  return true;
});

When.ModuleParameterChanged((module, parameter)=&gt;{
    if (parameter.Is("Sensor.Temperature") || parameter.Is("Sensor.Humidity") || parameter.Is("Status.Battery"))
    {
      string domainAddress = "";
      string domain = "";
      string address = "";
      for(int x = 0; x &lt; thermsCount; x++)
      {
         var moduleVirtuel = Modules.InDomain("HomeAutomation.DaniMail").WithAddress((x+1).ToString()).Get();
         domainAddress = moduleVirtuel.Parameter("ModuleTemperature").Value;
         if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
         {
            domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
            address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
            if( (module.Instance.Domain.ToLower() == domain.ToLower()) &amp;&amp; (module.Instance.Address.ToLower() == address.ToLower()))
            {
                Program.RaiseEvent(moduleVirtuel,parameter.Name,parameter.Value,"Thermostat");
                // Program.Notify("Thermostat","Set "+module.Instance.Name+" "+parameter.Value+"°");
                nTempo=0;
                break;
            }
         }
         domain = address = "";
      }
    }
    return true;
});

// implement Web API calls as defined in the Thermostat widget
When.WebServiceCallReceived("HomeAutomation.DaniMail", (args)=&gt;
{
    string[] reqs = ((string)args).Split('/');

    string thermNumber = reqs[1];
    string command = reqs[2];
    string parametre = reqs[3];
    int nTherm;

    switch( command )
    {
        case "Thermostat.SetPointSet":
           nTherm = Int32.Parse(thermNumber);
           var moduleS = Modules.InDomain("HomeAutomation.DaniMail").WithAddress(thermNumber).Get();
           if( parametre == "Heating")
           {
              Program.RaiseEvent(moduleS,"Thermostat.SetPoint.Heating", reqs[4], "Thermostat");
              holdingMode[nTherm-1] = false;
           }
           if ( parametre == "Eco")
           {

             Program.RaiseEvent(moduleS,"Thermostat.SetPoint.Eco", reqs[4], "Thermostat");
             holdingMode[nTherm-1] = false;
           }
           if ( parametre == "NoFrost")
           {
             Program.RaiseEvent(moduleS,"Thermostat.SetPoint.NoFrost", reqs[4], "Thermostat");
             holdingMode[nTherm-1] = false;
           }
           nTempo=0;
           break;
        case "Thermostat.SetTable":
           nTherm = Int32.Parse(thermNumber);
           var moduleT = Modules.InDomain("HomeAutomation.DaniMail").WithAddress(thermNumber).Get();
           if( parametre == "W")
           {
              Program.RaiseEvent(moduleT,"Table."+parametre, reqs[4], "Thermostat");
              holdingMode[nTherm-1] = false;
           }
           if( parametre == "O")
           {
              Program.RaiseEvent(moduleT,"Table."+parametre, reqs[4], "Thermostat");
              holdingMode[nTherm-1] = false;
           }
           if( parametre == "F")
           {
              Program.RaiseEvent(moduleT,"Table."+parametre, reqs[4], "Thermostat");
              holdingMode[nTherm-1] = false;
           }
           if( parametre == "S")
           {
              Program.RaiseEvent(moduleT,"Table."+parametre, reqs[4], "Thermostat");
              holdingMode[nTherm-1] = false;
           }
           nTempo=0;
           break;
      case "Thermostat.ModeSet" :
           nTherm = Int32.Parse(thermNumber);
           var moduleM = Modules.InDomain("HomeAutomation.DaniMail").WithAddress(thermNumber).Get();
           Program.RaiseEvent(moduleM,"Thermostat.Mode", parametre, "Thermostat");
           Program.RaiseEvent(moduleM,"Thermostat.OperatingState", "---", "Thermostat");
           holdingMode[nTherm-1] = false;
           nTempo=0;
           break;
    }
    return true;
});

while (Program.IsEnabled)
{
   nTempo=300;
   ThermostatLogicRun();
   if(nTempo == 300)
   {
     DateTime currentTime = DateTime.Now ;
     nTempo = ((5-(currentTime.Minute%5))*60)-currentTime.Second;
     // Program.Notify("Thermostat","Réveil dans "+nTempo+" sec.");
   }
//   else
//     Program.Notify("Thermostat","Réveil immédiat ...");
   while( nTempo &gt; 0 )
   {
     Pause(1);
     nTempo-- ;
   };
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.DaniMail</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>ModuleTemperature</Property>
        <Description>Module to read temperature from</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.DaniMail</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>SwitchModule1</Property>
        <Description>Module 1 to switch on/off</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.DaniMail</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>SwitchModule2</Property>
        <Description>Module 2 to switch on/off</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.DaniMail</ForDomains>
        <ForTypes>Thermostat</ForTypes>
        <Property>SwitchModule3</Property>
        <Description>Module 3 to switch on/off</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>512</Address>
    <Name>Enhanced thermostats</Name>
    <Description>Timetable based scheduler for thermostats.
Also implementing virtual thermostas that can bind to any user specified temperature sensor and switch modules.
</Description>
    <Group>Weather and Enviroment</Group>
    <ActivationTime>2015-01-25T19:16:22.076122Z</ActivationTime>
    <TriggerTime>2015-01-26T08:17:20.794119Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  	Program.AddFeatureTextInput("Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.W", "Timetable to use for weekend");
  	Program.AddFeatureTextInput("Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.O", "Timetable to use for week days");
  	Program.AddFeatureTextInput("Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.F", "Timetable to use for holidays");
  	Program.AddFeatureTextInput("Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.S", "Timetable to use for special days");
  	Program.AddFeature("Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Enable", "Enable timetable scheduling");
});
              
return true;
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin
#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

var jkSolarAltitude = Program.WithName("jkUtils - Solar Altitude");
string popupTitle = "Timetable Scheduler";
char typeDay;
string currentTable="";
string newTable="";
int index,currentMonth=-1;
DateTime oldSunRise=DateTime.Now;
DateTime sunRise;
DateTime oldSunSet=DateTime.Now;
DateTime sunSet;
char typeAction=' ';
int nTempo=60;
bool isDark;

string tabMon="";
string tabScene="";

var LightLogicRun = new Func&lt;bool&gt;(()=&gt;{

  try
  {
    sunRise = DateTime.ParseExact(jkSolarAltitude.Parameter("jkUtils.SolarAltitude.Morning.Sunrise.Start").Value, "H:mm", CultureInfo.InvariantCulture);
    sunSet = DateTime.ParseExact(jkSolarAltitude.Parameter("jkUtils.SolarAltitude.Evening.Sunset.End").Value, "H:mm", CultureInfo.InvariantCulture);
    if((sunRise != oldSunRise) || (sunSet != oldSunSet))
    {
      Program.Notify(popupTitle, " SunRise. = " + sunRise.ToString("dd/MM HH:mm:ss") + " SunSet.. = " + sunSet.ToString("dd/MM HH:mm:ss"));
      oldSunRise = sunRise;
      oldSunSet = sunSet;
    }
  }
  catch(Exception e) 
  {
    Program.Notify(popupTitle, "SunRise/SunSet " + e.Message);
    sunRise = DateTime.Now;
    sunSet = DateTime.Now;
  }

  isDark = false;
  if (DateTime.Compare(DateTime.Now,sunRise) &lt; 0 || DateTime.Compare(DateTime.Now,sunSet) &gt; 0)
    isDark = true;

  Modules.WithFeature("TimeTable.Enable").Each((module)=&gt;{

    // if timetable is disabled for this module, continue to next module
    if (module.Parameter("TimeTable.Enable").Value == "0") return false;

    var tableType = ""; // OnOff
    if (module.IsOfDeviceType("Light,Switch"))
      tableType = "OnOff"; // OnOff
    else if (module.IsOfDeviceType("Dimmer,Shutter"))
      tableType = "Level"; // Level
    else if (module.IsOfDeviceType("Thermostat"))
      tableType = "Thermostat"; // Level

    // No table type for current device type, continue to next
    if (tableType == "")
      return false;

    var displayName = module.Instance.DeviceType + " " + module.Instance.Name;
    DateTime currentTime = DateTime.Now ;
    //if( Settings.Parameter("Schedule.Set").Value == "1" )
    {
      Settings.Parameter("Schedule.Set").Value = "0" ;
      currentMonth = -1 ;
      currentTable = "" ;
    }
    if (currentMonth != currentTime.Month)
    {
      currentMonth = currentTime.Month - 1 ;
      tabMon = Settings.Parameter("Calend.Year." + currentMonth).Value ;
    }
    if (tabMon.Length &lt; currentTime.Day)
    {
      Program.Notify(popupTitle, "Calendar Error month length " + currentTime.Month) ;
      return false;
    }
    typeDay = tabMon[currentTime.Day - 1] ;
    // HERE We get the timetable depends on the kind of day
    newTable = module.Parameter("TimeTable." + typeDay).Value;
    if (newTable.Length != 0)
    {
      if (newTable != currentTable)
      {
        currentTable = newTable ;
        tabScene = Settings.Parameter("Table." + tableType + "." + currentTable).Value ;
      }
    }
    else
    {
      Program.Notify(popupTitle, displayName + " Jour " + typeDay + ". Undefined timetable") ;
      return false;
    }
    if (tabScene.Length == 96)
    {
      index = (int)(currentTime.Hour*4) + (int)(currentTime.Minute/15) ;
      typeAction = tabScene[index];
    }
    else
    {
      Program.Notify(popupTitle, displayName + " Jour " + typeDay + ", timetable length error") ;
      return false;
    }

    if (tableType == "OnOff")
    {
      switch (typeAction)
      {
      case 'R': // SunRise - Soleil levant
      case 'S': // SunSet - Soleil couchant
        if(isDark == true &amp;&amp; module.IsOff)
          module.On(); // Level On
        else if (module.IsOn)
          module.Off(); // Sunrise or Sunset : Waiting for end of dark
      	break ;
      case 'O':
        if (module.IsOff) module.On();
        break;
      case 'F':
        if (module.IsOn) module.Off();
        break;
      case ' ':
        // unassigned
        break;
      default :
        Program.Notify(popupTitle, displayName + "\nUndefined timetable action '" + typeAction + "'") ;
        break ;
      }
    }
    else if (tableType == "Level")
    {
      double level = 0;
      if (double.TryParse(typeAction.ToString(), out level))
      {
        level = (level * 20);
        if (level &gt;= 0 &amp;&amp; level &lt;= 100 &amp;&amp; module.Level != level)
          module.Level = level;
      }
      else if (typeAction != ' ')
      {
        Program.Notify(popupTitle, displayName + "\nWrong level found in timetable '" + typeAction + "'") ;
      }
    }
    else // Type Thermostat
    {
      string actionToDo="";
      string tempSetPoint="";
      int temperatureToReach=0;
      switch (typeAction)
      {
        case 'A' : // Stop
          actionToDo="Stop";
          break ;
        case 'N' : // Fan
          actionToDo="Fan";
          tempSetPoint="Fan";
          break ;
        case 'L' : // Cool
          actionToDo="Cool";
          tempSetPoint="Cooling";
    	  temperatureToReach=(int)module.Parameter("Thermostat.SetPoint.Cool").DecimalValue;
          break ;
        case 'H' : // No Frost
          actionToDo="NoFrost";
          tempSetPoint="NoFrost";
    	  temperatureToReach=(int)module.Parameter("Thermostat.SetPoint.NoFrost").DecimalValue;
          break ;
        case 'E' : // Eco
          actionToDo="Eco";
          tempSetPoint="Eco";
    	  temperatureToReach=(int)module.Parameter("Thermostat.SetPoint.Eco").DecimalValue;
          break ;
        case 'C' :  // Comfort
          actionToDo="Heat";
          tempSetPoint="Heating";
    	  temperatureToReach=(int)module.Parameter("Thermostat.SetPoint.Heating").DecimalValue;
          break ;
        case ' ':
          // unassigned
          break;
        default :  // Undefined
          temperatureToReach=-1;
	      Program.Notify(popupTitle, displayName + "\nWrong Action found in timetable '" + typeAction + "'") ;
          break ;
      }
      if(temperatureToReach != -1)
      {
        // Send the temperature reach Value to the physical thermostat
        if(temperatureToReach != 0)
           Program.RaiseEvent(module,"Thermostat.SetPoint."+actionToDo,temperatureToReach.ToString(),"Thermostat");
        // Send the current action to the physical thermostat
        Program.RaiseEvent(module,"Thermostat.ModeSet", actionToDo,"Thermostat");
      }  
    }
    return false; // do not stop iterating, continue processing next module
  });

  return true;
});

while (Program.IsEnabled)
{
  nTempo = 300;
  LightLogicRun();
  if(nTempo == 300)
  {
    DateTime currentTime = DateTime.Now ;
    nTempo = ((5-(currentTime.Minute%5))*60) - currentTime.Second;
  }
  while(nTempo &gt; 0)
  {
    Pause(1);
    nTempo--;
  };
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <IsRunning>true</IsRunning>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.W</Property>
        <Description>Timetable to use for weekend</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.O</Property>
        <Description>Timetable to use for week days</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.F</Property>
        <Description>Timetable to use for holidays</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.S</Property>
        <Description>Timetable to use for special days</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Enable</Property>
        <Description>Enable timetable scheduling</Description>
      </ProgramFeature>
    </Features>
    <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>514</Address>
    <Name>Timetable Scheduler</Name>
    <Description>Switch device on/off or set level based on Timetable widget.
Specify a time table number (0-5) or leave fields empty to disable.</Description>
    <Group>Scheduling</Group>
    <ActivationTime>2015-01-26T08:20:35.785228Z</ActivationTime>
    <TriggerTime>2015-01-26T08:20:35.802235Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>