<?xml version="1.0" encoding="utf-8"?>
<ArrayOfProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.
Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .On();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>6</Address>
    <Name>Group Lights ON</Name>
    <Description>Turn on all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.UseWidget("homegenie/generic/program");
});
</ScriptCondition>
    <ScriptSource>//OPTIONS_STRING_PROMPT=Enter Group Name:
// ^^^^^^^
// the line above is a special line that tells homegenie
// to ask for options input (to enter a group name in this specific case)
// when program is manually run by user
// NOTE: no white space allowed for OPTIONS_STRING_PROMPT line
// that must be the FIRST line of code.

Modules
  .InGroup( PROGRAM_OPTIONS_STRING )
  .OfDeviceType("Light,Dimmer")
  //.IterationDelay(0.35)
  .Off();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>7</Address>
    <Name>Group Lights OFF</Name>
    <Description>Turn off all the lights in the current group.</Description>
    <Group>Scenes</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Dimmer", "HomeGenie.LevelMemory", "Recall last light level when switched on", "checkbox");
Program.AddFeature("", "Dimmer", "HomeGenie.LevelMemory.SimulateOnly", "Simulate only", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterChanged( (module, property) =&gt; {
  // stores the Status.MemoryLevel value for recalling last light dimmer level
  // when switched on
  if (module.HasFeature("HomeGenie.LevelMemory") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var memory = module.Parameter("Status.MemoryLevel");
    //
    if (level.DecimalValue != level.Statistics.Last.Value)
    {
      bool justswitchedon = (level.Statistics.Last.Value == 0 &amp;&amp; level.DecimalValue &gt; 0);
      if (justswitchedon)
      {
        // set current level to memory level if different
        if (level.DecimalValue != memory.DecimalValue &amp;&amp; memory.DecimalValue &gt; 0)
        {
          var newlevel = (int)(memory.DecimalValue * 100);
          if (module.HasFeature("HomeGenie.LevelMemory.SimulateOnly"))
          {
            Program.RaiseEvent(module, "Status.Level", memory.Value, "Memory Level");
          }
          else
          {
            module.Level = newlevel; 
          }
          Program.Notify("Level Memory", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to " + newlevel + "%");
          // returning false, prevent from routing event to other listeners                  
          return false;
        }
      }
      if (level.DecimalValue &gt; 0) 
      {
        memory.Value = level.Value;
      } 
    }
  }
  // returning true, will route event to other listeners
  return true; 
});
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>16</Address>
    <Name>Level Memory</Name>
    <Description>Store and recall last dimmer level when device is switched on.</Description>
    <Group>Lights</Group>
    <Features />
    <ActivationTime>2015-09-15T07:38:50.209948Z</ActivationTime>
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("BridgeAddress", "192.168.0.?", "Philips Hue Bridge IP Address", "text");
Program.AddOption("BridgeUsername","newdeveloper", "Philips Hue Bridge API username", "text");
// Create 5 virtual modules with the domain "HomeAutomation.PhilipsHue" and with address from 1 to 5
// "Dimmer" is the type and "GenericColorLight" is the widget to be used to display the virtual module
// See directory "html/pages/control/widgets/" for widget list
Program.AddVirtualModules("HomeAutomation.PhilipsHue", "Dimmer", "homegenie/generic/colorlight", 1, 5);
Program.Run();
</ScriptCondition>
    <ScriptSource>Func&lt;string, string, bool&gt; bridgeapicall = (string lightnum, string jsonargs) =&gt; 
{
  if (Program.Option("BridgeAddress").Value == "" || Program.Option("BridgeAddress").Value.EndsWith("?"))
  {
    return false;
  }
  string webserviceurl = "http://" + 
    Program.Option("BridgeAddress").Value + "/api/" + 
    Program.Option("BridgeUsername").Value + "/lights/" + lightnum + "/state";
  Net.WebService(webserviceurl).Put( jsonargs ).Call();
  return true;
};

var hueModules = Modules.InDomain("HomeAutomation.PhilipsHue");
// - http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/...
When.WebServiceCallReceived("HomeAutomation.PhilipsHue", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
    var module = hueModules.WithAddress(lightnumber).Get();
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
        bridgeapicall(lightnumber, "{ \"on\" : true }");
        string[] hsb1 = module.Parameter("Status.ColorHsb").Value.Split(',');
        Program.RaiseEvent(module, "Status.Level", hsb1[2], "Hue Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        bridgeapicall(lightnumber, "{ \"on\" : false }");
        Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          bridgeapicall(lightnumber, "{ \"on\" : true }");
          string[] hsb2 = module.Parameter("Status.ColorHsb").Value.Split(',');
          Program.RaiseEvent(module, "Status.Level", hsb2[2], "Hue Light");
        }
        else
        {
          bridgeapicall(lightnumber, "{ \"on\" : false }");
          Program.RaiseEvent(module, "Status.Level", "0", "Hue Light");
        }
        break;
      case "Control.Level":
        if (module.IsOff) bridgeapicall(lightnumber, "{ \"on\" : true }");
        bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString(CultureInfo.InvariantCulture) + " }");
	    string[] hsb3 = module.Parameter("Status.ColorHsb").Value.Split(',');
      	var bl = (double.Parse(parameter) / 100D).ToString(CultureInfo.InvariantCulture);
      	module.Parameter("Status.ColorHsb").Value = hsb3[0]+','+hsb3[1]+','+bl;
        Program.RaiseEvent(module, "Status.Level", bl, "Hue Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = parameter.Split(',');
        double transition = 5;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
        bridgeapicall(lightnumber, "{ \"on\" : true" + 
                      ", \"hue\" : " + (int)(double.Parse(values[0], CultureInfo.InvariantCulture) * 65536) + 
                      ", \"sat\" : " + (int)(double.Parse(values[1], CultureInfo.InvariantCulture) * 255) + 
                      ", \"bri\" : " + (int)(double.Parse(values[2], CultureInfo.InvariantCulture) * 255) + 
                      ", \"transitiontime\" : " + transition.ToString() +  "}");
        Program.RaiseEvent(module, "Status.Level", (double.Parse(values[2], CultureInfo.InvariantCulture)).ToString(), "Hue Light");
        Program.RaiseEvent(module, "Status.ColorHsb", parameter, "Hue Light");
        break; 
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Alert/Long
      case "Control.Alert":
        // eg. Modules.WithName("Light 1").Command("Control.Alert").Set(""); for a short alert Set("Long"); for a 30 second alert
        string alertType = "select";
        if (parameter == "Long") {alertType = "lselect";}
        bridgeapicall(lightnumber, "{\"alert\" : \"" + alertType + "\"}");
        break; 
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 

    Program.Notify("Philips Hue ERROR!", e.Message);

  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>26</Address>
    <Name>Philips Hue Bridge</Name>
    <Description>Adds Philips Hue lights control capability to HomeGenie. 
In order for this to work, you must register "homegenie" username
(default is "newdeveloper") with your Philips Hue Bridge first.
For instructions see: http://developers.meethue.com/gettingstarted.html .</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:10.526933Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// list the program as custom weather widget
Program.UseWidget( "weather/wunderground/conditions" );
// set input fields parameters
// &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
Program.AddOption("Location", "autoip", "City name", "text");
Program.AddOption("Language", "EN", "Language", "text");
Program.AddOption("ApiKey", "?", "Weather Underground Key", "text");
Program.AddOption("UpdateInterval", "30", "Update interval (minutes)", "text");

// 2014-01-22 - Added to allow the user to dynamically select how to display the temperature. by lancebooth 
Program.AddOption("InputDisplayCelsius", "TRUE", "Display Temperature in degrees Celsius - TRUE or FALSE", "text");

// initialize widget program parameters
Program.Parameter("Astronomy.Sunset").Value = "";
Program.Parameter("Astronomy.Sunrise").Value = "";
Program.Parameter("Conditions.City").Value = "";
Program.Parameter("Conditions.TemperatureC").Value = "";
Program.Parameter("Conditions.TemperatureF").Value = "";
Program.Parameter("Conditions.DisplayLocation").Value = "";
Program.Parameter("Conditions.IconUrl").Value = "";
Program.Parameter("Conditions.Description").Value = "";    

Program.Run();
</ScriptCondition>
    <ScriptSource>var sunsetEvent = "Sunset";
var sunriseEvent = "Sunrise";

while (Program.IsEnabled)
{
  string location = Program.Option("Location").Value;
  string language = Program.Option("Language").Value;
  string apikey = Program.Option("ApiKey").Value;

  // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature. by lancebooth
  string display_celsius = Program.Option("InputDisplayCelsius").Value;

  //
  if (!apikey.Contains("?"))
  {
    try
    {

      string webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/astronomy/lang:" + language + "/q/" + location + ".json";
      var astronomydata = Net.WebService(webserviceurl).GetData();

      int sunrise_hour = int.Parse(astronomydata.moon_phase.sunrise.hour.ToString());
      int sunrise_minute = int.Parse(astronomydata.moon_phase.sunrise.minute.ToString());
      int sunset_hour = int.Parse(astronomydata.moon_phase.sunset.hour.ToString());
      int sunset_minute = int.Parse(astronomydata.moon_phase.sunset.minute.ToString());

      Program.Parameter("Astronomy.Sunset").Value = sunset_hour.ToString("D2") + ":" + sunset_minute.ToString("D2");
      Program.Parameter("Astronomy.Sunrise").Value = sunrise_hour.ToString("D2") + ":" + sunrise_minute.ToString("D2");

      // Update Scheduler entries
      Scheduler
        .WithName(sunsetEvent)
        .SetSchedule(String.Format("{0} {1} * * *", sunset_minute, sunset_hour));
      Scheduler
        .WithName(sunriseEvent)
        .SetSchedule(String.Format("{0} {1} * * *", sunrise_minute, sunrise_hour));

      webserviceurl = "http://api.wunderground.com/api/" + apikey + "/geolookup/conditions/lang:" + language + "/q/" + location + ".json";
      var weatherdata = Net.WebService(webserviceurl).GetData();

      string city = weatherdata.location.city;
      string country = weatherdata.location.country;
      string country_iso3166 = weatherdata.location.country_iso3166; // eg. IT,US,NL,UK,AU,CH,DE...
      string temperaturec = weatherdata.current_observation.temp_c;
      string temperaturef = weatherdata.current_observation.temp_f;
      string display_location = weatherdata.current_observation.display_location.full;
      string weather_text = weatherdata.current_observation.weather;
      string icon = weatherdata.current_observation.icon;
      string icon_url = weatherdata.current_observation.icon_url.ToString().Replace("c/k", "c/e").Replace("http://icons.wxug", "https://api.wunderground");
      string wind_dir = weatherdata.current_observation.wind_dir;
      string wind_kph = weatherdata.current_observation.wind_kph;
      string pressure_mb = weatherdata.current_observation.pressure_mb;
      string feelslike_c = weatherdata.current_observation.feelslike_c;
      string feelslike_f = weatherdata.current_observation.feelslike_f;
      string UV = weatherdata.current_observation.UV;
      string precip_1hr_metric = weatherdata.current_observation.precip_1hr_metric;

      // 2014-01-22 - Added to allow the widget to display the date/time.
      string last_updated = weatherdata.current_observation.observation_time; //DateTime.Now.ToString("g"); //, new System.Globalization.CultureInfo("en-US")

      Program.RaiseEvent("Conditions.City", city, "");
      Program.RaiseEvent("Conditions.Country", country, "");
      Program.RaiseEvent("Conditions.CountryCode", country_iso3166, "");
      Program.RaiseEvent("Conditions.TemperatureC", temperaturec, "");
      Program.RaiseEvent("Conditions.TemperatureF", temperaturef, "");
      Program.RaiseEvent("Conditions.DisplayLocation", display_location, "");
      Program.RaiseEvent("Conditions.Description", weather_text, "");
      Program.RaiseEvent("Conditions.IconUrl", icon_url, "");
      Program.RaiseEvent("Conditions.Status", icon, ""); // eg. cloudy, sunny, etc..
      Program.RaiseEvent("Conditions.WindDirection", wind_dir, "");
      Program.RaiseEvent("Conditions.WindKph", wind_kph, "");
      Program.RaiseEvent("Conditions.PressureMb", pressure_mb, "");
      Program.RaiseEvent("Conditions.FeelsLikeC", feelslike_c, "");
      Program.RaiseEvent("Conditions.FeelsLikeF", feelslike_f, "");
      Program.RaiseEvent("Conditions.UV", UV, "");
      Program.RaiseEvent("Conditions.PrecipitationHourMetric", precip_1hr_metric, "");

      // 2014-01-22 - Added to allow the widget to display the date/time.
      Program.RaiseEvent("Conditions.LastUpdated", last_updated, "");

      // 2014-01-22 - Added to allow user to dyanmically select how to display the temperature.
      Program.Parameter("Conditions.DisplayCelsius").Value = display_celsius;

      // 2015-01-30 - Added forecast of next 3 days
      webserviceurl = "http://api.wunderground.com/api/" + apikey + "/forecast/lang:" + language + "/q/" + location + ".json";
      var forecastData = Net.WebService(webserviceurl).GetData().forecast.simpleforecast.forecastday;
      // Collect forecast data
      for (int d = 1; d &lt;= 3; d++)
      {
        Program.RaiseEvent("Conditions.Forecast." + d + ".Description", forecastData[d].conditions.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".Year", forecastData[d].date.year.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".Month", forecastData[d].date.monthname.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".Day", forecastData[d].date.day.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".Weekday", forecastData[d].date.weekday.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".IconUrl", forecastData[d].icon_url.ToString().Replace("c/k", "c/e").Replace("http://icons.wxug", "https://api.wunderground"), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".TemperatureC.Low", forecastData[d].low.celsius.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".TemperatureF.Low", forecastData[d].low.fahrenheit.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".TemperatureC.High", forecastData[d].high.celsius.ToString(), "");
        Program.RaiseEvent("Conditions.Forecast." + d + ".TemperatureF.High", forecastData[d].high.fahrenheit.ToString(), "");
      }

      Program.Notify("Weather Underground", "Updated.");

    } 
    catch (Exception e) 
    {

      Program.Notify("Weather Underground ERROR!", "Unable to get data from service. " + e.Message);
      //Program.Parameter("Conditions.City").Value = "ERROR: " + e.Message;
      Console.WriteLine( e.Message );
      Pause(10);

    }
  }
  //
  var delayMins = Program.Option("UpdateInterval").DecimalValue;
  if (delayMins &lt; 1) delayMins = 1;
  var pauseEnd = DateTime.Now.AddMinutes(delayMins);
  var sunEventParameter = Program.Parameter("Sun.Event");
  do
  {
    if (Scheduler.IsScheduling("@Sunrise") &amp;&amp; sunEventParameter.Value != sunriseEvent)
    {
      Program.RaiseEvent(sunEventParameter.Name, sunriseEvent, sunriseEvent + " event");
    }
    else if (Scheduler.IsScheduling("@Sunset") &amp;&amp; sunEventParameter.Value != sunsetEvent)
    {
      Program.RaiseEvent(sunEventParameter.Name, sunsetEvent, sunsetEvent + " event");
    }
    Pause(1);
  } while (Program.IsEnabled &amp;&amp; DateTime.Now.Ticks &lt;= pauseEnd.Ticks);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>34</Address>
    <Name>Weather Underground</Name>
    <Description>Current weather, forecast and sunrise/sunset information from &lt;strong&gt;Weather Underground&lt;/strong&gt; service. 
To activate this widget specify a valid user &lt;strong&gt;Key&lt;/strong&gt; that can be obtained creating an account from &lt;u&gt;http://www.wunderground.com/weather/api/d/login.html&lt;/u&gt;</Description>
    <Group>Weather and Enviroment</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:11.027242Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleControl", "Control device on a given schedule", "checkbox");
Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOn", "Turn On", "cron.text");
Program.AddFeature("", "Light,Dimmer,Switch,Shutter", "HomeGenie.ScheduleOff", "Turn Off", "cron.text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var controlModules = Modules.WithFeature("HomeGenie.ScheduleControl");

while (Program.IsEnabled)
{

  controlModules.Each((module)=&gt;{

    var scheduleOn = module.Parameter("HomeGenie.ScheduleOn").Value;
    var scheduleOff = module.Parameter("HomeGenie.ScheduleOff").Value;

    if (Scheduler.IsScheduling(scheduleOn))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " ON");
      module.On();
    }

    if (Scheduler.IsScheduling(scheduleOff))
    {
      Program.Notify("Scheduled Control", module.Instance.Name + " OFF");
      module.Off();
    }

    return false;
  });

  var pause = (60 - DateTime.Now.Second);
  Pause(pause);

}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>35</Address>
    <Name>Scheduled ON/OFF</Name>
    <Description>Turn on/off a device using HG scheduler.</Description>
    <Group>Scheduling</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleControl</Property>
        <Description>Control device on a given schedule</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>cron.text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOn</Property>
        <Description>Turn On</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>cron.text</FieldType>
        <ForDomains />
        <ForTypes>Light,Dimmer,Switch,Shutter</ForTypes>
        <Property>HomeGenie.ScheduleOff</Property>
        <Description>Turn Off</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:11.526307Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// set the widget that will display this program data (the distance).
// the builtin 'homegenie/generic/sensor' widget, 
// will display all parameters starting with Sensor.*
Program.UseWidget("homegenie/generic/sensor");

// initialize program parameters
Program.Parameter("Sensor.Distance").Value = "";
Program.Parameter("Sensor.StatusMessage").Value = "";

Program.Run();
</ScriptCondition>
    <ScriptSource>// example code adapted from https://github.com/raspberry-sharp/
//
var driver = GpioConnectionSettings.DefaultDriver;

Func&lt;bool&gt; readdistance = new Func&lt;bool&gt;(() =&gt; {
  var triggerPin = ConnectorPin.P1Pin03.ToProcessor();
  var echoPin = ConnectorPin.P1Pin07.ToProcessor();
  var success = false;

  using (var connection = new HcSr04Connection(driver.Out(triggerPin), driver.In(echoPin)))
  {
    try
    {
      var distance = connection.GetDistance() * 100;
      Program.Parameter("Sensor.Distance").Value = String.Format("{0:0.0}", distance);
      success = true;
    }
    catch (Exception e)
    {
      //        Console.WriteLine(e.Message + "\n" + e.StackTrace);
      Program.Notify("HCSR04 Error", e.Message);
      Program.Parameter("Sensor.Distance").Value = "-1";
      success = false;
    }
  }
  return success;
});

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// it makes program to respond to webservices calls:
//     http:///api/Components.HCSR04/0/Sensor.Distance
When.WebServiceCallReceived("Components.HCSR04/0/Sensor.Distance", ( args ) =&gt; {
  var res = "ERROR";
  if (readdistance())
  {
    res = Program.Parameter("Sensor.Distance").Value;
  }
  return "{ 'ResponseValue' : '" + res + "' }";
}); 
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>37</Address>
    <Name>HCSR04 - Ultrasonic Ranging Module</Name>
    <Description>Ultrasonic Ranging Module sensor </Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "15", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Shutter", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveLevelPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Basic.Get").Execute();
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>39</Address>
    <Name>Level Poll</Name>
    <Description>Periodically query lights and switches level.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// set the widget that will display this program data (temperature, humidity).
Program.UseWidget("homegenie/generic/sensor");
Program.AddOption("UpdateInterval", "600", "Update Interval (seconds)", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var measurePin = ConnectorPin.P1Pin16; // GPIO#23
var driver = GpioConnectionSettings.GetBestDriver(GpioConnectionDriverCapabilities.CanChangePinDirectionRapidly);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});
  
// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Temperature", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT11/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT11/0/Sensor.Humidity", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

while (Program.IsEnabled)
{
  using (var pin = driver.InOut(measurePin))
    using (var dhtConnection = new Dht11Connection(pin))
  {
    var data = dhtConnection.GetData();
    if (data != null)
    {
      // data read succesfully
      Program.RaiseEvent("Sensor.Humidity", data.RelativeHumidity.Percent.ToString(CultureInfo.InvariantCulture), "DHT-11 Sensor");
      Program.RaiseEvent("Sensor.Temperature", data.Temperature.DegreesCelsius.ToString(CultureInfo.InvariantCulture), "DHT-11 Sensor");
      break;
    }
  }

  var pause = Program.Option("UpdateInterval").DecimalValue;
  if (pause == 0) pause = 600; // default pause is 10 minutes
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>70</Address>
    <Name>DHT-11 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-11 with data pin on GPIO#23. 
Edit program code line #1 to change the data pin GPIO.
See example video at http://homegenie.it/docs/diy/eden.php .</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>var moduleDomain = "Components.MCP23017";

// This examples will add 16 modules of type "Switch"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var pinConfiguration = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Output },
    new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Output },
    new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Output },
    new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Output },
    new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Output },
    new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Output },
    new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Output },
    new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Output },
    //
    new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};
bool[] pinStatus = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnection = new Mcp23017I2cConnection(driver.Connect(0x20));
//
When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});
// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var errormessage = "";
  try
  {
    string pinid = reqs[1];
    string command = reqs[2];
    //
    var module = Modules.InDomain(moduleDomain).WithAddress(pinid).Get();
    // modules with id from 1 to 8 are mapped as A0-A7
    // modules with id from 9 to 16 as B0-B7
    var pinname = "";
    var i = int.Parse(pinid); 
    if (i &lt;= 8) 
    {
      pinname = "A" + (i - 1).ToString();
    }
    else
    {
      pinname = "B" + (i - 9).ToString();
    }      
    //
    var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);
    switch(command)
    {
      // eg. http://hg_address/api/Expanders.MCP23017/1/Control.On
      case "Control.On":
      deviceConnection.SetPinStatus(mcppin, true);
      break;
      // eg. http://hg_address/api/Expanders.MCP23017/3/Control.Off
      case "Control.Off":
      deviceConnection.SetPinStatus(mcppin, false);
      break;
      // eg. http://hg_address/api/Expanders.MCP23017/9/Control.Toggle
      case "Control.Toggle":
      deviceConnection.Toogle(mcppin);
      break;
    }
    Program.RaiseEvent(module, "Status.Level", 
                       deviceConnection.GetPinStatus(mcppin) ? "1" : "0", 
                       "MCP23017 " + pinname);
    //
    return "{ 'ResponseValue' : 'OK' }";  
  } 
  catch (Exception ex) 
  { 
    errormessage = ex.Message + " " + ex.StackTrace;
  }
  // unable to process request
  return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});

// Initialize MCP23017 pins
for (int p = 0; p &lt; pinConfiguration.Count; p++)
{
  var pincfg = pinConfiguration[p];
  // set direction and read pin status
  deviceConnection.SetDirection(pincfg.Pin, pincfg.Direction);
  pinStatus[p] = deviceConnection.GetPinStatus(pincfg.Pin);
  // associate a virtual module with the pin
  if (pincfg.Direction == Mcp23017PinDirection.Output)
  {
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
  }
  else // Input 
  {
    if (pincfg.PullUpResistor)
    {
      deviceConnection.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
    }
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  // get the module associated to the pin and store current status
  var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  module.Parameter("Status.Level").Value = (pinStatus[p] ? "1" : "0");
}

// status polling loop
while (Program.IsEnabled)
{
  Pause(0.5); // 500 ms poll resolution
  //
  for (int p = 0; p &lt; pinConfiguration.Count; p++)
  {
    var pincfg = pinConfiguration[p];
    if (pincfg.Direction == Mcp23017PinDirection.Input)
    {
      bool status = deviceConnection.GetPinStatus(pincfg.Pin);
      // check if the pin status changed
      if (pinStatus[p] != status)
      {
        // get the module associated to the pin
        var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
        // raise the event and update the current pin status
        Program.RaiseEvent(module, "Status.Level", 
                           status ? "1" : "0", 
                           "MCP23017 " + pincfg.Pin.ToString());
        pinStatus[p] = status;
        Pause(0.1);
      }
    }
  }
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>71</Address>
    <Name>MCP23017 GPIO Modules</Name>
    <Description>MCP23017 expander GPIO mapped to HG modules.
By default, pins A0-A7 are mapped as output modules (switch) and B0-B7 as input modules (sensor).
To change this configuration, edit the program source code.

For wirings see http://www.skpang.co.uk/blog/archives/454 .</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// list the program as custom weather widget
Program.UseWidget( "weather/earthtools/sundata" );

// set input fields parameters
// &lt;field_name&gt;, &lt;default_value&gt;, &lt;description&gt;
Program.AddOption("Latitude", "42.50", "Location latitude", "text");
Program.AddOption("Longitude", "12.50", "Location longitude", "text");

// initialize widget program parameters
// initialize widget program parameters
Program.Parameter("Astronomy.Sunset").Value = "";
Program.Parameter("Astronomy.Sunrise").Value = "";
// We also initialize the following parameters, even if unused,
// so we can use weather/wunderground/conditions for displaying data.
// A more generic widget should be written

Program.Parameter("EarthTool.Morning.Sunrise").Value = "";
Program.Parameter("EarthTool.Morning.Twilight.Civil").Value = "";
Program.Parameter("EarthTool.Morning.Twilight.Nautical").Value = "";
Program.Parameter("EarthTool.Morning.Twilight.Astronomical").Value = "";

Program.Parameter("EarthTool.Evening.Sunset").Value = "";
Program.Parameter("EarthTool.Evening.Twilight.Civil").Value = "";
Program.Parameter("EarthTool.Evening.Twilight.Nautical").Value = "";
Program.Parameter("EarthTool.Evening.Twilight.Astronomical").Value = "";

Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  var month = DateTime.Now.Month;
  var day = DateTime.Now.Day;
  //
  var latitude = Program.Option("Latitude").Value;
  var longitude = Program.Option("Longitude").Value;
  //
  try
  {
    var serviceurl = "http://www.earthtools.org/sun/" + latitude + "/" + longitude + "/" + day + "/" + month + "/99/1";
    dynamic geodata = Net.WebService(serviceurl).GetData();
    //
    Program.Parameter("Astronomy.Sunset").Value = geodata.sun.evening.sunset;
    Program.Parameter("Astronomy.Sunrise").Value = geodata.sun.morning.sunrise;
    //
    Program.Parameter("EarthTool.Morning.Sunrise").Value = geodata.sun.morning.sunrise;
    Program.Parameter("EarthTool.Morning.Twilight.Civil").Value = geodata.sun.morning.twilight.civil;
    Program.Parameter("EarthTool.Morning.Twilight.Nautical").Value = geodata.sun.morning.twilight.nautical;
    Program.Parameter("EarthTool.Morning.Twilight.Astronomical").Value = geodata.sun.morning.twilight.astronomical;
    //
    Program.Parameter("EarthTool.Evening.Sunset").Value = geodata.sun.evening.sunset;
    Program.Parameter("EarthTool.Evening.Twilight.Civil").Value = geodata.sun.evening.twilight.civil;
    Program.Parameter("EarthTool.Evening.Twilight.Nautical").Value = geodata.sun.evening.twilight.nautical;
    Program.Parameter("EarthTool.Evening.Twilight.Astronomical").Value = geodata.sun.evening.twilight.astronomical;      

    Program.Notify("Earth Tools", "Updated.");
  } 
  catch (Exception ex) 
  { 
    Program.Notify("Earth Tools Error!", "Unable to get data from service.");
    Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
  }
  //
  Pause(24 * 60 * 60); // pause 24 hours before next check
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>72</Address>
    <Name>Earth Tools</Name>
    <Description>Gather from http://www.earthtools.org/ service all data about sun rise/set. 
It can be used for "Sunrise/Sunset" feature.</Description>
    <Group>Weather and Enviroment</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE IR/RF EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name == "Receiver.RawData")
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;  
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>73</Address>
    <Name>IR/RF remote control events forwarding</Name>
    <Description>Forwards received IR/RF remote input to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE IR/RF EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name == "Meter.Watts")
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>74</Address>
    <Name>Meter.Watts events forwarding</Name>
    <Description>Forwards received Meter.Watts report to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE METERING EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name.StartsWith("Status."))
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
//
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>75</Address>
    <Name>Status.Level events forwarding</Name>
    <Description>Forwards module Status.* events to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Dimmer", "EnergyManagement.EnergySavingMode", "Energy Saving Mode enabled light", "checkbox");
Program.AddFeature("", "Dimmer", "EnergyManagement.EnergySavingLevel", "Keep level below this value (%)", "slider:20:80:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.HasFeature("EnergyManagement.EnergySavingMode") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var newlevel = module.Parameter("EnergyManagement.EnergySavingLevel").DecimalValue;
    if (newlevel &lt;= 0)
    {
      module.Parameter("EnergyManagement.EnergySavingLevel").Value = "40";
      newlevel = 40;
    }
    //
    if (level.DecimalValue &gt; (newlevel / 100D)) 
    {
      Program.Notify("Energy Saving Mode", module.Instance.Address + "&lt;br&gt;" + module.Instance.Name + " set to " + newlevel + "%");
      module.Level = newlevel;
      return false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>82</Address>
    <Name>Energy Saving Mode</Name>
    <Description>When enabled, ensures that dimmer level is kept below a given percentage value.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingMode</Property>
        <Description>Energy Saving Mode enabled light</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:20:80:1</FieldType>
        <ForDomains />
        <ForTypes>Dimmer</ForTypes>
        <Property>EnergyManagement.EnergySavingLevel</Property>
        <Description>Keep level below this value (%)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:12.022618Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("HomeAutomation.X10", "Dimmer", "X10.LevelFix", "Set level to 100% when switched on", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterIsChanging( (module, property) =&gt; {
  if (module.HasFeature("X10.LevelFix") &amp;&amp; module.IsOfDeviceType("Dimmer") &amp;&amp; property.Name == "Status.Level")
  {
    var level = module.Parameter("Status.Level");
    var lastlevel = module.Parameter("Status.LastLevel");
    //
    bool justswitchedon = (level.DecimalValue &gt; 0 &amp;&amp; lastlevel.DecimalValue == 0);
    lastlevel.Value = level.Value;
    if (justswitchedon)
    {
      Program.Notify("X10 Auto Bright", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " set to 100%");
      module.Command("Control.Bright").Set("100");
      return false; // &lt;-- prevent ModuleParameterChanged event from being fired
    }
  }
  return true; // &lt;-- continue routing event to other listeners
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>84</Address>
    <Name>Set to 100% when switched on</Name>
    <Description>Brighten a light to 100% when switched on.</Description>
    <Group>X10</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.X10</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>X10.LevelFix</Property>
        <Description>Set level to 100% when switched on</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:12.530343Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddVirtualModules("Media.IpCamera", "Sensor", "homegenie/generic/camerainput", 1, 10);
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.ImageURL", "Camera image API URL (see your camera docs)", "text");
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.Username", "Username (optional)", "text");
Program.AddFeature("Media.IpCamera", "Sensor", "IpCamera.Password", "Password (optional)", "password");
Program.Run();
</ScriptCondition>
    <ScriptSource>var cameraModules = Modules.InDomain("Media.IpCamera");
for (int cam = 1; cam &lt; 10; cam++)
{
  var module = cameraModules.WithAddress(cam.ToString()).Get();
  module.Parameter("Image.URL").Value = "/api/Media.IpCamera/" + cam.ToString() + "/Camera.GetPicture/";
}

// - http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/...
When.WebServiceCallReceived("Media.IpCamera/", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  object data = "{ 'ResponseValue' : 'ERROR' }";
  try
  {
    string cameraaddress = reqs[1];
    string command = reqs[2];
    //string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    var module = cameraModules.WithAddress(cameraaddress).Get();
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/Media.IpCamera/&lt;program_address&gt;/Camera.GetPicture
      case "Camera.GetPicture":
      data = Net
        .WebService(module.Parameter("IpCamera.ImageURL").Value)
        .WithCredentials(module.Parameter("IpCamera.Username").Value, module.Parameter("IpCamera.Password").Value)
        .GetBytes();
      break;
      case "Camera.MotionDetected":
      data = "{ 'ResponseValue' : 'OK' }";
      // blink Sensor.MotionDetect parameter
      Program.RaiseEvent(module, "Sensor.MotionDetect", "255", "Generic IP Camera");
      Pause(1);
      Program.RaiseEvent(module, "Sensor.MotionDetect", "0", "Generic IP Camera");
      break;
    }
  } catch (Exception e) { 

    Program.Notify("IpCamera ERROR!", e.Message);

  }
  return data;
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>88</Address>
    <Name>Generic IP Camera</Name>
    <Description>Generic IP Camera driver.</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.UseWidget("homegenie/generic/securitysystem");

Program.AddFeature("", "Sensor,DoorWindow", "HomeGenie.SecuritySensor", "Use as Security Sensor", "checkbox");
Program.AddFeature("", "Siren,Light,Dimmer,Switch", "HomeGenie.SecurityAlarm", "Use as Security Alarm", "checkbox");

Program.AddOption("System.ArmDelay", "10", "1. Arm Delay (seconds)", "text");
Program.AddOption("System.SirenMaxTime", "30", "2. Sirens Max Time (seconds, 0=infinite)", "text");

Program.AddOption("Email.Recipients", "", "3. Comma separated list of recipients e-mails for alarm notifications", "text");

Program.AddOption("Trigger.ArmedProgram", "", "4. Program to run when armed", "text");
Program.AddOption("Trigger.DisarmedProgram", "", "5. Program to run when disarmed", "text");
Program.AddOption("Trigger.TriggeredProgram", "", "6. Program to run when triggered", "text");

Program.Run();
</ScriptCondition>
    <ScriptSource>//
// init program parameters
//
Program.RaiseEvent("HomeGenie.SecurityArmed", "0", "Security System");
Program.Parameter("HomeGenie.SecurityTriggered").Value = "0";
Program.Parameter("Status.Level").Value = "0";

Func&lt;bool&gt; _armdisarm = new Func&lt;bool&gt;(()=&gt;{
  Program.RunAsyncTask(()=&gt; {
    if (Program.Parameter("Status.Level").Value == "0")
    {
      // disarming
      Program.Parameter("HomeGenie.SecurityTriggered").Value = "0";
    }
    else
    {
      // arming
      Pause( Program.Option("System.ArmDelay").DecimalValue );
    }
    Program.RaiseEvent("HomeGenie.SecurityArmed", Program.Parameter("Status.Level").Value, "Security System");
    // run armed/disarmed program
    if (Program.Parameter("Status.Level").Value != "0")
    {
      var armedProgram = Program.Option("Trigger.ArmedProgram").Value;
      if (armedProgram != "")
      {
        Program.Run(armedProgram);
      }
    }
    else
    {
      var disarmedProgram = Program.Option("Trigger.DisarmedProgram").Value;
      if (disarmedProgram != "")
      {
        Program.Run(disarmedProgram);
      }
    }
  });
  return true;
});

// module events handling
When.ModuleParameterChanged((module, parameter)=&gt; {
  if (Program.Parameter("HomeGenie.SecurityArmed").Value == "1")
  {
    if (module.HasFeature("HomeGenie.SecuritySensor") 
        &amp;&amp; Program.Parameter("HomeGenie.SecurityTriggered").Value != "1"
        &amp;&amp; (   parameter.Name == "Status.Level"
            || parameter.Name == "Sensor.Generic"
            || parameter.Name == "Sensor.Tamper" 
            || parameter.Name == "Sensor.MotionDetect" 
            || parameter.Name == "Sensor.DoorWindow"
            || parameter.Name == "Sensor.Flood" 
            || parameter.Name == "Sensor.Smoke" 
            || parameter.Name == "Sensor.Heat" 
            || parameter.Name == "Sensor.CarbonMonoxide" 
            || parameter.Name == "Sensor.CarbonDioxide" ) 
        &amp;&amp; parameter.DecimalValue &gt; 0)
    {
      Program.RaiseEvent("HomeGenie.SecurityTriggered", "1", "Security System");
      Program.Parameter("HomeGenie.SecurityTriggerSource").Value = 
        module.Instance.Name + " " + parameter.Name + " (" +
        module.Instance.Domain + "." +
        module.Instance.Address + ")";

      var triggeredProgram = Program.Option("Trigger.TriggeredProgram").Value;
      if (triggeredProgram != "")
      {
        Program.Run(triggeredProgram);
      }

      return false;
    }
  }
  return true;
});

// web service calls handling
When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var res = "";

  try
  {
    string command = reqs[2];
    string pid = reqs[1];
    if (pid == Program.Module.Address)
    {

      switch(command)
      {
        case "Control.On":
        Program.RaiseEvent("Status.Level", "1", "Security System");
        _armdisarm();
        res = "{ 'ResponseValue' : 'ARMED' }";
        break;
        case "Control.Off":
        Program.RaiseEvent("Status.Level", "0", "Security System");
        _armdisarm();
        res = "{ 'ResponseValue' : 'DISARMED' }";
        break;
      }

    }
  } 
  catch (Exception ex) 
  { 
    res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
  }
  // unable to process request
  return res;

});

// main program loop
var sirenModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Siren");
var alarmModules = Modules.WithFeature("HomeGenie.SecurityAlarm").OfDeviceType("Dimmer,Switch,Light");
while (Program.IsEnabled)
{
  if (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
  {
    sirenModules.On();

    var alarmstart = DateTime.Now;

    // send email
    var subject = "HomeGenie Security System Alarmed";
    var messagetext = "Security System Alarm triggered by " + Program.Parameter("HomeGenie.SecurityTriggerSource").Value;
    var recipients = Program.Option("Email.Recipients").Value;
    if (recipients != "")
    {
      Program.RunAsyncTask(()=&gt;{
        Net.SendMessage(recipients, subject, messagetext);
      });
    }

    var sirenstopped = false;
    while (Program.Parameter("HomeGenie.SecurityTriggered").Value == "1")
    {
      // flashing SecurityAlarm lights 
      alarmModules.Toggle();
      Pause(1);
      alarmModules.Toggle();
      Pause(1);
      // turn off sirens if max time was set and elapsed
      var elapsed = new TimeSpan(DateTime.Now.Ticks - alarmstart.Ticks);
      if (!sirenstopped &amp;&amp; Program.Option("System.SirenMaxTime").DecimalValue &gt; 0 &amp;&amp; elapsed.TotalSeconds &gt; Program.Option("System.SirenMaxTime").DecimalValue)
      {
        sirenModules.Off();
        sirenstopped = true;
      }
    }
    //Pause(1);
    alarmModules.Off();
    sirenModules.Off();
  }
  Pause(1);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>90</Address>
    <Name>Security Alarm System</Name>
    <Description>Basic Security Alarm System</Description>
    <Group>Security</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Sensor,DoorWindow</ForTypes>
        <Property>HomeGenie.SecuritySensor</Property>
        <Description>Use as Security Sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Siren,Light,Dimmer,Switch</ForTypes>
        <Property>HomeGenie.SecurityAlarm</Property>
        <Description>Use as Security Alarm</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:13.032577Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterChanged((module, parameter) =&gt; {

  if (parameter.Name == "ZWaveNode.WakeUpNotify")
  {     
    var nodeinfo = module.Parameter("ZWaveNode.NodeInfo");
    if (nodeinfo != null)
    {
      // nif contains all command classes supported by this module
      string nif = " " + nodeinfo.Value + " ";
      if (nif.Contains(" 84 ") || nif.Contains(" 25 ") || nif.Contains(" 26 ") || nif.Contains(" 43 "))
      {
        if (nif.Contains(" 60 ")) // MultiInstance
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " MultiInstance Get");
          // query first 4 instances
          for (int instance = 1; instance &lt; 4; instance ++)
          {
            if (nif.Contains(" 30 ")) // Sensor Binary
            {
              module.Command("MultiInstance.Get").Execute("Sensor.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 31 ")) // Sensor MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Sensor.MultiLevel/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 25 ")) // Switch Binary
            {
              module.Command("MultiInstance.Get").Execute("Switch.Binary/" + instance);
              Pause(.2);
            }
            else if (nif.Contains(" 26 ")) // Switch MultiLevel
            {
              module.Command("MultiInstance.Get").Execute("Switch.MultiLevel/" + instance);
              Pause(.2);
            }
          }
        }
        else if (nif.Contains(" 27 ")) // Any switch
        {
          if (nif.Contains(" 26 "))
            Pause(3); // Pause 3 second to ensure dimmers get to final value
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
        //
        // query Thermostat set point
        if (nif.Contains(" 43 ")) // Thermostat
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Thermostat SetPoint Get Heating");
          module.Command("Thermostat.SetPointGet").Execute("Heating");
          Pause(.2);
        }
        //
        // query Battery level
        if (nif.Contains(" 80 ")) // Battery
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Battery Get");
          module.Command("Battery.Get").Execute();
          Pause(.2);
        }
        //
        // query Basic value
        if (nif.Contains(" 20 ")) // Basic
        {
          Program.Notify("Z-Wave Node WakeUp", module.Instance.Name + "&lt;br&gt;" + module.Instance.Address + " Basic Get");
          module.Command("Basic.Get").Execute();
          Pause(.2);
        }
      }
    }
  }

  return true; // continue processing event
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>91</Address>
    <Name>Query on Wake Up</Name>
    <Description>Query sensors' data and battery level when a node wakes up.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:13.524546Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.TurnOffDelay", "Automatic turn off delay (seconds)", "slider:0:3600:1");
Program.Run();
</ScriptCondition>
    <ScriptSource>When.ModuleParameterIsChanging((module, parameter) =&gt; {
  // check if the module raising the event has the Turn Off Delay set
  if (module.HasFeature("HomeGenie.TurnOffDelay") &amp;&amp; module.Parameter("HomeGenie.TurnOffDelay").DecimalValue &gt; 0)
  {
    // Check if the module has just been turned on
    if (parameter.Is("Status.Level") &amp;&amp; parameter.Statistics.Last.Value == 0 &amp;&amp; parameter.DecimalValue &gt; 0)
    {
      // Run a background timer that will turn off the light
      var pausedelay = module.Parameter("HomeGenie.TurnOffDelay").DecimalValue;
      Program.RunAsyncTask(()=&gt;{
        Pause(pausedelay);
        // Check if the light is still on, also module.IsOn could be used
        if (parameter.DecimalValue &gt; 0)
        {
          module.Off();
          Program.Notify(
            "Turn Off Delay",
            module.Instance.Name + "&lt;br&gt;" + 
            module.Instance.Address + 
            " switched off.");
        }
      });
    }
  }
  return true;
});
// the program will be running in the background waiting for events
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>112</Address>
    <Name>Turn Off Delay</Name>
    <Description>When device is turned on, automatically turn it off after a given delay.</Description>
    <Group>Energy Management</Group>
    <Features>
      <ProgramFeature>
        <FieldType>slider:0:3600:1</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.TurnOffDelay</Property>
        <Description>Automatic turn off delay (seconds)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:14.025123Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnSwitchTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition />
    <ScriptSource>var portname = "/dev/ttyUSB0";

Action&lt;string&gt; 
HandleStringReceived = (string message) =&gt; {

  // this will be called every time a message is received from serial port
  Program.Notify("SerialPort String", message);

};

Action&lt;byte[]&gt; 
HandleMessageReceived = (byte[] message) =&gt; {

  // this will be called every time a message is received from serial port
  Program.Notify("SerialPort Bytes", BitConverter.ToString(message));

};

Action&lt;bool&gt;
HandleStatusChanged = (bool connected) =&gt; {

  // this will be called every time the connection status changes
  Program.Notify("SerialPort Status", connected ? "CONNECTED!" : "DISCONNECTED!");

};

// open the serial port channel and register handlers
SerialPort
  .WithName( portname )
  .OnStatusChanged( HandleStatusChanged )
  .OnMessageReceived( HandleMessageReceived )
  .OnStringReceived( HandleStringReceived )
  .Connect( 9600 ); // change baud rate if needed

while (Program.IsEnabled)
{
  // send a raw byte message
  byte[] message = { 0x00, 0x00, 0x00, 0x00, 0x00 };
  SerialPort.SendMessage(message);
  // pause 5 seconds
  Pause(5);
  // send a text message
  SerialPort.SendMessage("Hello Things!");
  // pause 10 seconds and repeat again
  Pause(10);
}

</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>132</Address>
    <Name>Serial Port I/O Test</Name>
    <Description>Example of using SerialPort helper class for communicating with serial devices.</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("Email.Sender", "", "1. E-Mail address", "text");
Program.AddOption("Email.SmtpServer", "", "2. SMTP Mail Server address", "text");
Program.AddOption("Email.SmtpUserName", "", "3. SMTP username (optional)", "text");
Program.AddOption("Email.SmtpPassword", "", "4. SMTP password (optional)", "text");
Program.AddOption("Email.SmtpPort", "25", "5. SMTP Mail Server port", "text");
Program.AddOption("Email.SmtpUseSsl", "FALSE", "6. SMTP Mail Server use SSL (TRUE or FALSE)", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{

  if (Program.Option("Email.Sender").Value != Settings.Parameter("Messaging.Email.Sender").Value)
    Settings.Parameter("Messaging.Email.Sender").Value = Program.Option("Email.Sender").Value;
  if (Program.Option("Email.SmtpServer").Value != Settings.Parameter("Messaging.Email.SmtpServer").Value)
    Settings.Parameter("Messaging.Email.SmtpServer").Value = Program.Option("Email.SmtpServer").Value;
  if (Program.Option("Email.SmtpPort").Value != Settings.Parameter("Messaging.Email.SmtpPort").Value)
    Settings.Parameter("Messaging.Email.SmtpPort").Value = Program.Option("Email.SmtpPort").Value;
  if (Program.Option("Email.SmtpUseSsl").Value != Settings.Parameter("Messaging.Email.SmtpUseSsl").Value)
    Settings.Parameter("Messaging.Email.SmtpUseSsl").Value = Program.Option("Email.SmtpUseSsl").Value;
  if (Program.Option("Email.SmtpUserName").Value != Settings.Parameter("Messaging.Email.SmtpUserName").Value)
    Settings.Parameter("Messaging.Email.SmtpUserName").Value = Program.Option("Email.SmtpUserName").Value;
  if (Program.Option("Email.SmtpPassword").Value != Settings.Parameter("Messaging.Email.SmtpPassword").Value)
    Settings.Parameter("Messaging.Email.SmtpPassword").Value = Program.Option("Email.SmtpPassword").Value;

  Pause(10);

}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>142</Address>
    <Name>E-Mail Account</Name>
    <Description>Store e-mail account information for sending/receiving emails.</Description>
    <Group>Messaging and Social</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:14.538464Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", "PushingBox.DeviceId", "PushingBox Notifications DeviceID", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var serviceurl = "http://api.pushingbox.com/pushingbox";

// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {

  if (module.HasFeature("PushingBox.DeviceId") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
  {
    var serviceparams = "?devid=" + module.Parameter("PushingBox.DeviceId").Value;
    //
    serviceparams += "&amp;module=" + module.Instance.Name;
    serviceparams += "&amp;parameter=" + property.Name;
    serviceparams += "&amp;value=" + property.Value;
    //
    Net.WebService(serviceurl + serviceparams).Call();
  }

  // returning true, will route event to other listeners
  return true; 

});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>143</Address>
    <Name>Pushing Box</Name>
    <Description>http://www.pushingbox.com/ integration</Description>
    <Group>Messaging and Social</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{

  Program.AddOption("StartTime", "", "1. Start 'Presence' program at time:", "text");
  Program.AddOption("EndTime", "", "2. Stop 'Presence' program at time:", "text");
  Program.AddOption("ProgramToRun", "", "3. Enter the Name or ID of the program to run:", "text");
  Program.AddOption("Pause", "30", "4. Pause between each run (seconds):", "text");

});

if (Program.Option("StartTime").Value != "" 
    &amp;&amp; Program.Option("EndTime").Value != ""
    &amp;&amp; Program.Option("ProgramToRun").Value != "")
{
  try
  {

    var time_now = DateTime.Now; //String.Format("{H:mm:ss}", DateTime.Now);DateTime.ParseExact("124510", "hhmmss", CultureInfo.InvariantCulture);

    var time_start = DateTime.ParseExact(Program.Option("StartTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);
    var time_end = DateTime.ParseExact(Program.Option("EndTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);

    var duration = new TimeSpan(time_end.Ticks - time_start.Ticks).TotalMinutes;
    var distance = new TimeSpan(time_now.Ticks - time_start.Ticks).TotalMinutes;

    if (distance &gt; 0 &amp;&amp; distance &lt; duration &amp;&amp; Program.Option("ProgramToRun").Value != "")
    {
      // execute the program
      Program.Run();
    }

  }
  catch (Exception ex) 
  { 
    Program.Notify("Presence Simulator", Program.Option("StartTime").Value + "&lt;br&gt;ERROR:" + ex.Message);
  }
}

Pause(30);
</ScriptCondition>
    <ScriptSource>var programToRun = Program.Option("ProgramToRun").Value;
var pause = Program.Option("Pause").DecimalValue;
if (pause &lt; 1) pause = 1;

Program.Notify( "Presence Simulator", "Running 'Presence' program:&lt;br&gt;" + programToRun);

// this is a blocking call and it will wait for the program to end
try
{
  Program.Run( programToRun ); 
}
catch (Exception e)
{
  Program.Notify("Presence Simulator", "ERROR running program:&lt;br&gt;" + e.Message);
}
Pause( pause ); 

</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>144</Address>
    <Name>Presence Simulator</Name>
    <Description>Simulate presence in the house by looping a program during a given interval time.
The program to run can  be a pre-recorded Wizard Script (http://generoso.info/homegenie/scenarios.html).</Description>
    <Group>Security</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PingMe.Address1", "", "IP address to ping #1", "text");
Program.AddOption("PingMe.Address2", "", "IP address to ping #2", "text");
Program.AddOption("PingMe.Address3", "", "IP address to ping #3", "text");

Program.Parameter("PingMe.AtHome").Value = "1";

Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  Pause(10);

  var isarmed = (Program.WithName("Security Alarm System").Parameter("HomeGenie.SecurityArmed").Value == "1");
  if (!isarmed) 
  {
    Pause(50);
    continue;
  }

  int pinging_buddies = 0;
  if (Program.Option("PingMe.Address1").Value != "" &amp;&amp; Net.Ping(Program.Option("PingMe.Address1").Value))
  {
    pinging_buddies++;
  }
  if (Program.Option("PingMe.Address2").Value != "" &amp;&amp; Net.Ping(Program.Option("PingMe.Address2").Value))
  {
    pinging_buddies++;
  }
  if (Program.Option("PingMe.Address3").Value != "" &amp;&amp; Net.Ping(Program.Option("PingMe.Address3").Value))
  {
    pinging_buddies++;
  }

  if (pinging_buddies &gt; 0 &amp;&amp; Program.Parameter("PingMe.AtHome").Value != "1")
  {
    Program.RaiseEvent("PingMe.AtHome", "1", "Ping Me At Home");      
  }
  else if (pinging_buddies == 0 &amp;&amp; Program.Parameter("PingMe.AtHome").Value != "0")
  {
    Program.RaiseEvent("PingMe.AtHome", "0", "Ping Me At Home");
  }
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>154</Address>
    <Name>Ping Me at Home</Name>
    <Description>If security system is armed, pings your mobile device to determine
when you're getting close to home.
The program exposes the parameter &lt;b&gt;PingMe.AtHome&lt;/b&gt;
that can be used both in Wizard Scripts or C# APPs to
trigger actions when you get home.</Description>
    <Group>Security</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.AddVirtualModules("Favourites.Link", "Generic", "homegenie/generic/link", 1, 5);
  Program.AddFeature("Favourites.Link", "Generic", "FavouritesLink.Url", "Favourites link", "text");
});</ScriptCondition>
    <ScriptSource />
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>180</Address>
    <Name>Favourites Links</Name>
    <Description>Add 5 virtual modules with customizable url link.
These can be added to  groups and are then
shown as hyperlink buttons in the control page.</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Favourites.Link</ForDomains>
        <ForTypes>Generic</ForTypes>
        <Property>FavouritesLink.Url</Property>
        <Description>Favourites link</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("",
                   "Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", 
                   "MobileNotification.SendChanges", 
                   "Push notifications to Windows Phone client",
                   "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>string notificationurl = "";
var monitor = Program.WithName("Energy Monitor");

Func&lt;bool&gt; updateTileData = ()=&gt; {

  var devs = monitor.Parameter("EnergyMonitor.OperatingDevices").DecimalValue;
  // Create the Tile message.
  string tileMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
    "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
    "&lt;wp:Tile&gt;" +
    "&lt;wp:Count&gt;0&lt;/wp:Count&gt;" +
    //          "&lt;wp:BackgroundImage&gt;&lt;/wp:BackgroundImage&gt;" +
    //          "&lt;wp:Count&gt;" + (notificationcount++).ToString() + "&lt;/wp:Count&gt;" +
    //          "&lt;wp:Title&gt;HomeGenie Beta&lt;/wp:Title&gt;" +
    "&lt;wp:BackBackgroundImage&gt;&lt;/wp:BackBackgroundImage&gt;" +
    "&lt;wp:BackTitle&gt;Counter " + monitor.Parameter("EnergyMonitor.KwCounter").Value + " Kw&lt;/wp:BackTitle&gt;";
  if (devs &gt; 0)
  {
    tileMessage += "&lt;wp:BackContent&gt;" + devs + " device" + (devs &gt; 1 ? "s" : "") +
      "\nLoad\n" + monitor.Parameter("EnergyMonitor.KwLoad").Value + " Kw&lt;/wp:BackContent&gt;";
  }
  else
  {
    tileMessage += "&lt;wp:BackContent&gt;&lt;/wp:BackContent&gt;";
  }
  tileMessage += "&lt;/wp:Tile&gt; " + "&lt;/wp:Notification&gt;";

  //var response = 
  Net.WebService(notificationurl)
    .AddHeader("Content-type", "text/xml")
    .AddHeader("X-WindowsPhone-Target", "token")
    .AddHeader("X-NotificationClass", "1")
    .Post(tileMessage)
    .Call();

  return true;

};

When.WebServiceCallReceived("HomeAutomaion.HomeGenie/Messaging", ( args ) =&gt; {
  var notificationdata = ((string)args).Substring(("HomeAutomaion.HomeGenie/Messaging/WindowsPhone.RegisterNotificationUrl/").Length);
  //var deviceid = notificationdata.Substring(0, notificationdata.IndexOf('/'));
  notificationurl = notificationdata.Substring(notificationdata.IndexOf('/') + 1);
  //
  if (notificationurl != "") updateTileData();
  //
  return "{ 'ResponseValue' : 'OK' }";
});

When.ModuleParameterChanged( (module, property) =&gt; {

  if (notificationurl != "" &amp;&amp; module.HasFeature("MobileNotification.SendChanges") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
  {
    if (property.DecimalValue != property.Statistics.Last.Value) // TODO: check time from lastvalue as well to prevent flooding
    {
      var pname = property.Name;
      if (pname.IndexOf('.') &gt; 0)
      {
        pname = pname.Substring(pname.IndexOf('.') + 1);
      }
      // Create the Tile message.
      string toastMessage = "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" +
        "&lt;wp:Notification xmlns:wp=\"WPNotification\"&gt;" +
        "&lt;wp:Toast&gt;" +
        "&lt;wp:Text1&gt;" + module.Instance.Name + "&lt;/wp:Text1&gt;" +
        "&lt;wp:Text2&gt;" + pname + " = " + property.Value + "&lt;/wp:Text2&gt;" +
        "&lt;wp:Param&gt;/GroupsPage.xaml?NavigatedFrom=Toast Notification&lt;/wp:Param&gt;" +
        "&lt;/wp:Toast&gt; " +
        "&lt;/wp:Notification&gt;";

      //var response = 
      Net.WebService(notificationurl)
        .AddHeader("Content-type", "text/xml")
        .AddHeader("X-WindowsPhone-Target", "toast")
        .AddHeader("X-NotificationClass", "2")
        .Post(toastMessage)
        .Call();
    }

  }

  // returning true, will route event to other listeners
  return true; 

});

while(Program.IsEnabled)
{
  if (notificationurl != "")
  {
    updateTileData();
    Pause(300);
  }
  Pause(5);
}

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>200</Address>
    <Name>Windows Phone Push Notification Service</Name>
    <Description>Windows Phone push notification service. 
It sends toast and tile updates to Windows Phone client.
Currently limited to one client channel.</Description>
    <Group>Messaging and Social</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow</ForTypes>
        <Property>MobileNotification.SendChanges</Property>
        <Description>Push notifications to Windows Phone client</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:15.540891Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddVirtualModule("HomeAutomation.EnergyMonitor", "1", "Sensor", "homegenie/generic/energymonitor");
Program.Run();
</ScriptCondition>
    <ScriptSource>var energyMonitor = Modules.InDomain("HomeAutomation.EnergyMonitor").WithAddress("1").Get();
var kwCounter = energyMonitor.Parameter("EnergyMonitor.KwCounter");
var kwLoad = energyMonitor.Parameter("EnergyMonitor.KwLoad");
var wattCounter = energyMonitor.Parameter("EnergyMonitor.WattCounter");
var wattLoad = energyMonitor.Parameter("EnergyMonitor.WattLoad");
var operatingDevices = energyMonitor.Parameter("EnergyMonitor.OperatingDevices");
var operatingLights = energyMonitor.Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = energyMonitor.Parameter("EnergyMonitor.OperatingSwitches");

// initialize
energyMonitor.Instance.Name = "Energy Monitor";
kwCounter.Value = "0";
kwLoad.Value = "0";
wattCounter.Value = "0";
wattLoad.Value = "0";
operatingDevices.Value = "0";
operatingLights.Value = "0";
operatingSwitches.Value = "0";

// select all modules supporting metering
var meterModules = Modules.WithParameter("Meter.Watts");
var notifyTicks = 5; // minutes

var UpdateEnergyLoad = new Func&lt;bool&gt;(()=&gt;{
  var totalLoad = 0d;
  int devcount = 0, lightcount = 0, switchcount = 0;
  meterModules.Each((mod)=&gt;{
    if (mod.Parameter("Meter.Watts").DecimalValue &gt; 0)
    {
      totalLoad += mod.Parameter("Meter.Watts").DecimalValue;
      if (mod.IsOfDeviceType("Light") || mod.IsOfDeviceType("Dimmer"))
      {
        lightcount++;
      }
      else
      {
        switchcount++;  
      }
      devcount++;
    }
    return false;
  });
  Program.RaiseEvent(energyMonitor, kwLoad.Name, (totalLoad / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, wattLoad.Name, totalLoad.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingDevices.Name, devcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingLights.Name, lightcount.ToString("0"), "Energy Monitor");
  Program.RaiseEvent(energyMonitor, operatingSwitches.Name, switchcount.ToString("0"), "Energy Monitor");
  return true;
});

When.WebServiceCallReceived("HomeAutomation.EnergyMonitor", (args)=&gt;{
  dynamic response = new System.Dynamic.ExpandoObject();
  response.KiloWattLoad = kwLoad.Value;
  response.KiloWattCouter = kwCounter.Value;
  response.WattCounter = wattCounter.Value;
  response.WattLoad = wattLoad.Value;
  response.OperatingDevices = operatingDevices.Value;
  response.OperatingLights = operatingLights.Value;
  response.OperatingSwitches = operatingSwitches.Value;
  return "[" + Newtonsoft.Json.JsonConvert.SerializeObject(response) + "]";
});

while (Program.IsEnabled)
{
  notifyTicks++;
  UpdateEnergyLoad();
  // update global statistics and notify every 5 minutes
  if (wattLoad.DecimalValue &gt; 0 &amp;&amp; notifyTicks &gt;= 5)
  {
    notifyTicks = 0;
    // update energy use parameters
    var energyUse = Program.EnergyUseCounter;
    Program.RaiseEvent(energyMonitor, kwCounter.Name, (energyUse / 1000D).ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
    Program.RaiseEvent(energyMonitor, wattCounter.Name, energyUse.ToString("0.000", CultureInfo.InvariantCulture), "Energy Monitor");
  }
  Pause(60);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>81</Address>
    <Name>Energy Monitor</Name>
    <Description>Collects and stores real-time information about
energy consumption.</Description>
    <Group>Energy Management</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:16.057001Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>var checkVirtualModules = new Func&lt;ModuleHelper, bool&gt;((module)=&gt;{
  var defaultType = "Switch";
  var parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchBinary.Count");
  if (parameter.DecimalValue == 0)
  {
    // if not SwitchBinary, try SwitchMultilevel
    defaultType = "Dimmer";
    parameter = module.Parameter("ZWaveNode.MultiInstance.SwitchMultiLevel.Count");
  }
  // ADD A VIRTUAL MODULE FOR EACH INSTANCE
  for (int m = 1; m &lt;= parameter.DecimalValue; m++)
  {
    string address = module.Instance.Address + "." + m.ToString();
    var virtualModule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(address).Get();
    if (!virtualModule.WasFound)
    {
      Program.AddVirtualModule("HomeAutomation.ZWave", address, defaultType, "");
      Program.Notify("MultiChannel Z-Wave", "Adding virtual module " + address);
    }
  }
  return true;
});

When.ModuleParameterChanged((module, parameter) =&gt; {
  lock(this)
    if (!parameter.Name.EndsWith(".Count") &amp;&amp; (parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchMultiLevel.") || parameter.Name.StartsWith("ZWaveNode.MultiInstance.SwitchBinary.")))
  {
    var path = parameter.Name.Split('.');
    //var eventType = path[2]; 	// "SwitchMultiLevel" or "SwitchBinary"
    var instance = path[3];		// the instance number

    var id = 0;
    if (int.TryParse(instance, out id))
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(module.Instance.Address + "." + instance).Get();
      Program.RaiseEvent(virtualmodule, "Status.Level", parameter.Value, "ZWaveNode");
    }

  }
  else if (parameter.Name == "ZWaveNode.NodeInfo")
  {
    var nif = (" " + parameter.Value + " "); // node information frame
    if (nif.Contains(" 60 ")) // MultiInstance/Channel
    {
      // ReQUEST instances count
      if (nif.Contains(" 25 ")) // 0x25 Switch Binary
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.Binary");
      }
      if (nif.Contains(" 26 ")) // 0x26 Switch MultiLevel
      {
        module.Command("MultiInstance.GetCount").Execute("Switch.MultiLevel");
      }
      checkVirtualModules(module);
    }
  }

  return true; // continue processing event
});

When.WebServiceCallReceived("HomeAutomation.ZWave", (args) =&gt; {

  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string nodeid = reqs[1];
    string instance = "";
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = reqs[3];
    //
    // Check if it's a node supporting MultiInstance/Channel
    // if the node address is in the form &lt;mainnode_id&gt;.&lt;instance&gt;
    // then this is a command for a multiinstance virtual module
    if (nodeid.IndexOf('.') &gt; 0)
    {
      instance = nodeid.Substring(nodeid.IndexOf('.') + 1);
      nodeid = nodeid.Substring(0, nodeid.IndexOf('.'));
    }
    if (instance != "")
    {
      var virtualmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid + "." + instance).Get();
      var parentmodule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(nodeid).Get();
      //
      switch(command)
      {
        case "Control.On":
          parentmodule.Command("MultiInstance.Set").Execute("Switch.Binary/" + instance + "/255");
          Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
          break;
        case "Control.Off":
          parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
          Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
          break;
        case "Control.Toggle":
          if (virtualmodule.Parameter("Status.Level").DecimalValue == 0)
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/255");
            Program.RaiseEvent(virtualmodule, "Status.Level", "1", "ZWaveNode");
          }
          else
          {
            parentmodule.Command("MultiInstance.Set").Set("Switch.Binary/" + instance + "/0");
            Program.RaiseEvent(virtualmodule, "Status.Level", "0", "ZWaveNode");
          }
          break;
        case "Control.Level":
          parentmodule.Command("MultiInstance.Set").Set("Switch.MultiLevel/" + instance + "/" + parameter);
          Program.RaiseEvent(virtualmodule, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "ZWaveNode");
          break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    }
  } catch (Exception e) { 

    Program.Notify("ZWave MultiInstance module ERROR!", e.Message);

  }  	

  return "";
});

// setup multi channel virtual modules at startup
Modules.InDomain("HomeAutomation.ZWave").Each((module)=&gt;{
  checkVirtualModules(module);
  return false;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>93</Address>
    <Name>Multi Instance/Channel  Virtual Modules</Name>
    <Description>Adds a virtual module for each instance of a multi instance node.
It requires that a manufacturer specific get has been issued on the node.</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:16.541482Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("CellAddress", "192.168.0.?", "1. Remote HG server address", "text");
Program.AddOption("CellUsername", "", "2. Username", "text");
Program.AddOption("CellPassword", "", "3. Password", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  var celladdress  = Program.Option("CellAddress").Value;
  var cellusername = Program.Option("CellUsername").Value;
  var cellpassword = Program.Option("CellPassword").Value;
  // ROUTE METERING EVENT TO REMOTE HG CELL
  if (!celladdress.Contains("?") &amp;&amp; property.Name.StartsWith("Sensor."))
  {
    Net
      .WithCredentials(cellusername, cellpassword)
      .SignalModuleEvent(celladdress, module, property);
  }
  // returning true, will route event to other listeners
  return true;
});
Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>76</Address>
    <Name>Sensor.* events forwarding</Name>
    <Description>Forwards devices' Sensor.* values changes to another HomeGenie box.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOn", "Raw RF string for ON event", "text");
Program.AddFeature("HomeAutomation.X10.RF", "Sensor", "X10RFString.LevelOff", "Raw RF string for OFF event", "text");
Program.AddVirtualModules("HomeAutomation.X10.RF", "Sensor", "homegenie/generic/sensor", 1, 16);
Program.Run();
</ScriptCondition>
    <ScriptSource>var x10rfModules = Modules.InDomain("HomeAutomation.X10.RF");
// We want to do further processing whenever a module prop changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  if (property.Name == "Receiver.RawData" &amp;&amp; module.Instance.Domain == "HomeAutomation.X10")
  {
    x10rfModules.Each((m)=&gt;{
      var rfon = m.Parameter("X10RFString.LevelOn").Value;
      var rfoff = m.Parameter("X10RFString.LevelOff").Value;
      if (rfon != "" &amp;&amp; rfon == property.Value)
      {
        Program.RaiseEvent(m, "Status.Level", "1", "X10 Virtual RF Module");
        return true;
      }
      else if (rfoff != "" &amp;&amp; rfoff == property.Value)
      {
        Program.RaiseEvent(m, "Status.Level", "0", "X10 Virtual RF Module");
        return true;
      }
      return false;
    });
  }
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>121</Address>
    <Name>X10 RF Virtual Modules Mapper</Name>
    <Description>Generate ON/OFF event when specific X10 RF raw strings are received.</Description>
    <Group>X10</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.Enable", "Enable Smart Light Control", "checkbox");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.OnMotionDetect", "Controlled by motion sensor", "module.text:any:sensor:status.level,sensor.motiondetect");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.CheckLuminosity", "Controlled by luminance sensor", "module.text:any:any:sensor.luminance");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.SmartLights.SwitchOffTimeout", "Turn off after inactivity timeout (seconds)", "slider:0:3600:30");
Program.Run();
</ScriptCondition>
    <ScriptSource>var SMART_LIGHT_ENABLE = "HomeGenie.SmartLights.Enable";
var MOT_SENSOR_NAME = "HomeGenie.SmartLights.OnMotionDetect";
var LUM_SENSOR_NAME = "HomeGenie.SmartLights.CheckLuminosity";
var TURNOFF_TIMEOUT = "HomeGenie.SmartLights.SwitchOffTimeout";
var LAST_EVENT = "HomeGenie.SmartLights.LastEvent";
var LUM_TRIGGER_VALUE = 10;
//
var smart_devices = Modules.WithFeature(SMART_LIGHT_ENABLE);
//
var GetDomainAddress = new Func&lt;string, dynamic&gt;((domainAddress)=&gt;{
  dynamic v = new ExpandoObject();
  v.Domain = "0";
  v.Address = "0";
  if (domainAddress.IndexOf(":") &gt; 0)
  {
    v.Domain = domainAddress.Substring(0, domainAddress.LastIndexOf(':'));
    v.Address = domainAddress.Substring(domainAddress.LastIndexOf(':') + 1);
  }
  return v;
});

When.ModuleParameterIsChanging((module, parameter) =&gt; {

  if (module.IsOfDeviceType("Sensor"))
  {
    if (parameter.Name == "Sensor.MotionDetect" || parameter.Name == "Status.Level")
    {
      var motionlevel = parameter.DecimalValue;
      if (motionlevel &gt; 0)
      {
        smart_devices.Each((mod)=&gt; {
          var da = GetDomainAddress(mod.Parameter(MOT_SENSOR_NAME).Value);
          if (da.Domain == module.Instance.Domain &amp;&amp; da.Address == module.Instance.Address)
          {
            mod.Parameter(LAST_EVENT).Value = DateTime.UtcNow.Ticks.ToString();
            if (mod.Level == 0)
            {
              Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched ON " + mod.Instance.Address + " " + mod.Instance.Name);
              //
              da = GetDomainAddress(mod.Parameter(LUM_SENSOR_NAME).Value);
              var lumsensor = Modules.InDomain(da.Domain).WithAddress(da.Address).Get();
              if (lumsensor.Instance != null)
              {
                var luminosity = lumsensor.Parameter("Sensor.Luminance").DecimalValue;
                if (luminosity &lt; LUM_TRIGGER_VALUE)
                {
                  mod.On();
                }
              }
              else	
              {
                mod.On();
              }
            }
          }
          //
          return false;
        });
      }
      else
      {
        // timeout before turning it off
      }
    }
    if (module.HasParameter("Sensor.Luminance"))
    {
      var luminosity = module.Parameter("Sensor.Luminance").DecimalValue;
      smart_devices.Each((mod)=&gt; {
        var da = GetDomainAddress(mod.Parameter(LUM_SENSOR_NAME).Value);
        if (da.Domain == module.Instance.Domain &amp;&amp; da.Address == mod.Instance.Address &amp;&amp; mod.Level &gt; 0)
        {
          if (luminosity &gt;= LUM_TRIGGER_VALUE)
          {
            Program.Notify("Smart Lights", module.Instance.Name + "&lt;br&gt;switched OFF " + mod.Instance.Address + " " + mod.Instance.Name);
            mod.Off();
          }
          else	
          {
            //if (luminosity &lt; 10) mod.Level = 100;
            //else mod.Level = 50;
          }
        }
        return false;
      });
    }
  }
  return true;
});
//
while (Program.IsEnabled)
{
  smart_devices.Each((mod)=&gt; {
    var timeout = mod.Parameter(TURNOFF_TIMEOUT).DecimalValue;
    if (timeout == 0) timeout = 120; // default timeout is 2 minutes
    //		Program.Notify("Smart Lights", mod.Instance.Address + " - " + mod.Instance.Name + " : " + mod.IsOn);
    //		Pause(1);
    if (mod.IsOn)
    {
      var lastevent = mod.Parameter(LAST_EVENT).UpdateTime;
      var lastupdate = mod.Parameter("Status.Level").UpdateTime;
      var checktime = lastevent.Ticks;
      if (checktime &lt; lastupdate.Ticks) checktime = lastupdate.Ticks;
      var elapsed = new TimeSpan(DateTime.UtcNow.Ticks - checktime);
      if (elapsed.TotalSeconds &gt; timeout) {
        Program.Notify("Smart Lights", mod.Instance.Address + " " + mod.Instance.Name + "&lt;br&gt;switched OFF.");
        mod.Off();
      }
    }
    return false;
  });
  Pause(2);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>145</Address>
    <Name>Smart Lights</Name>
    <Description>Control device by motion detection and enviroment light. </Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.Enable</Property>
        <Description>Enable Smart Light Control</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:sensor:status.level,sensor.motiondetect</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.OnMotionDetect</Property>
        <Description>Controlled by motion sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>module.text:any:any:sensor.luminance</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.CheckLuminosity</Property>
        <Description>Controlled by luminance sensor</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>slider:0:3600:30</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.SmartLights.SwitchOffTimeout</Property>
        <Description>Turn off after inactivity timeout (seconds)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:17.041572Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

/*
	Knowledge of Controller Fibaro RGWM-441
	---------------------------------------
Version 1.0
Date : 06/02/2014
Author : DaniMail

MultiLevel Switch (Dimmer) :
4 channels MultiLevel -&gt; R G B W
4 channels MultiSensor attached to each MultiLevel Dimmer

Principal Instance :
	     Control.Level 0 to 99 of the last color adjusted.
	     Control.On Control.Off accepted

It as 5 other Instances :
Instance 1 : Control.Level 0 to 99 of the last color adjusted. 
	     Control.On Control.Off not accepted
Instance 2 : Control.Level 0 to 99 for Red Channel. 
	     Control.On Control.Off not accepted
Instance 3 : Control.Level 0 to 99 for Green Channel. 
	     Control.On Control.Off not accepted
Instance 4 : Control.Level 0 to 99 for Blue Channel. 
	     Control.On Control.Off not accepted
Instance 5 : Control.Level 0 to 99 for White Channel. 
	     Control.On Control.Off not accepted

Is as 2 principaly parameters that affect the outputs :
Parameter 14 :
	     This parameter affect the action of the 4 input sensor
	     Default value : 4369 (Momentary Normal Mode) -&gt; With this value each input 
		is attached to manually switch on color R G B W
	     For exemple, if the value is 13107 (Momentary Rainbow)-&gt; If any switch is On, 
		it's generate a graduated variation of the color until is Off.   

Parameter 72 :
	     This parameter set the automatic program running on the module.
	     Default value : 1
	     Value 1 to 5 : User programs to define
	     Value 6 to 10 : Programs predefined on the module
		6 : -&gt; Fast brigtness variation of clear green color
		7 : -&gt; Hard blue with spaced white flashes
		8 : -&gt; Slow color variation of R G B spectrum
		9 : -&gt; Slow color variation of pastel colors spectrum
		10 : -&gt; Fast flashes between Red and Blue

Actually I don't have any specs on how to set User program.
I think it's actually possible only with "Fibaro Home Center 2".
*/
Modules.InDomain("HomeAutomation.ZWave").WithParameter("ZWaveNode.ManufacturerSpecific").Each((m)=&gt; {
  if( m.Parameter("ZWaveNode.ManufacturerSpecific").Value == "010F:0900:1000" )
  {
    Program.AddVirtualModule("HomeAutomation.FibaroRGBW", m.Instance.Address, "Dimmer","DaniMail/fibaro/rgbw");
    // Added temporary until Switch.MultiLevel.GetCount works properly 
    for (int i = 1; i &lt;= 5 ; i++)
    {
      string address = m.Instance.Address + "." + i.ToString();
      Program.AddVirtualModule(m.Instance.Domain, address, "Dimmer", "homegenie/generic/dimmer");
    }
    // End of Added
  }
  return false ;
});
Program.Run();</ScriptCondition>
    <ScriptSource>//	Program.Option("ZWaveModule").Value  
// - http://&lt;hg_address&gt;/api/HomeAutomation.FibaroRGBW/...
// - Version : 1.0
// - Date : 06/02/2014
// - Author : DaniMail

When.WebServiceCallReceived("HomeAutomation.FibaroRGBW", ( args ) =&gt; {
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
  	try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber).Get();
      var moduleRaise = Modules.InDomain("HomeAutomation.FibaroRGBW").WithAddress(lightnumber).Get();
      //
      switch(command)
      {
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.On
        case "Control.On":
			module.On();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.Off
        case "Control.Off":
			module.Off();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
        	break;
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
				module.On();
              	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
            }
        	else
            {
	 			module.Off();
 	        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
            }
        	break;
        case "Control.Level":
        	module.Command("Control.Level").Set((double.Parse(parameter)).ToString()) ;
            Program.RaiseEvent(moduleRaise, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "Fibaro RGBW");
        	break;
		// eg. http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
        	string[] values = parameter.Split(',');
 	        Program.RaiseEvent(moduleRaise, "Status.ColorHsb", parameter, "Fibaro RGBW");
        	double level = (double.Parse(values[0], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iRed = (int)Math.Truncate(level) ;
        	var moduleRed = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".2").Get();
   		 	moduleRed.Command("Control.Level").Set( ((int)iRed).ToString() ) ;
        	level = (double.Parse(values[1], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iGreen = (int)Math.Truncate(level) ;
        	var moduleGreen = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".3").Get();
    	 	moduleGreen.Command("Control.Level").Set( ((int)iGreen).ToString() ) ;
        	level = (double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)/255D)*99D ;
        	int iBlue = (int)Math.Truncate(level) ;
        	var moduleBlue = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber+".4").Get();
    	 	moduleBlue.Command("Control.Level").Set( ((int)iBlue).ToString() ) ;
        	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
        	break; 
        case "Control.ProgramRGB" :
			module.Command("Config.ParameterSet").Set("72/" + parameter);
           	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
//			Program.Notify("Program RGB", "N° " + parameter + " running" );
            break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
      
    	Program.Notify("Fibaro RGBW ERROR!", e.Message);
                       
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>502</Address>
    <Name>Fibaro RGBW</Name>
    <Description>Adds ZWave Fibaro RGBWM-441 control capability to HomeGenie. 
</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>Program.AddOption("GPIO4",  "OUT", "GPIO04 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO17", "OFF", "GPIO17 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO18", "OFF", "GPIO18 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO21", "OUT", "GPIO21 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO22", "OUT", "GPIO22 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO23", "OUT", "GPIO23 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO24", "OUT", "GPIO24 (IN, OUT or OFF)", "text");
Program.AddOption("GPIO25", "OUT", "GPIO25 (IN, OUT or OFF)", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var moduleDomain = "RaspberryPi.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
var gpio4  = Program.Option("GPIO4").Value.ToLower();
var gpio17 = Program.Option("GPIO17").Value.ToLower();
var gpio18 = Program.Option("GPIO18").Value.ToLower();
var gpio21 = Program.Option("GPIO21").Value.ToLower();
var gpio22 = Program.Option("GPIO22").Value.ToLower();
var gpio23 = Program.Option("GPIO23").Value.ToLower();
var gpio24 = Program.Option("GPIO24").Value.ToLower();
var gpio25 = Program.Option("GPIO25").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
if (gpio4  != "off") pinMapping.Add(new { Config = gpio4, Address =  "GPIO4", Pin =  ConnectorPin.P1Pin7, Direction = ( gpio4.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio4.StartsWith("!") });
if (gpio17 != "off") pinMapping.Add(new { Config = gpio17, Address = "GPIO17", Pin = ConnectorPin.P1Pin11, Direction = (gpio17.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio17.StartsWith("!") });
if (gpio18 != "off") pinMapping.Add(new { Config = gpio18, Address = "GPIO18", Pin = ConnectorPin.P1Pin12, Direction = (gpio18.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio18.StartsWith("!") });
if (gpio21 != "off") pinMapping.Add(new { Config = gpio21, Address = "GPIO21", Pin = ConnectorPin.P1Pin13, Direction = (gpio21.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio21.StartsWith("!") });
if (gpio22 != "off") pinMapping.Add(new { Config = gpio22, Address = "GPIO22", Pin = ConnectorPin.P1Pin15, Direction = (gpio22.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio22.StartsWith("!") });
if (gpio23 != "off") pinMapping.Add(new { Config = gpio23, Address = "GPIO23", Pin = ConnectorPin.P1Pin16, Direction = (gpio23.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio23.StartsWith("!") });
if (gpio24 != "off") pinMapping.Add(new { Config = gpio24, Address = "GPIO24", Pin = ConnectorPin.P1Pin18, Direction = (gpio24.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio24.StartsWith("!") });
if (gpio25 != "off") pinMapping.Add(new { Config = gpio25, Address = "GPIO25", Pin = ConnectorPin.P1Pin22, Direction = (gpio25.EndsWith("out") ? PinDirection.Output : PinDirection.Input), Reversed = gpio25.StartsWith("!") });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  if (pc.Direction == PinDirection.Input)
  {
    configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    if (pc.Config.EndsWith("+"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
    }
    else if (pc.Config.EndsWith("-"))
    {
      ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
    }
    Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  else
  {
    configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
    ((OutputPinConfiguration)configuration[p]).Reversed = pc.Reversed;
    Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
  }
  configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
  connection = new GpioConnection(configuration);
}
catch 
{
  Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  Pause(10);
  return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  var address = args.Configuration.Name;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  Program.RaiseEvent(module, "Status.Level", 
                     args.Enabled ? "1" : "0",
                     address);

});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  var pc = pinMapping[p];
  var address = pc.Address;
  var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
  module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var errorMessage = "";
  try
  {
    string address = reqs[1];
    string command = reqs[2];
    //
    switch(command)
    {
      // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
      case "Control.On":
      connection[address] = true;
      break;
      // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
      case "Control.Off":
      connection[address] = false;
      break;
      // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
      case "Control.Toggle":
      connection.Toggle(address);
      break;
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } 
  catch (Exception ex) 
  { 
    errorMessage = ex.Message + " " + ex.StackTrace;
  }
  // unable to process request
  return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>100</Address>
    <Name>GPIO Modules</Name>
    <Description>Raspberry Pi GPIO mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
Use IN+ to activate the internal PullUp resistor or IN- to activate the internal PullDown resistor.
Use !OUT to Reverse the pin level On = 0 and Off = 1.
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1).
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("ModemIp", "", "1. Modem IP address", "text");
//Program.AddOption("ModemUsername", "", "2. Modem username", "text");
Program.AddOption("ModemPassword", "", "2. Modem password", "text");
Program.AddOption("SmsRecipient", "", "4. Recipient phone number", "text");
Program.AddFeature("", "Switch,Dimmer,Light,Siren,Sensor,Program,DoorWindow", "AlcatelY800Z.NotifyEvents", "Send SMS on module event", "checkbox");
Program.AddVirtualModule("Network.AlcatelY800Z", "CM", "Switch", "homegenie/generic/switch");
Program.Run();
</ScriptCondition>
    <ScriptSource>const string NOTIFICATION_TITLE = "Alcatel Y800Z";
var modemAddress = Program.Option("ModemIp").Value;
var modemUsername = "admin"; //Program.Option("ModemUsername").Value;
var modemPassword = Program.Option("ModemPassword").Value;
var smsRecipient = Program.Option("SmsRecipient").Value;

var doLogin = new Func&lt;dynamic&gt;(()=&gt;{
  return Net
    .WebService("http://" + modemAddress + "/goform/setLogin")
    .Post("username=" + modemUsername + "&amp;password=" + modemPassword)
    .GetData();
});

var doConnect = new Func&lt;dynamic&gt;(()=&gt;{
  return Net
    .WebService("http://" + modemAddress + "/goform/setWanConnect")
    .Post("profile_id=16")
    .GetData();
});

var doDisconnect = new Func&lt;dynamic&gt;(()=&gt;{
  return Net
    .WebService("http://" + modemAddress + "/goform/setWanDisconnect")
    .Post("")
    .GetData();
});

var getStatus = new Func&lt;dynamic&gt;(()=&gt;{
  return Net
    .WebService("http://" + modemAddress + "/goform/getWanInfo")
    .Post("d=1")
    .GetData();
});

var sendSms = new Func&lt;string, string, dynamic&gt;((recipient, message)=&gt;{
  return Net
    .WebService("http://" + modemAddress + "/goform/sendSMS")
    .Post("sms_number=" + recipient + "&amp;sms_content=" + message + "&amp;action_type=new")
    .GetData();
});

Func&lt;string,bool&gt; SmsSend = new Func&lt;string,bool&gt;((message)=&gt;{
  var success = false;
  var loginData = doLogin();
  if (loginData.error == "0")
  {	
    var smsSend = sendSms(smsRecipient, message);
    if (smsSend.error == "0")
    {
      success = true;
      Program.Notify(NOTIFICATION_TITLE, "SMS succesfully delivered.");
    }
    else
    {
      Program.Notify(NOTIFICATION_TITLE, "ERROR: Could not send SMS (Err:" + smsSend.error + ").");
    }
  }
  else
  {
    Program.Notify(NOTIFICATION_TITLE, "ERROR: Wrong Modem IP or credentials.");
  }
  return success;
});


// We want to do further processing whenever a module changes 
When.ModuleParameterChanged( (module, property) =&gt; {
  if (Program.Option("SmsRecipient").Value != "")
  {
    // Security Alarm System Notification
    if (module.Instance.Name == "Security Alarm System" &amp;&amp; property.Name == "HomeGenie.SecurityTriggered" &amp;&amp; property.Value == "1")
    {
      var source = Program.WithName("Security Alarm System").Parameter("HomeGenie.SecurityTriggerSource").Value;
      SmsSend("WARNING! Alarm was just triggered: " + source);
    }
    else if (module.HasFeature("AlcatelY800Z.NotifyEvents") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.")))
    {
      var message = module.Instance.Name + " " + property.Name + "=" + property.Value + " (" + module.Instance.Domain + "." + module.Instance.Address + ")";
      SmsSend(message);
    }      
  }
  // returning true, will route event to other listeners
  return true; 

});

When.WebServiceCallReceived("Network.AlcatelY800Z", (query)=&gt;{
  var args = ((string)query).Split('/');
  var domain = args[0]; // Network.AlcatelY800Z
  var module = args[1];
  var command = args[2];
  object response = null;
  if (module == "CM") // Connection Manager
  {
    Program.Notify("Internet", "...");
    var login = doLogin();
    Program.Notify("Internet", "res:" + login);
    switch(command)
    {
      case "Control.Connect":
      case "Control.On":
      	if (login.error == "0")
        {
          var res = doConnect(); Pause(2);
          response = res;
          try {
              if (res.error == "0") Program.Say("Connected to Internet.", "en-US");
          } catch { }
        }
      	else
        {
          response = "{ error: 'login_error' }";
          Program.Notify(NOTIFICATION_TITLE, "ERROR: Wrong Modem IP or credentials.");
        }
      	break;
      case "Control.Disconnect":
      case "Control.Off":
      	if (login.error == "0")
        {
          var info = getStatus();
          try {
              if (info.wan_state == "2") Program.Say("Internet disconnected.", "en-US");
          } catch { }
          response = doDisconnect();
        }
      	else
        {
          response = "{ error: 'login_error' }";
          Program.Notify(NOTIFICATION_TITLE, "ERROR: Wrong Modem IP or credentials.");
        }
        break;
      case "Status.Info":
      	if (login.error == "0")
        {
          response = getStatus();
        }
      	else
        {
          response = "{ error: 'login_error' }";
          Program.Notify(NOTIFICATION_TITLE, "ERROR: Wrong Modem IP or credentials.");
        }
        break;
    }
  }
  return response;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>201</Address>
    <Name>Alcatel One Touch Y800Z SMS Notify</Name>
    <Description>Send SMS notifies when a device status changes and/or when the Security Alarm System is triggered.</Description>
    <Group>Messaging and Social</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// list the program as custom weather widget
Program.UseWidget("jkUtils/OpenWeatherMap/OpenWeatherMap");

// set input fields parameters
Program.AddOption("Location", "Berlin", "City name", "text");
Program.AddOption("Language", "de", "Language. See http://OpenWeatherMap.org/API for available langugae codes.", "text");
Program.AddOption("UpdateInterval", "60", "Update interval in minutes. Default is 60 minutes.", "text");
Program.AddOption("Custom Display Units", "TRUE", "Display System of Units (TRUE = use metric system, FALSE = use imperial system)", "text");
Program.AddOption("Custom Color", "213", "HUE Color Value", "text");
Program.AddOption("Custom Zoom", "100%", "Custom Zoom", "text");

// setup program parameters
Program.Parameter("jkUtils.OpenWeatherMap.Cod").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Name").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Id").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = "";    // Rain in mm within the last 1 hour
Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = "";    // .. the last 3 hours
Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = "";   // .. the last 24 hours
Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = ""; // .. since midnight

Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = "";  // Snowfall in mm. same as rain.
Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = "";

//Program.Parameter("jkUtils.OpenWeatherMap.Base").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = "";
Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = "";

Program.Parameter("jkUtils.OpenWeatherMap.LastUpdated").Value = "";

Program.Run();
</ScriptCondition>
    <ScriptSource>// jkUtils - OpenWeatherMap Ver 2.0 2014-05-08
// this version uses the 2.5 API from OpenWeatherMap.org
// ------------------------------------
// A HomeGenie script to fetch current weather data from http://OpenWeatherMap.org/ .
// No key or account is required to use this service.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use the free API services of http://OpenWeatherMap.org . For details see http://OpenWeatherMap.org/API
// Please use as adviced under http://OpenWeatherMap.org/about .


Func&lt;bool&gt; _checkWeather = new Func&lt;bool&gt;(()=&gt;{
  Program.RunAsyncTask(()=&gt; {
    string location = Program.Option("Location").Value;
    string language = Program.Option("Language").Value; 
    string displayCelsius = Program.Option("Custom Display Units").Value;
    string webserviceurl = "http://api.OpenWeatherMap.org/data/2.5/weather?q="+ location +"&amp;lang=" + language; 
    TimeSpan t = (DateTime.UtcNow - new DateTime(1970, 1, 1));
    int UTCTimeNow = (int)t.TotalSeconds;
    string UCTTimeNowString = UTCTimeNow.ToString();

    Program.Parameter("jkUtils.OpenWeatherMap.LastUpdated").Value = UCTTimeNowString; //last_updated;

    try
    {
      //string last_updated = DateTime.Now.ToString("HH:mm"); 

      if (displayCelsius.ToLower() == "true") {
        webserviceurl = webserviceurl + "&amp;units=metric";
        Program.Parameter("jkUtils.OpenWeatherMap.Temp.Label").Value = "°C";
        Program.Parameter("jkUtils.OpenWeatherMap.Wind.Label").Value = "m/s";
      } else {
        webserviceurl = webserviceurl + "&amp;units=imperial";
        Program.Parameter("jkUtils.OpenWeatherMap.Temp.Label").Value = "°F";
        Program.Parameter("jkUtils.OpenWeatherMap.Wind.Label").Value = "kph"; 
      }        

      var data = Net.WebService(webserviceurl).GetData();    

      //check for update in data     
      //if(data.dt.ToString() != Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value ) {
      if(0 != 1 ) {          

        Program.Parameter("jkUtils.OpenWeatherMap.Cod").Value = data.cod ?? "";
        Program.Parameter("jkUtils.OpenWeatherMap.Name").Value = data.name ?? "";
        Program.Parameter("jkUtils.OpenWeatherMap.Id").Value = data.id ?? "";
        Program.Parameter("jkUtils.OpenWeatherMap.Dt").Value = data.dt ?? "";

        if(data.clouds != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = data.clouds.all ?? "";
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Clouds.All").Value = ""; 
        }

        if(data.rain != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = data.rain["1h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = data.rain["3h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = data.rain["24h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = data.rain["today"] ?? "";
        } else { 
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H1").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H3").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Rain.Today").Value = "";         
        }

        if(data.snow != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = data.snow["1h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = data.snow["3h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = data.snow["24h"] ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = data.snow["today"] ?? "";
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H1").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H3").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.H24").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Snow.Today").Value = "";           
        }          

        if(data.wind != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = data.wind.speed ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = data.wind.deg ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = data.wind.gust ?? "";
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Deg").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Wind.Gust").Value = "";           
        }

        if(data.main != null) {
          if(Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value != "") {
            Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value;           	 
          }
          if(Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value != "") {
            Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value;           	 
          }
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = data.main.temp ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = data.main.humidity ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = data.main.pressure ?? "";
          //optional values
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = data.main.sea_level ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = data.main.grnd_level ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = data.main.temp_max ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = data.main.temp_min ?? "";
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Temp.Previous").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Humidity").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.Pressure.Previous").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureSea").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.PressureGround").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMax").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Main.TempMin").Value = "";           
        }

        //Program.Parameter("jkUtils.OpenWeatherMap.Base").Value = data["base"] ?? "";

        if(data.weather[0] != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = data.weather[0].id ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = data.weather[0].main ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = data.weather[0].description ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = data.weather[0].icon ?? "";
          /* 
           // Potential fix for problems in recieving JSON UTF encoded data

           Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = Regex.Replace(
             			 data.weather[0].description,
                         @"\\u(?&lt;value&gt;[0-9a-f]{4})",
                         match =&gt; {
                             string digits = match.Groups["value"].Value;
                             int number = int.Parse(digits, NumberStyles.HexNumber);
                             return char.ConvertFromUtf32(number);
                         })  ?? "";
          */
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Id").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Main").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Description").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Weather.Icon").Value = "";           
        }

        if(data.sys != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = data.sys.message ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = data.sys.country ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = data.sys.sunrise ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = data.sys.sunset ?? "";        
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Message").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Country").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunrise").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Sys.Sunset").Value = "";                   
        }

        if(data.coord != null) {
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = data.coord.lon ?? "";
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = data.coord.lat ?? "";
        } else {
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lon").Value = "";
          Program.Parameter("jkUtils.OpenWeatherMap.Coord.Lat").Value = "";           
        }

        //STENCIL: Program.Parameter("jkUtils.OpenWeatherMap.").Value = data. ?? "";

      }

      Program.Notify("jkutils - OpenWeatherMap","Data has been updated.");
      //Program.RaiseEvent("jkUtils.OpenWeatherMap.LastUpdated", UCTTimeNowString, "Updated");
    } 
    catch (Exception e) 
    {                
      Program.Notify("jkutils - OpenWeatherMap", "Update of data failed.");
      //DEBUG: Program.Notify("OpenWeatherMap ERROR!", e.Message);
      Console.WriteLine( e.Message );
      //Pause(10);        
    }



  });

  return true;
});      

//
// Web service calls handling
//

When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args) =&gt; {
  string[] reqs = ((string)args).Split('/');
  var res = "";

  try
  {
    string command = reqs[2];
    switch(command)
    {
      case "Control.Refresh":
      //Program.Notify("jkutils: OpenWeatherMap","Update triggered.");
      _checkWeather();
      break;
    }
  } 
  catch (Exception ex) 
  { 
    res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
  }
  // unable to process request
  
  return res;
});

while (Program.IsEnabled)
{
  _checkWeather();
  Pause(Program.Option("UpdateInterval").DecimalValue * 60); // pause before next check
  //Pause(10);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>503</Address>
    <Name>jkUtils - OpenWeatherData</Name>
    <Description>Gathers weather data from http://www.OpenWeatherMap.org/ [API Version 2.5] 
No service key required to fetch data.</Description>
    <Group>Weather and Enviroment</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>hg.Program.UseWidget("jkUtils/SolarAltitude/SolarAltitude");
hg.Program.AddOption("jkUtils.SolarAltitude.Latitude", "", "Location: Latitude", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Longitude", "", "Location: Longitude", "text");    
hg.Program.AddOption("jkUtils.SolarAltitude.Label", "", "Custom Label", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Zoom", "100%", "Custom Zoom", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Color", "46", "Custom Color (HUE Value)", "text");
hg.Program.AddOption("jkUtils.SolarAltitude.Timeformat", "FALSE", "Custom Timeformat (TRUE = use AM/PM Format, FALSE = use 24h Format)", "text");
hg.Program.Run();
</ScriptCondition>
    <ScriptSource>
// jkUtils - Solar Altitude Ver 2.0 2014-05-07
// ------------------------------------
// A HomeGenie script to locally calculate sunrise/sunset with civil, nautical and astronomical timings.
// This script also sets and automatically updates timers for the scheduler service.
// Requires local longitude and latitude values to be set within programm options.
// Localization implemented for: US-en and DE-de. Feel free to add your own localization in /locales dir analogous to HomeGenie .json files.
// All used Icons/Graphics make full use of png-transparency to be able to place them over any colored background.

// Released under BSD-licensed.
// (c) 2014 Jan Koch, Berlin

// Acknowledgements:

// This program makes use of the original SunCalc which is a JavaScript library for calculating sun/mooon position and light phases.
// For more info see https://github.com/mourner/SunCalc (c) 2011-2014, Vladimir Agafonkin. BSD-licensed.

// calculations for illumination parameters of the moon, based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.


// shortcuts for easier to read formulas

var PI = Math.PI,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) {
  return date.valueOf() / dayMs - 0.5 + J1970;
}
function fromJulian(j) {
  return new Date((j + 0.5 - J1970) * dayMs);
}
function toDays(date) {
  return toJulian(date) - J2000;
}


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function getRightAscension(l, b) {
  return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));
}
function getDeclination(l, b) {
  return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));
}
function getAzimuth(H, phi, dec) {
  return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));
}
function getAltitude(H, phi, dec) {
  return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));
}
function getSiderealTime(d, lw) {
  return rad * (280.16 + 360.9856235 * d) - lw;
}


// general sun calculations

function getSolarMeanAnomaly(d) {
  return rad * (357.5291 + 0.98560028 * d);
}
function getEquationOfCenter(M) {
  return rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M));
}
function getEclipticLongitude(M, C) {
  var P = rad * 102.9372; // perihelion of the Earth
  return M + C + P + PI;
}
function getSunCoords(d) {

  var M = getSolarMeanAnomaly(d),
      C = getEquationOfCenter(M),
      L = getEclipticLongitude(M, C);

  return {
    dec: getDeclination(L, 0),
    ra: getRightAscension(L, 0)
  };
}


var SolarAltitude = {};


// calculates sun position for a given date and latitude/longitude

SolarAltitude.getPosition = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      c = getSunCoords(d),
      H = getSiderealTime(d, lw) - c.ra;

  return {
    azimuth: getAzimuth(H, phi, c.dec),
    altitude: getAltitude(H, phi, c.dec)
  };
};


// sun times configuration (angle, morning name, evening name)

var times = [
  [ -0.83,'sunrise', 'sunset' ],
  [ -0.3, 'sunriseEnd', 'sunsetStart' ],
  [ -6,   'dawn', 'dusk' ],                     //nautical twilight angle
  [ -12,  'nauticalDawn', 'nauticalDusk'],     //astronomical twilight angle
  [ -18,  'nightEnd', 'night' ],               //darkness angle
  [ 6,    'goldenHourEnd', 'goldenHour' ]
];

// adds a custom time to the times config

SolarAltitude.addTime = function (angle, riseName, setName) {
  times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function getJulianCycle(d, lw) {
  return Math.round(d - J0 - lw / (2 * PI));
}
function getApproxTransit(Ht, lw, n) {
  return J0 + (Ht + lw) / (2 * PI) + n;
}
function getSolarTransitJ(ds, M, L) {
  return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);
}
function getHourAngle(h, phi, d) {
  var first = sin(h) - sin(phi) * sin(d),
      second = cos(phi) * cos(d),
      third = first / second;
  if ( third &lt; -1 || third &gt; 1 ) {
    third = Math.round(third);
  }  
  return acos(third);
}


// calculates sun times for a given date and latitude/longitude

SolarAltitude.getTimes = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      n = getJulianCycle(d, lw),
      ds = getApproxTransit(0, lw, n),

      M = getSolarMeanAnomaly(ds),
      C = getEquationOfCenter(M),
      L = getEclipticLongitude(M, C),

      dec = getDeclination(L, 0),

      Jnoon = getSolarTransitJ(ds, M, L);


  // returns set time for the given sun altitude
  function getSetJ(h) {
    var w = getHourAngle(h, phi, dec),
        a = getApproxTransit(w, lw, n);

    return getSolarTransitJ(a, M, L);
  }


  var result = {
    solarNoon: fromJulian(Jnoon),
    nadir: fromJulian(Jnoon - 0.5)
  };

  var i, len, time, angle, morningName, eveningName, Jset, Jrise;

  for (i = 0, len = times.length; i &lt; len; i += 1) {
    time = times[i];

    Jset = getSetJ(time[0] * rad);
    Jrise = Jnoon - (Jset - Jnoon);

    result[time[1]] = fromJulian(Jrise);
    result[time[2]] = fromJulian(Jset);
  }

  return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function getMoonCoords(d) { // geocentric ecliptic coordinates of the moon

  var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
      M = rad * (134.963 + 13.064993 * d), // mean anomaly
      F = rad * (93.272 + 13.229350 * d), // mean distance

      l = L + rad * 6.289 * sin(M), // longitude
      b = rad * 5.128 * sin(F), // latitude
      dt = 385001 - 20905 * cos(M); // distance to the moon in km

  return {
    ra: getRightAscension(l, b),
    dec: getDeclination(l, b),
    dist: dt
  };
}

SolarAltitude.getMoonPosition = function (date, lat, lng) {

  var lw = rad * -lng,
      phi = rad * lat,
      d = toDays(date),

      c = getMoonCoords(d),
      H = getSiderealTime(d, lw) - c.ra,
      h = getAltitude(H, phi, c.dec);

  // altitude correction for refraction
  h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

  return {
    azimuth: getAzimuth(H, phi, c.dec),
    altitude: h,
    distance: c.dist
  };
};

SolarAltitude.getMoonIllumination = function (date) {

  var d = toDays(date),
      s = getSunCoords(d),
      m = getMoonCoords(d),

      sdist = 149598000, // distance from Earth to Sun in km

      phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
      inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi));

  return {
    fraction: (1 + cos(inc)) / 2,
    angle: atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec)
                - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra))
  };
};

SolarAltitude.printTime = function (d,m){
  var newd = new Date(d.valueOf() + m * 60000);
  var min = newd.getMinutes();
  var hour = newd.getHours();
  if (min &lt; 10) min = "0" + min;
  if (hour &lt; 10) hour = "0" + hour;
  return hour+":"+min;
};

SolarAltitude.saveTimer = function (timer,d,m){
  var str = 'hg.Program.Parameter("'+ timer + '").Value = SolarAltitude.printTime(d,m);';
  eval(str);
  var str = 'var savedTimer = hg.Program.Parameter("'+ timer + '").Value';
  eval(str);
  var spiltTimer = savedTimer.split(":");
  timer = timer.substring(timer.indexOf(".")+1);
  hg.Scheduler.WithName(timer).SetSchedule(""+ spiltTimer[1] +" "+ spiltTimer[0] +" * * *");
};


SolarAltitude.main = function () {

  // HomeGenie Main Script Logic starts here ------- 

  var currentTime = new Date();
  var latitude = hg.Program.Option("jkUtils.SolarAltitude.Latitude").Value;
  var longitude = hg.Program.Option("jkUtils.SolarAltitude.Longitude").Value;    
  var sun = SolarAltitude.getTimes(currentTime, latitude, longitude);
  var moon = SolarAltitude.getMoonIllumination(currentTime);

  var timeFormat = {hour: "numeric", minute: "numeric"};

  // copy configure inputs to parameters as well
  hg.Program.Parameter("jkUtils.SolarAltitude.Latitude").Value = hg.Program.Option("jkUtils.SolarAltitude.Latitude").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Longitude").Value = hg.Program.Option("jkUtils.SolarAltitude.Longitude").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Label").Value = hg.Program.Option("jkUtils.SolarAltitude.Label").Value;
  hg.Program.Parameter("jkUtils.SolarAltitude.Timeformat").Value = hg.Program.Option("jkUtils.SolarAltitude.Timeformat").Value;

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Start",sun.nightEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Day.Noon",sun.solarNoon,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Start",sun.night,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Night.Nadir",sun.nadir,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Night.End",sun.nightEnd,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.Start",sun.nightEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Astronomical.End",sun.nauticalDawn,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.Start",sun.nauticalDawn,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Nautical.End",sun.dawn,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.Start",sun.dawn,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Civil.End",sun.sunrise,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.Start",sun.sunrise,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.Sunrise.End",sun.sunriseEnd,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.Start",sun.sunriseEnd,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Morning.GoldenHour.End",sun.goldenHourEnd,0);

  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.Start",sun.goldenHour,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.GoldenHour.End",sun.sunsetStart,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.Start",sun.sunsetStart,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Sunset.End",sun.sunset,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.Start",sun.sunset,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Civil.End",sun.dusk,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.Start",sun.dusk,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Nautical.End",sun.nauticalDusk,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.Start",sun.nauticalDusk,0);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Astronomical.End",sun.night,-1);
  SolarAltitude.saveTimer("jkUtils.SolarAltitude.Evening.Night.Start",sun.night,0);

  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Fraction").Value = moon.fraction;

  moon.fraction = moon.fraction * 100;

  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Precent").Value = Math.round(moon.fraction) + "%";
  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Angle").Value = moon.angle;
  hg.Program.Parameter("jkUtils.SolarAltitude.Moon.Waxing").Value = (moon.angle &lt; 0 ? "1" : "0");

  hg.Program.Parameter("jkUtils.SolarAltitude.LastUpdated").Value = SolarAltitude.printTime(currentTime,0);

  hg.Program.Notify("jkUtils - Solar Altitude", "Data has been updated.");

};

//
// Web service calls handling
//
hg.When.WebServiceCallReceived(hg.Program.Module.Domain + "/" + hg.Program.Module.Address, function (args) {
  var reqs = args.split('/');
  var res = "ERROR";
  var command = reqs[2];
  switch(command)
  {
    case "Control.Refresh":
      res = "OK";
      hg.Program.Notify("jkutils: SolarAltitude","Update triggered.");
      SolarAltitude.main();
      break;
  }
  return res;
});

// For your convenience:
//   If you should need a way to parse the saved times within you own scripts, you can use the following function.
//   It is able to parse all kind of notations e.g.: '1:00 pm','1:00 p.m.', ...

//   function parseTime(timestring) {
//     var d = new Date();
//     var time = timestring.match(/(\d+)(?::(\d\d))?\s*(p?)/);
//     d.setHours( parseInt(time[1]) + (time[3] ? 12 : 0) );
//     d.setMinutes( parseInt(time[2]) || 0 );

//    return d;
//   }


while (hg.Program.IsEnabled)
{
  SolarAltitude.main();
  // Update every 12 hours
  hg.Pause(12*60*60);

}

</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>501</Address>
    <Name>jkUtils - Solar Altitude</Name>
    <Description>Calculates schedulers for sunrise/sunset with civil, nautical, astronomical timings. 
  Please set your local longitude/latitude in program options.</Description>
    <Group>Weather and Enviroment</Group>
    <Features />
    <ActivationTime>2015-01-24T15:29:22.324048Z</ActivationTime>
    <TriggerTime>2015-01-28T15:43:27.645661Z</TriggerTime>
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>IPHostEntry host;
string localIP = "1";
host = Dns.GetHostEntry(Dns.GetHostName());
foreach (IPAddress ip in host.AddressList)
{
  if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
  {
    localIP = ip.ToString();
    localIP = localIP.Substring(localIP.LastIndexOf(".") + 1);
  }
}
Program.AddOption("ClientId", "hg-" + localIP, "0. Enter unique ID for this client", "text");
Program.AddOption("ServerAddress", "", "1. MQTT server address", "text");
Program.AddOption("ServerPort", "1883", "2. MQTT server port", "text");
Program.AddOption("ServerTopic", "#", "3. Topic", "text");
Program.AddOption("Username", "", "4. Username (optional)", "text");
Program.AddOption("Password", "", "5. Password (optional)", "text");
Program.AddFeature("", "", "MQTT.SensorPublish", "Publish module on MQTT network", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>string server = Program.Option("ServerAddress").Value.Trim();
int port = 1883; int.TryParse(Program.Option("ServerPort").Value, out port);
string topic = Program.Option("ServerTopic").Value.Trim();
string clientid = Program.Option("ClientId").Value.Trim();
string username = Program.Option("Username").Value.Trim();
string password = Program.Option("Password").Value.Trim();

var MqttIsConnected = false;

if (server == "")
{
  Program.Notify("MQTT", "Please configure server address");
  Pause(5);
  return;
}
else
{
  Program.Notify("MQTT", "Connecting to " + server + "...");
  try
  {
    if (username != "")
    {
      MqttClient.WithCredentials(username, password);
    }
    MqttClient
      .Service(server)
      .Connect(port, clientid);
    Program.Notify("MQTT", "Connected!");
    MqttIsConnected = true;
  }
  catch (Exception e)
  {
    Program.Notify("MQTT", e.Message);
    Pause(5);
    return;
  }
}

MqttClient.Subscribe(topic, (mtopic, mpayload) =&gt; {
  var parts = mtopic.Split('/');
  var cid = parts[0];
  //
  if (parts.Length == 4)
  {
    try
    {
      var domain = parts[1];
      var address = parts[2];
      var type = parts[3];

      var module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();

      switch (type)
      {
        case "command":
        if (domain == "MQTT.Listeners" &amp;&amp; address == clientid)
        {
          var cmdobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;dynamic&gt;(mpayload);
          var targetmodule = Modules.InDomain(cmdobj.Domain.ToString()).WithAddress(cmdobj.Address.ToString());
          if (targetmodule.Get().Instance != null)
          {
            string command = cmdobj.Command.ToString();
            switch (command)
            {
              case "Module.Describe":
              var modinstance = targetmodule.Get().Instance;
              MqttClient.Publish(clientid + "/" + modinstance.Domain + "/" + modinstance.Address + "/description", Utility.Module2Json(modinstance, false));
              break;
              default:
              targetmodule.Command(command).Execute();
              break;
            }
          }
        }
        break;
        case "description":
        if (cid != clientid &amp;&amp; module.Instance != null)
        {
          var modobj = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;Module&gt;(mpayload);
          module.Instance.Name = modobj.Name;
          module.Instance.Description = modobj.Description;
          module.Instance.DeviceType = modobj.DeviceType;
          var parentid = module.Parameter("VirtualModule.ParentId").Value;
          module.Instance.Properties = modobj.Properties;
          module.Parameter("VirtualModule.ParentId").Value = parentid;
          module.Parameter("MQTT.SourceNode").Value = cid;
          Program.Notify("MQTT", "Created remote module " + module.Instance.Domain + " " + module.Instance.Address);
        }
        break;
        case "event":
        if (cid != clientid)
        {
          var property = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;ModuleParameter&gt;(mpayload);
          if (module.Instance == null)
          {
            Program.AddVirtualModule("MQTT:" + cid + "." + domain, address, "Sensor", "");
            module = Modules.InDomain("MQTT:" + cid + "." + domain).WithAddress(address).Get();
          }
          else if (!module.HasParameter("MQTT.SourceNode"))
          {
            MqttClient.Publish(clientid + "/MQTT.Listeners/" + cid + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : 'Module.Describe' }");         
          }
          Program.RaiseEvent(module, property.Name, property.Value, "");
        }
        break;
      }
    } catch (Exception e) {
      Program.Notify("MQTT ERROR!", e.Message);
      MqttIsConnected = false;
    }
  }
  //Console.WriteLine("MQTT {0} : {1}", mtopic, mpayload);
});

When.WebServiceCallReceived("MQTT:", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  string domain = reqs[0];
  string address = reqs[1];
  var commands = new List&lt;string&gt;(reqs);
  // remove domain and address to obtain the command parts only
  commands.RemoveAt(0); commands.RemoveAt(0);
  string command = String.Join("/", commands.ToArray());
  try
  {
    int mqttend = domain.IndexOf(".");
    int mqttdel = domain.IndexOf(":");
    var mqttdest  = domain.Substring(mqttdel + 1, mqttend - mqttdel - 1);
    domain = domain.Substring(mqttend + 1);
    MqttClient.Publish(clientid + "/MQTT.Listeners/" + mqttdest + "/command", "{ 'Domain': " + "'" + domain + "', 'Address' : '" + address + "', 'Command' : '" + command + "' }");         
    return "{ 'ResponseValue' : 'OK' }";   
  } catch (Exception e) {
    Program.Notify("MQTT ERROR!", e.Message);
    MqttIsConnected = false;
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

// We want to do further processing whenever a module changes
When.ModuleParameterChanged( (module, property) =&gt; {
  if (module.HasFeature("MQTT.SensorPublish") &amp;&amp; (property.Name.StartsWith("Sensor.") || property.Name.StartsWith("Status.") || property.Name.StartsWith("Meter.")) &amp;&amp; !module.Instance.Domain.StartsWith("MQTT:"))
  {
    try{
      MqttClient.Publish(clientid + "/" + module.Instance.Domain + "/" + module.Instance.Address + "/event", Newtonsoft.Json.JsonConvert.SerializeObject(property));
    } catch  (Exception e){
      Program.Notify("MQTT ERROR!", e.Message);
      MqttIsConnected = false;
    }
  }
  // returning true, will route event to other listeners
  return true;
});

while (Program.IsRunning &amp;&amp; MqttIsConnected) Pause(1);</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>77</Address>
    <Name>MQTT Network</Name>
    <Description>Publish modules over an MQTT network.
This is similar to "events forwarding" programs, used for connecting homegenie servers each other, but it relays on an external MQTT service (http://mosquitto.org/).
To publish a module over the MQTT network, activate "Publish module on MQTT" option on it. 
Other HomeGenie servers will automatically discover the published module once an event is generated from it.
Supports full control/scripting of remote modules, just like a standard local module.</Description>
    <Group>Interconnections</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Setup(()=&gt;{
  Program.AddFeature(
    "HomeAutomation.PhilipsHue",
    "Dimmer",
    "Scenarios.SunriseColors",
    "Link to Sunrise Colors Scenario",
    "checkbox");
  Program.UseWidget("homegenie/generic/program");
});</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin

// Initialize scenario
var colorLights = Modules.WithFeature("Scenarios.SunriseColors")
  .Off()
  .Command("Control.ColorHsb");

// First transition to red, 5 seconds
colorLights.Set("0,1,.8,5");
Pause(5);

// Second transition to orange, 5 seconds
colorLights.Set("0.08,1,.8,5");
Pause(5);

// Last transition to bright white, 10 seconds
colorLights.Set("0.13,0,1,10");
Pause(10);</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>8</Address>
    <Name>Sunrise Colors Scenario</Name>
    <Description>Example scenario for Philips Hue lights.</Description>
    <Group>Scenes</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.PhilipsHue</ForDomains>
        <ForTypes>Dimmer</ForTypes>
        <Property>Scenarios.SunriseColors</Property>
        <Description>Link to Sunrise Colors Scenario</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition />
    <ScriptSource>var pinDta = ConnectorPin.P1Pin07.ToProcessor();
var pinClk = ConnectorPin.P1Pin13.ToProcessor();

var driver = GpioConnectionSettings.DefaultDriver;

driver.Allocate(pinDta, PinDirection.Output);
driver.Allocate(pinClk, PinDirection.Output);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

//init 
driver.Write(pinDta, false);
Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);


for(int i = 0; i &lt; 4; i++)
{
  driver.Write(pinDta, true);
  driver.Write(pinDta, false);
}

var sendData16 = new Func&lt;uint, bool&gt;((data)=&gt;{
  // send 16 bit data
  for(int i=0; i&lt;16; i++)
  {
    bool state = ((data&amp;0x8000) &gt; 0 ? true : false);
    driver.Write(pinDta, state);
    state = driver.Read(pinClk) ? false : true;
    driver.Write(pinClk, state);
    data &lt;&lt;= 1;
  }
  return true;
});

var latchData = new Func&lt;bool&gt;(()=&gt;{
  driver.Write(pinDta, false);
  Raspberry.Timers.HighResolutionTimer.Sleep(0.000001m);
  for(int i=0; i&lt;4; i++)
  {
    driver.Write(pinDta, true);
    driver.Write(pinDta, false);
  }
  return true;
});

uint CMDMODE = 0x0000;


var setLeds = new Func&lt;string, bool&gt;((leds)=&gt;{
  sendData16(CMDMODE);
  uint index_bits = (uint)Convert.ToInt32(leds, 2);
  for (int i=0;i&lt;12;i++)
  {
    uint state = (uint)((index_bits&amp;0x0001) &gt; 0 ? 0x00FF : 0x0000);
    sendData16(state);
    index_bits = index_bits&gt;&gt;1;
  }
  latchData();
  return true;
});

setLeds("1000000000");
//Pause(.1);
setLeds("0100000000");
//Pause(.1);
setLeds("0010000000");
//Pause(.1);
setLeds("0001000000");
//Pause(.1);
setLeds("0000100000");
//Pause(.1);
setLeds("0000010000");
//Pause(.1);
setLeds("0000001000");
//Pause(.1);
setLeds("0000000100");
//Pause(.1);
setLeds("0000000010");
//Pause(.1);
setLeds("0000000001");
//Pause(.1);


Pause(3);


var setLevel = new Func&lt;int, bool&gt;((level)=&gt;{
  sendData16(CMDMODE);
  for(int i=0;i&lt;12;i++)
  {
    uint state1 = (uint)((i&lt; level) ? 0x00FF : 0x0000);
    sendData16(state1);
  }
  latchData();
  return true;
});

for (int z = 0; z &lt; 1000; z++)
{
  setLevel(z % 11);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>60</Address>
    <Name>Grove - Led Bar</Name>
    <Description>Using a Grove Led Bar.
http://www.seeedstudio.com/wiki/Grove_-_LED_Bar</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("LedsNumber", "1", "Number of chained RGB leds", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var rgbModules = Modules.InDomain("HomeAutomation.GroveRGB");

int ledsCount = (int)Program.Option("LedsCount").DecimalValue;

var driver = GpioConnectionSettings.DefaultDriver;
var gpioOut1 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin13.ToProcessor());
var gpioOut2 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin07.ToProcessor());
var groveRgb = new GroveRgbConnection(gpioOut1, gpioOut2, ledsCount);

Program.AddVirtualModules("HomeAutomation.GroveRGB", "Dimmer", "homegenie/generic/colorlight", 1, ledsCount);
for(int x = 0; x &lt; ledsCount; x++)
{
  var module = rgbModules.WithAddress((x+1).ToString()).Get();
  groveRgb.SetColor(x, new RgbColor(0, 0, 0));
  module.Parameter("Status.Level").Value = "0";
  module.Parameter("Status.ColorHsb").Value = "1,1,1";
}

When.ProgramStopping(()=&gt;{
  ((IDisposable)groveRgb).Dispose();
  return true;
});

When.WebServiceCallReceived("HomeAutomation.GroveRGB", ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
    var module = rgbModules.WithAddress(lightnumber).Get();
    int lightId = int.Parse(lightnumber) - 1;
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
      string[] memory = module.Parameter("Status.ColorHsb").Value.Split(',');
      groveRgb.SetColor(lightId, RgbColor.FromHsv(double.Parse(memory[0], System.Globalization.CultureInfo.InvariantCulture),
                                                  double.Parse(memory[1], System.Globalization.CultureInfo.InvariantCulture),
                                                  double.Parse(memory[2], System.Globalization.CultureInfo.InvariantCulture)));
      Program.RaiseEvent(module, "Status.Level", "1", "Groove RGB Led");
      Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
      groveRgb.SetColor(lightId, new RgbColor());
      Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
      break;
      case "Control.Toggle":
      if (module.Parameter("Status.Level").DecimalValue == 0)
      {
        groveRgb.SetColor(lightId, new RgbColor(255, 255, 255));
        Program.RaiseEvent(module, "Status.Level", "1", "Groove RGB Led");
      }
      else
      {
        groveRgb.SetColor(lightId, new RgbColor());
        Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
      }
      break;
      case "Control.Level":
      //bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
      //Program.RaiseEvent(module, "Status.Level", (double.Parse(parameter) / 100D).ToString(), "Hue Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
      string[] values = parameter.Split(',');
      //double transition = 5;
      //if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
      groveRgb.SetColor(lightId, RgbColor.FromHsv(double.Parse(values[0], System.Globalization.CultureInfo.InvariantCulture),
                                                  double.Parse(values[1], System.Globalization.CultureInfo.InvariantCulture),
                                                  double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)));
      Program.RaiseEvent(module, "Status.Level", (double.Parse(values[2], System.Globalization.CultureInfo.InvariantCulture)).ToString(), "Color Light");
      Program.RaiseEvent(module, "Status.ColorHsb", parameter, "Color Light");
      break; 
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 

    Program.Notify("Grove RGB ERROR!", e.Message);

  }
  return "{ 'ResponseValue' : 'ERROR' }";
}); 


Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>62</Address>
    <Name>Grove - Chainable RGB Led</Name>
    <Description>Chainable RGB color leds modules wired to GPIO#4 and GPIO#21/27 (power with 3v3).
http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Add analog channels modules
Program.AddVirtualModule("Components.MCP3008", "CH0", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH1", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH2", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH3", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH4", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH5", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH6", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH7", "Sensor", "homegenie/generic/sensor");

Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterName", "Parameter name to store computed value", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterFactor", "Multiply read raw value by", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterAdjust", "Adjust computed value by", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.StabilizeValue", "Soft stabilize value (yes/no)", "text");

// add program configuration parameters
Program.AddOption("PollFrequency", "10", "Pause between updates (seconds)", "text");

Program.Run();
</ScriptCondition>
    <ScriptSource>const string MCP3008_DOMAIN = "Components.MCP3008";
const decimal voltage = 3.3m;
var valuesHistory = new Queue&lt;decimal&gt;[8];
// Initialize value history queue for Soft Stabilize feature
for (int q = 0; q &lt; 8; q++) valuesHistory[q] = new Queue&lt;decimal&gt;();

// Setup MCP3008 SPI connection
var adcClock = ConnectorPin.P1Pin23.ToProcessor();
var adcMiso = ConnectorPin.P1Pin21.ToProcessor();
var adcMosi = ConnectorPin.P1Pin19.ToProcessor();
var adcCs = ConnectorPin.P1Pin24.ToProcessor();

var driver = GpioConnectionSettings.DefaultDriver;
driver.Allocate(adcClock, PinDirection.Output);
driver.Allocate(adcCs, PinDirection.Output);
driver.Allocate(adcMosi, PinDirection.Output);
driver.Allocate(adcMiso, PinDirection.Input);

var adcConnection = new Mcp3008SpiConnection(
  driver.Out(adcClock),
  driver.Out(adcCs),
  driver.In(adcMiso),
  driver.Out(adcMosi)
);

// Release allocated resource when program is stopping
When.ProgramStopping(()=&gt;{
  try
  {
    ((IDisposable)adcConnection).Dispose();
  } catch (Exception e) { Program.Notify("MCP3008 Error", e.Message); }
  ((IDisposable)driver).Dispose();
  return true;
});

var ReadChannel = new Func&lt;int, AnalogValue&gt;((channel) =&gt; {
  AnalogValue av = null;
  lock (adcConnection)
  {
    av = adcConnection.Read((Mcp3008Channel)(channel));
  }
  return av;
});

// eg: GET /api/Components.MCP3008/CH2/ChannelValue.Get
When.WebServiceCallReceived(MCP3008_DOMAIN, ( args ) =&gt; {
  object response = null;
  var options = ((string)args).Split('/');
  var channel = int.Parse(options[1].Replace("CH", ""));
  var command = options[2];
  if (command == "ChannelValue.Get")
  {
    response = ReadChannel(channel);
  }
  return response;
});

// Main program loop
while (Program.IsEnabled)
{

  double pauseseconds = double.Parse(Program.Option("PollFrequency").Value);
  if (pauseseconds &lt; 1) pauseseconds = 1;

  // read channel voltage values and map/normalize configured parameter names
  for(int x = 0; x &lt; 8; x++)
  {
    var channelPrefix = "CH" + x.ToString();
    var channelModule = Modules.InDomain(MCP3008_DOMAIN).WithAddress(channelPrefix).Get();

    var parameterName = channelModule.Parameter("AnalogInput.ParameterName").Value;
    var parameterFactor = (decimal)channelModule.Parameter("AnalogInput.ParameterFactor").DecimalValue;
    var parameterAdjust = (decimal)channelModule.Parameter("AnalogInput.ParameterAdjust").DecimalValue;

    if (parameterFactor != 0)
    {
      var v = ReadChannel(x).Value;
      valuesHistory[x].Enqueue(v);

      // Software value stabilization
      if (channelModule.Parameter("AnalogInput.StabilizeValue").Value.ToLower().StartsWith("y"))
      {
        decimal avg = 0;
        foreach(decimal sv in valuesHistory[x]) avg += sv;
        v = (decimal)Math.Round(avg / (decimal)valuesHistory[x].Count, 0);
        // prefer smoothed value
        valuesHistory[x].Dequeue();
        valuesHistory[x].Enqueue(v);
      }                	

      if (valuesHistory[x].Count &gt; 5) valuesHistory[x].Dequeue();

      Program.RaiseEvent(channelModule,
                         "Sensor.RawValue",
                         v.ToString(),
                         "Analog Channel");

      if (parameterName != "")
      {
        var adjustedValue = (v * parameterFactor) + parameterAdjust;
        adjustedValue = (Math.Round(adjustedValue * 10m / 5m, 0) * 5m / 10m); // 0.5 resolution
        Program.RaiseEvent(channelModule, 
                           parameterName, 
                           adjustedValue.ToString(), 
                           "Analog Channel");
      }
    }

    Pause(0.05);
  }

  Pause( pauseseconds );
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>38</Address>
    <Name>MCP3008 - Analog Input Modules</Name>
    <Description>MCP3008 8 channels ADC connected to SPI interface. 
Use with Eden Sensor Board http://www.homegenie.it/docs/diy/eden.php
or experiment on a breadboard http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/overview .
Each analog channel can be mapped to a virtual module with configurable field name.
 
</Description>
    <Group>Raspberry Pi</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterName</Property>
        <Description>Parameter name to store computed value</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterFactor</Property>
        <Description>Multiply read raw value by</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>Components.MCP3008</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>AnalogInput.ParameterAdjust</Property>
        <Description>Adjust computed value by</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("ThermostatsCount", "1", "Virtual thermostats modules to create", "text");
Program.AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.TemperatureModule", "Module to read temperature from", "module.text:any:any:sensor.temperature");
Program.AddFeature("HomeAutomation.BasicThermostat", "Thermostat", "VirtualThermostat.SwitchModule", "Module to switch on/off on set point", "module.text:any:switch,light,dimmer,thermostat,shutter:any");
Program.Run();
</ScriptCondition>
    <ScriptSource>const int HOLDING_MODE_DIFF = 1;
const string MODULES_DOMAIN = "HomeAutomation.BasicThermostat";
const string PARAMETER_TEMPERATURE_MODULE = "VirtualThermostat.TemperatureModule";
const string PARAMETER_SWITCH_MODULE = "VirtualThermostat.SwitchModule";
const string EVENT_DESCRIPTION = "Basic Thermostat";

var thermostatsCount = (int)Program.Option("ThermostatsCount").DecimalValue;
if (thermostatsCount &lt;= 0) thermostatsCount = 1;
Program.AddVirtualModules(MODULES_DOMAIN, "Thermostat", "homegenie/generic/thermostat", 1, thermostatsCount);
var thermostatModules = Modules.InDomain(MODULES_DOMAIN).OfDeviceType("Thermostat");

var holdingMode = new bool[thermostatsCount];

var ThermostatLogicRun = new Func&lt;ModuleHelper, bool&gt;((thermostat)=&gt;{

  var temperature = thermostat.Parameter("Sensor.Temperature");
  var operatingState = thermostat.Parameter("Thermostat.OperatingState");
  var thermostatMode = thermostat.Parameter("Thermostat.Mode");
  var heatSetPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
  var index = int.Parse(thermostat.Instance.Address) - 1;
  string domainAddress = "";
  string domain = "";
  string address = "";

  try
  {
    // Get a reference to the temperature module
    domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var temperatureModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || temperatureModule.Instance == null)
    {
      Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid temperature module.");
      return false;
    }
    // Update Thermostat module Temperature field
    temperature.Value = temperatureModule.Parameter("Sensor.Temperature").Value;

    // get a reference to the switch/relay module
    domain = address = "";
    domainAddress = thermostat.Parameter(PARAMETER_SWITCH_MODULE).Value;
    if (domainAddress != "" &amp;&amp; domainAddress.LastIndexOf(":") &gt; 0)
    {
      domain = domainAddress.Substring(0, domainAddress.LastIndexOf(":"));
      address = domainAddress.Substring(domainAddress.LastIndexOf(":") + 1);
    }
    var switchModule = Modules.InDomain(domain).WithAddress(address).Get();
    if (String.IsNullOrWhiteSpace(domain) || String.IsNullOrWhiteSpace(address) || switchModule.Instance == null)
    {
      Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
      Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "Please specify a valid switch module.");
      return false;
    }

    // Heat Mode logic
    if (thermostatMode.Value == "Heat")
    {
      if (temperature.DecimalValue &lt; heatSetPoint.DecimalValue - (holdingMode[index] ? HOLDING_MODE_DIFF : 0))
      {
        if (switchModule.IsOff) holdingMode[index] = false;
        if (operatingState.Value != "Heating")
        {
          Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Heating", EVENT_DESCRIPTION);
        }
        // Heating
        switchModule.On();
      }
      else
      {
        if (switchModule.IsOn) holdingMode[index] = true;
        if (operatingState.Value != "PendingHeat")
        {
          Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "PendingHeat", EVENT_DESCRIPTION);
        }
        // Waiting
        switchModule.Off();
      }
    }
    else
    {
      if (operatingState.Value != "Off" &amp;&amp; operatingState.Value != "Idle")
      {
        Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Idle", EVENT_DESCRIPTION);
        holdingMode[index] = false;
      }
      // Off
      switchModule.Off();
    }  
  } 
  catch (Exception e) 
  {
    Program.Notify("Basic Thermostat " + thermostat.Instance.Address, "ERROR: " + e.Message);
  }

  return true;
});

When.ModuleParameterChanged((module, parameter)=&gt;{
  if (parameter.Is("Sensor.Temperature"))
  {
    thermostatModules.Each((thermostat)=&gt;{
      var domainAddress = thermostat.Parameter(PARAMETER_TEMPERATURE_MODULE).Value;
      if (domainAddress != "" &amp;&amp; domainAddress.IndexOf(":") &gt; 0)
      {
        var domain = domainAddress.Split(':')[0].ToLower();
        var address = domainAddress.Split(':')[1].ToLower();
        if (module.Instance.Domain.ToLower() == domain &amp;&amp; module.Instance.Address.ToLower() == address)
        {
          Program.RaiseEvent(thermostat, "Sensor.Temperature", parameter.Value, EVENT_DESCRIPTION);
          ThermostatLogicRun(thermostat);
        }
      }
      return false;
    });
  }
  return true;
});

// implement Web API calls as defined in the Thermostat widget
When.WebServiceCallReceived(MODULES_DOMAIN, (args)=&gt;{
  var res = "ERROR";
  var cmdArgs = args.ToString().Split('/');
  var address = cmdArgs[1];
  var command = cmdArgs[2];
  var option = cmdArgs[3];
  var thermostat = Modules.InDomain(MODULES_DOMAIN).WithAddress(address).Get();
  var index = int.Parse(thermostat.Instance.Address) - 1;
  switch (command)
  {
    case "Thermostat.SetPointSet":
    // Basic thermostat currently only supports Heating mode
    if (option == "Heating")
    {
      var setPoint = cmdArgs[4];
      Program.RaiseEvent(thermostat, "Thermostat.SetPoint.Heating", setPoint, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
    case "Thermostat.ModeSet":
    // Currently supported modes are Off or Heat
    if (option == "Off" || option == "Heat")
    {
      Program.RaiseEvent(thermostat, "Thermostat.Mode", option, EVENT_DESCRIPTION);
      holdingMode[index] = false;
      ThermostatLogicRun(thermostat);
      res = "OK";
    }
    break;
  }
  return "[{ \"ResponseValue\" : " + res + "}]";
});

while (Program.IsEnabled)
{
  thermostatModules.Each((thermostat)=&gt;{
    ThermostatLogicRun(thermostat);
    return false;
  });
  Pause(120);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>78</Address>
    <Name>Basic Thermostat</Name>
    <Description>Use any temperature sensor and relay switch module to implement Thermostat device logic.
Temperature/Switch modules must be specified in the form &lt;i&gt;&amp;lt;domain&amp;gt:&amp;lt;address&amp;gt;&lt;/i&gt;, eg: HomeAutomation.ZWave:5 .
Basic Thermostats can also be used with the Timetable scheduler widget.</Description>
    <Group>Weather and Enviroment</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("ModulesCount", "3", "Connected sensors number", "text");
Program.AddOption("UpdateInterval", "60", "Update interval", "text");
Program.AddFeature("HomeAutomation.OneWire", "Sensor", "OneWire.DeviceId", "Device ID", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// CSharp Automation Program Plugin
// 1-Wire Sensor Modules
// NOTE: Currently only temperature sensors are supported

// Read sensor data text lines
var readSensorData = new Func&lt;string, List&lt;string&gt;&gt;((sensorId) =&gt; {
  string oneWireSysPath = "/sys/bus/w1/devices/";
  string currentLine = "";
  var lines = new List&lt;string&gt;();
  //lines.Add("7c 01 4b 46 7f ff 04 10 09 : crc=09 YES");
  //lines.Add("7c 01 4b 46 7f ff 04 10 09 t=23750");
  try
  {
    System.IO.StreamReader file = new System.IO.StreamReader(oneWireSysPath + sensorId + "/w1_slave");
    while((currentLine = file.ReadLine()) != null)
    {
      lines.Add(currentLine);
    }
    file.Close();
  } catch (Exception ex) {
    Program.Notify("OneWire Error", ex.Message);
  }
  return lines;
});

// Parse data from a 1-wire temperature sensors (DS18B20).
// It returns decimal value indicating temperature in celsius degree.
var parseTemperatureData = new Func&lt;List&lt;string&gt;, double&gt;((dataLines) =&gt; {
  double temperature = 0;
  foreach(string l in dataLines)
  {
    if (l.IndexOf(" t=") &gt; 0)
    {
      var ts = l.Substring(l.LastIndexOf(" t=") + 3);
      temperature = double.Parse(ts) / 1000D;
    }
  }
  return temperature;
});

//  Add virtual modules for 1-wire domain
int sensorCount = (int)(Program.Option("ModulesCount").DecimalValue);
Program.AddVirtualModules("HomeAutomation.OneWire", "Sensor", "homegenie/generic/sensor", 1, sensorCount);

while (Program.IsEnabled)
{
  for(int n = 1; n &lt;= sensorCount; n++)
  {
    // Get a reference to the virtual module associated with current sensor
    var module = Modules.InDomain("HomeAutomation.OneWire").WithAddress(n.ToString()).Get();
    var deviceId = module.Parameter("OneWire.DeviceId").Value;
    // If a sensor id has been specified for the module, then we read and update temperature values
    if (deviceId != "")
    {
      var data = readSensorData(deviceId);
      if (data.Count &gt; 0 &amp;&amp; data[0].Contains(" crc=") &amp;&amp; data[0].Contains(" NO")) continue;
      var temperatureCelsius = parseTemperatureData(data);
      // Update virtual module data
      Program.RaiseEvent(module, "Sensor.TemperatureF", (temperatureCelsius * 9d / 5d + 32d).ToString(), "1-Wire Device");
      Pause(1);
      Program.RaiseEvent(module, "Sensor.Temperature", temperatureCelsius.ToString(), "1-Wire Device");
    }
  }

  double updateInterval = Program.Option("UpdateInterval").DecimalValue;
  if (updateInterval &lt; 1) updateInterval = 1;
  Pause(updateInterval);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>133</Address>
    <Name>One-Wire Devices</Name>
    <Description>Integrates 1-wire devices as HG modules (linux only).
To enable a 1-wire device, its ID must be specified in the module options popup.
To find out your connected devices ID, issue from a terminal the command:
&amp;nbsp;&amp;nbsp;&lt;i&gt;ls -la /sys/bus/w1/devices/&lt;/i&gt;</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.OneWire</ForDomains>
        <ForTypes>Sensor</ForTypes>
        <Property>OneWire.DeviceId</Property>
        <Description>Device ID</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// set the widget that will display this program data (temperature,humidity).
Program.UseWidget("homegenie/generic/sensor");
Program.AddOption("UpdateInterval", "600", "Update Interval (seconds)", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>var measurePin = ConnectorPin.P1Pin7; // GPIO#4
var driver = GpioConnectionSettings.GetBestDriver(GpioConnectionDriverCapabilities.CanChangePinDirectionRapidly);

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// it makes program to respond to webservices calls:
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Temperature
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Temperature", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Temperature").Value + "' }";
});
// - http://&lt;hg_address&gt;/api/Components.DHT22/0/Sensor.Humidity
When.WebServiceCallReceived("Components.DHT22/0/Sensor.Humidity", ( args ) =&gt; {
  return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Humidity").Value + "' }";
});

while (Program.IsEnabled)
{
  using (var pin = driver.InOut(measurePin))
    using (var dhtConnection = new Dht22Connection(pin))
  {
    var data = dhtConnection.GetData();
    if (data != null)
    {
      // data read succesfully
      Program.RaiseEvent("Sensor.Humidity", data.RelativeHumidity.Percent.ToString(CultureInfo.InvariantCulture), "DHT-22 Sensor");
      Program.RaiseEvent("Sensor.Temperature", data.Temperature.DegreesCelsius.ToString(CultureInfo.InvariantCulture), "DHT-22 Sensor");
      break;
    }
  }

  var pause = Program.Option("UpdateInterval").DecimalValue;
  if (pause == 0) pause = 600; // default pause is 10 minutes
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>63</Address>
    <Name>DHT-22 Sensor</Name>
    <Description>Temperature and Humidity sensing using DHT-22 with data pin on GPIO#4. 
Edit program code line #1 to change the data pin GPIO.
</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions>
      <ProgramCondition>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>37</Target>
        <Property>Sensor.DoorWindow</Property>
        <ComparisonOperator>Equals</ComparisonOperator>
        <ComparisonValue>255</ComparisonValue>
      </ProgramCondition>
    </Conditions>
    <Commands>
      <ProgramCommand>
        <Domain>HomeAutomation.ZWave</Domain>
        <Target>4</Target>
        <CommandString>Control.Off</CommandString>
        <CommandArguments />
      </ProgramCommand>
    </Commands>
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>var moduleDomain = "Components.MCP23017";

// This examples will add 32 modules of type "Sensor"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var pinConfigurationA = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    //
    new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};

var pinConfigurationB = new List&lt;dynamic&gt;(){
  new { Address =  "17", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "18", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "19", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "20", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "21", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "22", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "23", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "24", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    //
    new { Address =  "25", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "26", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "27", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "28", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "29", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "30", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "31", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "32", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};


bool[] pinStatusA = new bool[16]; 
bool[] pinStatusB = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnectionA = new Mcp23017I2cConnection(driver.Connect(0x20));
Pause(0.5);
var deviceConnectionB = new Mcp23017I2cConnection(driver.Connect(0x21));

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  string returnValue =  "{ 'ResponseValue' : 'OK' }";
  var errormessage = "";
  try
  {
    string pinid = reqs[1];
    string command = reqs[2];
    //
    var module = Modules.InDomain(moduleDomain).WithAddress(pinid).Get();
    // modules with id from 1 to 8 are mapped as A0-A7
    // modules with id from 9 to 16 are mapped as B0-B7
    // modules with id from 17 to 24 are mapped as A0-A7
    // modules with id from 25 to 32 are mapped as B0-B7
    var pinname = "";
    var i = int.Parse(pinid); 
    if (i &gt;=1 &amp;&amp; i &lt;= 8) 
    {
      pinname = "A" + (i - 1).ToString();
    }
    else if  (i &gt;=9 &amp;&amp; i &lt;= 16) 
    {
      pinname = "B" + (i - 9).ToString();
    }      
    else if (i &gt;= 17 &amp;&amp; i &lt;= 24)
    {
      pinname = "A" + (i - 17).ToString();
    }
    else if (i &gt;= 25 &amp;&amp; i &lt;= 32)
    {
      pinname = "B" + (i - 25).ToString();
    }
    //
    var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);

    if (i &lt;= 16)
    {  
      switch(command)
      {
        // eg. http://hg_address/api/Components.MCP23017/1/Control.On
        case "Control.On":
        deviceConnectionA.SetPinStatus(mcppin, true);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/3/Control.Off
        case "Control.Off":
        deviceConnectionA.SetPinStatus(mcppin, false);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
        case "Control.Toggle":
        deviceConnectionA.Toogle(mcppin);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
        case "Get.Status":
        returnValue = "{ 'ResponseValue' : '" + (deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1") + "' }";
        break;
      }


    } 
    else
    {
      switch(command)
      {
        // eg. http://hg_address/api/Components.MCP23017/1/Control.On
        case "Control.On":
        deviceConnectionB.SetPinStatus(mcppin, true);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/3/Control.Off
        case "Control.Off":
        deviceConnectionB.SetPinStatus(mcppin, false);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
        case "Control.Toggle":
        deviceConnectionB.Toogle(mcppin);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
        case "Get.Status":
        returnValue = "{ 'ResponseValue' : '" + (deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1") + "' }";
        break;
      }


    }


    return returnValue;  
  } 
  catch (Exception ex) 
  { 
    errormessage = ex.Message + " " + ex.StackTrace;
  }
  // unable to process request
  return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});



// Initialize MCP23017 A pins
for (int p = 0; p &lt; pinConfigurationA.Count; p++)
{
  var pincfg = pinConfigurationA[p];
  // set direction and read pin status
  deviceConnectionA.SetDirection(pincfg.Pin, pincfg.Direction);
  pinStatusA[p] = deviceConnectionA.GetPinStatus(pincfg.Pin);
  // associate a virtual module with the pin
  if (pincfg.Direction == Mcp23017PinDirection.Output)
  {
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
  }
  else // Input 
  {
    if (pincfg.PullUpResistor)
    {
      deviceConnectionA.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
    }
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  // get the module associated to the pin and store current status
  var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  module.Parameter("Status.Level").Value = (pinStatusA[p] ? "0" : "1");
}

// Initialize MCP23017 B pins
for (int p = 0; p &lt; pinConfigurationB.Count; p++)
{
  var pincfg = pinConfigurationB[p];
  // set direction and read pin status
  deviceConnectionB.SetDirection(pincfg.Pin, pincfg.Direction);
  pinStatusB[p] = deviceConnectionB.GetPinStatus(pincfg.Pin);
  // associate a virtual module with the pin
  if (pincfg.Direction == Mcp23017PinDirection.Output)
  {
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
  }
  else // Input 
  {
    if (pincfg.PullUpResistor)
    {
      deviceConnectionB.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
    }
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  // get the module associated to the pin and store current status
  var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  module.Parameter("Status.Level").Value = (pinStatusB[p] ? "0" : "1");
}

// status polling loop
while (Program.IsEnabled)
{

  Pause(0.1); // 100 ms poll resolution
  //
  for (int p = 0; p &lt; pinConfigurationA.Count; p++)
  {
    var pincfg = pinConfigurationA[p];
    if (pincfg.Direction == Mcp23017PinDirection.Input)
    {
      bool status = deviceConnectionA.GetPinStatus(pincfg.Pin);
      // check if the pin status changed
      if (pinStatusA[p] != status)
      {
        // get the module associated to the pin
        var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
        // raise the event and update the current pin status
        Program.RaiseEvent(module, "Status.Level",  status ? "0" : "1", "MCP23017 A " + pincfg.Pin.ToString());
        pinStatusA[p] = status;
        Pause(0.1);
      }
    }
  }
  //
  for (int p = 0; p &lt; pinConfigurationB.Count; p++)
  {
    var pincfg = pinConfigurationB[p];
    if (pincfg.Direction == Mcp23017PinDirection.Input)
    {
      bool status = deviceConnectionB.GetPinStatus(pincfg.Pin);
      // check if the pin status changed
      if (pinStatusB[p] != status)
      {
        // get the module associated to the pin
        var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
        // raise the event and update the current pin status
        Program.RaiseEvent(module, "Status.Level", status ? "0" : "1", "MCP23017 B " + pincfg.Pin.ToString());
        pinStatusB[p] = status;
        Pause(0.1);
      }
    }
  }

}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>79</Address>
    <Name>SmartIC - MCP23017</Name>
    <Description>Using 2 MCP23017 I/O expanders connected to 0x20 and 0x21 I2C bus. 
Contributed by Christophe De Boeck.
Based on HomeGenie MCP23017 example app.</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "120", "Poll Interval (seconds)", "text");
//Program.AddFeature("HomeAutomation.ZWave", "Thermostat", "HomeGenie.ZWaveLevelPoll", "Poll module level", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.InDomain("HomeAutomation.ZWave").OfDeviceType("Thermostat").Each((module) =&gt; {
    Program.Notify("Z-Wave Thermostat Poll", "Polling thermostat " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("SensorMultiLevel.Get").Execute();
    Pause(Program.Option("PollInterval").DecimalValue);
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var pause = Program.Option("PollInterval").DecimalValue;
  if (pause &lt; 15)
  {
    pause = 15;
    Program.Notify("Z-Wave Thermostat Poll", "Poll interval seconds must be &gt;= 15!");
  }
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>92</Address>
    <Name>Z-Wave Thermostat Poll</Name>
    <Description />
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.UseWidget("homegenie/generic/colorlight");

Program.AddVirtualModules("HomeAutomation.MiLightRGBW", "Light", "homegenie/generic/colorlight", 0, 4);
//Program.AddVirtualModules("HomeAutomation.MiLightWhite", "Light", "homegenie/generic/light", 0, 4);

Program.AddOption("HomeGenieMiLightAddress", "192.168.0.?", "MiLight IP Address", "text");
Program.AddOption("HomeGenieMiLightPort","8899", "MiLight UDP Port", "text");

Program.AddFeature("HomeAutomation.MiLightRGBW", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on", "checkbox");
//Program.AddFeature("HomeAutomation.MiLightWhite", "Dimmer,Light", "MiLight.LevelFix", "Set level to 100% when switched on", "checkbox");

Program.Run();
</ScriptCondition>
    <ScriptSource>#pragma warning disable 0168
  #pragma warning disable 0219
  #pragma warning disable 0414

  //   Script created by Smeghead based on and thanks to
  //      Version 0.1   30/11/2014
  // https://github.com/yasharrashedi/LimitlessLED
  // https://github.com/yasharrashedi/LimitlessLED/blob/master/Milight.php
  //  I used these entensivelly when creating this script
  //    At the moment, only RBGW lights are supported and not the White only LED lights


  var MILIGHT_IP_ADDR = "HomeGenieMiLightAddress";
var MILIGHT_PORT    = "HomeGenieMiLightPort";

Func&lt;byte, byte, bool&gt; sendCommand = (byte code, byte param) =&gt; 
{
  byte[] buffer = new byte[] { code, param, 0x55 };
  UdpClient.SendMessage(buffer); 
  return true;
};

Func&lt;int, bool&gt; sendRGBWOnCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x42, 0x45, 0x47, 0x49, 0x4B};
  Program.Notify("MiLight On", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is On");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWOffCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{0x41, 0x46, 0x48, 0x4A, 0x4C};
  Program.Notify("MiLight Off", zone.ToString());
  //Console.WriteLine("MiLight ************************ Zone " + zone + " Is Off");
  return sendCommand(codes[zone], (byte) 0x00);
};

Func&lt;int, bool&gt; sendRGBWWhiteCommand = (int zone) =&gt; 
{
  byte[] codes = new byte[]{(byte) 0xC2, (byte) 0xC5, (byte) 0xC7, (byte) 0xC9, (byte) 0xCB};
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand(codes[zone], (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWColorCommand = (int zone, int color) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x40, (byte) color);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x4D, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoDecCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x43, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, bool&gt; sendRGBWDiscoIncCommand = (int zone) =&gt; 
{
  bool result1 = sendRGBWOnCommand(zone);
  Pause(0.11);
  bool result2 = sendCommand((byte) 0x44, (byte) 0x00);
  return (result1 &amp;&amp; result2);
};

Func&lt;int, int, bool&gt; sendRGBWBrightnessCommand = (int zone, int brightness) =&gt; 
{
  if ( brightness &gt;= 0 &amp;&amp; brightness &lt;= 100 ) {
    int[] codes = new int[]{0x02, 0x03, 0x04, 0x05, 0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E,
                            0x0F, 0x10, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
    bool result1 = sendRGBWOnCommand(zone);
    Pause(0.11);
    int val = Math.Max(0, Math.Min(19, brightness / 5));
    bool result2 = sendCommand((byte) 0x4E, (byte) codes[val]);
    return (result1 &amp;&amp; result2);
  }
  return false;
};

Func &lt;int[], int&gt; hslToMilightColor = (int[] hsl) =&gt;                
{
  int color = (256 + 176 - (int)(hsl[0] / 360.0 * 255.0)) % 256;
  return color &amp; 0xfa;
};

Func &lt;string, int&gt; hexdec = (string h) =&gt;                
{
  h = h.Replace("x", string.Empty);
  long result = 0;
  long.TryParse(h, System.Globalization.NumberStyles.HexNumber, null, out result);
  return (int)result;
};

Func &lt;string, int[]&gt; rgbHexToIntArray = (string hexColor) =&gt; 
{
  hexColor = hexColor.Replace("#", string.Empty);
  if ( hexColor.StartsWith("0x") ) {
    hexColor = hexColor.Substring(2);
  }
  int hexColorLenghth = hexColor.Length;
  if (hexColorLenghth != 8 &amp;&amp; hexColorLenghth != 6) {
    return new int[] {0,0,0};
  }
  int r,g,b;
  if (hexColorLenghth == 8) {
    r = hexdec(hexColor.Substring(2, 2));
    g = hexdec(hexColor.Substring(4, 2));
    b = hexdec(hexColor.Substring(6, 2));
    if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
      return new int[] {0,0,0};
    }
    return new int[]{r, g, b};
  }
  r = hexdec(hexColor.Substring(0, 2));
  g = hexdec(hexColor.Substring(2, 2));
  b = hexdec(hexColor.Substring(4, 2));
  if ((r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) || (r == 255 &amp;&amp; g == 255 &amp;&amp; b == 255)) {
    return new int[] {0,0,0};
  }
  return new int[]{r, g, b};
};

Func &lt;int, int, int, int[]&gt; rgbToHsl = (int r, int g, int b) =&gt;                
{
  r = r / 255;
  g = g / 255;
  b = b / 255;
  int max = Math.Max(r, Math.Max(g, b));
  int min = Math.Min(r, Math.Min(g, b));
  int l = (max + min) / 2;
  int d = max - min;
  int h = 0;
  int s = 0;
  if (d == 0) {
    h = s = 0;
  }
  else {
    s = d / (1 - Math.Abs(2 * l - 1));
    if ( max == r ) {
      h = 60 * (((g - b) / d) % 6);
      if (b &gt; g) {
        h += 360;
      }         
    }
    else if (max == g) {
      h = 60 * ((b - r) / d + 2);
    }
    else {
      h = 60 * ((r - g) / d + 4);
    }
  }
  return new int[] {h, s, l};
};

Func &lt;int, int[], bool&gt; sendRGBWSetColorHsv = (int zone, int[] hsvColor) =&gt; 
{
  int milightColor = hslToMilightColor(hsvColor);
  int brightness = (hsvColor[2] * 100) / 250;
  //Console.WriteLine("       MiLight Color " + milightColor + "    brightness " + brightness);
  Pause(0.11);
  sendRGBWBrightnessCommand (zone,  brightness);
  Pause(0.11);
  return sendRGBWColorCommand (zone, milightColor); //$this-&gt;sendCommand(array(0x40, $milightColor));
};

Func &lt;int, string, bool&gt; sendRGBWSetColorHexString = (int zone, string color) =&gt; 
  //public function rgbwSetColorHexString($color)
{
  int[] rgb = rgbHexToIntArray(color);
  int[] hsl = rgbToHsl(rgb[0], rgb[1], rgb[2]);
  int milightColor = hslToMilightColor(hsl);
  return sendRGBWColorCommand (zone, milightColor);
};

var milightModules = Modules.InDomain("HomeAutomation.MiLightRGBW");
When.WebServiceCallReceived("HomeAutomation.MiLight", ( args ) =&gt; {
  //Console.WriteLine("MiLight ************************ WebServiceCallReceived");
  string[] reqs = ((string)args).Split('/');
  //string domain = reqs[0];
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    string parameter = ""; 
    if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
    var module = milightModules.WithAddress(lightnumber).Get();

    //Console.WriteLine("module name " + module.Instance.Name);
    //

    //Console.WriteLine("MiLight ************************ Command "+ command);
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.On
      case "Control.On":
      sendRGBWOnCommand(Convert.ToInt32(lightnumber));
      Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.Off
      case "Control.Off":
      sendRGBWOffCommand(Convert.ToInt32(lightnumber));
      Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
      break;
      case "Control.Toggle":
      if (module.Parameter("Status.Level").DecimalValue == 0)
      {
        sendRGBWOnCommand(Convert.ToInt32(lightnumber));
        Program.RaiseEvent(module, "Status.Level", "1", "MiLight Light");
      }
      else
      {
        sendRGBWOffCommand(Convert.ToInt32(lightnumber));
        Program.RaiseEvent(module, "Status.Level", "0", "MiLight Light");
      }
      break;
      case "Control.Level":
      int brightness = (int)(double.Parse(parameter));
      sendRGBWBrightnessCommand (Convert.ToInt32(lightnumber),  brightness);
      //bridgeapicall(lightnumber, "{ \"bri\" : " + ((int)(double.Parse(parameter) * 2.5)).ToString() + " }");
      //Console.WriteLine("MiLight ************************ brightness "+ brightness);
      Program.RaiseEvent(module, "Status.Level", brightness.ToString(), "MiLight Light");
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
      string[] values = parameter.Split(',');
      double transition = 5;
      //if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 10)); 
      int[] hsbColor = new int[] { (int)(double.Parse(values[0]) * 255), (int)(double.Parse(values[1]) * 255), (int)(double.Parse(values[2]) * 255) };
      //Console.WriteLine("       Color HSB " + hsbColor[0] + " : " + hsbColor[1] + " : " + hsbColor[2] );
      sendRGBWSetColorHsv(Convert.ToInt32(lightnumber), hsbColor);
      double levelHsb = hsbColor[2] / 250.0;
      Program.RaiseEvent(module, "Status.Level", levelHsb.ToString(), "MiLight Light");
      Program.RaiseEvent(module, "Status.ColorHsb", parameter, "MiLight Light");
      break; 
    }
    //
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 
    Program.Notify("MiLight ERROR!", e.Message);
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

while (Program.IsEnabled)
{
  string addr = Program.Option(MILIGHT_IP_ADDR).Value;
  string port = Program.Option(MILIGHT_PORT).Value; 

  if (!UdpClient.IsConnected) 
  {
    if (!String.IsNullOrWhiteSpace(addr) &amp;&amp; !addr.EndsWith("?") &amp;&amp; !String.IsNullOrWhiteSpace(port))
    {
      UdpClient.Sender(addr, Convert.ToInt32(port));
    }
    else
    {
      Program.Notify("MiLight", "Please configure a valid address and port.");
    }
  } 
  Pause(5);
}


</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>28</Address>
    <Name>MiLight Control</Name>
    <Description>MiLight and EasyBulb Lights</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.MiLightRGBW</ForDomains>
        <ForTypes>Dimmer,Light</ForTypes>
        <Property>MiLight.LevelFix</Property>
        <Description>Set level to 100% when switched on</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddVirtualModule("Components.Ssd1306", "0", "Sensor", "");
Program.Run();
</ScriptCondition>
    <ScriptSource>#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

const byte SSD1306_I2C_ADDRESS = 0x3C;
//const int displayWidth = 128;  
//const int displayHeight = 64;

int currentX = 0, currentY = 0;


var sdaPin = ConnectorPin.P1Pin03;
var sclPin = ConnectorPin.P1Pin05;
var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor());
var ssd1306 = new Ssd1306Connection(driver.Connect(SSD1306_I2C_ADDRESS));

// Release allocated resource when program is stopping
When.ProgramStopping(()=&gt;{
  try
  {
    ((IDisposable)driver).Dispose();
  } catch (Exception e) { Program.Notify("SSD 1306 Error", e.Message); }
  return true;
});

var fontFixed = new Fixed1L();
var font2L = new Proportional2L();
var font3L = new Proportional3L();

// HomeGenie Logo
var logo = new byte[]{
  0xC0, 0xF0, 0xF8, 0x1C, 0x0C, 0x06, 0xF6, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xC0, 0xFE,
  0xFF, 0xFF, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00,
  0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0x7E, 0x1E, 0x0E, 0x07, 0x03, 0x03, 0x03, 0x23, 0x7E, 0x3E,
  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x9E,
  0xBE, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x03, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x06, 0x06, 0x86, 0xFE, 0xFF, 0xFF,
  0xFF, 0x0F, 0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0x7F, 0x07, 0x03, 0x01, 0x99, 0xFF, 0xFF, 0x10, 0x10,
  0xD8, 0xFE, 0xFF, 0xFF, 0x7F, 0x0F, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x06, 0x03, 0xFF,
  0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFF, 0xDF, 0xC7, 0x41, 0x71, 0x3F, 0x1F,
  0x00, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF8, 0xFC, 0xFC, 0x3C,
  0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x71, 0x3F, 0x0F, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0x3F, 0x07, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF,
  0x1F, 0x00, 0x00, 0xC0, 0xF8, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x39, 0x1F, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3C, 0x3F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F,
  0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x1C, 0x0F, 0x07, 0x01, 0x00, 0x38,
  0x3F, 0x3F, 0x3F, 0x0F, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x0E, 0x3F,
  0x3F, 0x3F, 0x39, 0x38, 0x18, 0x0E, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x18, 0x04, 0x00,
  0x00, 0x00, 0x01, 0xE1, 0xF3, 0x73, 0x77, 0x77, 0x67, 0x03, 0xF3, 0xFF, 0xFF, 0x7F, 0x07, 0x00,
  0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x30, 0x38, 0x18, 0x08, 0x04, 0x3E, 0x3F, 0x3F, 0x3F,
  0x07, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x1C, 0x0F, 0x3F, 0x3F, 0x3F, 0x3F,
  0x38, 0x18, 0x0C, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x38, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x07, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

var drawLogo = new Func&lt;bool&gt;(()=&gt;{
  var data2 = new byte[512+1];
  data2[0] = 0x40;
  Array.Copy(logo, 0, data2, 1, 512);
  ssd1306.DrawImage(data2);
  return true;
});

ssd1306.ClearScreen();
//ssd1306.InvertDisplay();
ssd1306.NormalDisplay();
ssd1306.GotoXY(0, 0);
drawLogo();
ssd1306.GotoXY(0, 4);
ssd1306.DrawText(fontFixed, "Ssd 1306  Driver");
ssd1306.On();

// handles web service calls
When.WebServiceCallReceived("Components.Ssd1306", (args)=&gt;{
  var response = "{ 'ResponseValue' : 'OK' }";
  var cmdParts = args.ToString().Split('/');
  if (cmdParts.Length &lt; 3) return false;
  //
  var nodeId = cmdParts[1];
  var command = cmdParts[2];
  var argument = ""; if (cmdParts.Length &gt; 3) argument = cmdParts[3];
  //
  if (nodeId == "0") // control the OLED display
  {
    switch(command)
    {
      case "Oled.DisplayClear":
      	ssd1306.ClearScreen();
      	break;
      case "Oled.DisplayInvert":
      	ssd1306.InvertDisplay();
      	break;
      case "Oled.DisplayNormal":
      	ssd1306.NormalDisplay();
      	break;
      case "Oled.DisplayOn":
      	ssd1306.On();
      	break;
      case "Oled.DisplayOff":
      	ssd1306.Off();
      	break;
      case "Oled.GoTo":
      	if (cmdParts.Length &lt;= 4) 
        {
          response = "{ 'ResponseValue' : 'INVALID ARGUMENTS' }";
          break;
        }
        int x = currentX = int.Parse(cmdParts[3]);
      	int y = currentY = int.Parse(cmdParts[4]);
      	ssd1306.GotoXY(x, y);
      	break;
      case "Oled.ShowLogo":
      	drawLogo();
      	break;
      case "Oled.DrawText":
      case "Oled.DrawText2":
      case "Oled.DrawText3":
        var align="";
        if (cmdParts.Length &gt; 4)
        {
          // align argument is the 5th parameter
          align = cmdParts[4].ToUpper();
        }
        var text = argument.Replace("%20", " ");
        switch (align)
        {
          case "LEFT":
          text = text.PadRight(16, ' ');
          break;
          case "RIGHT":
          text = text.PadLeft(16, ' ');
          break;
          case "CENTER":
          int spaces = 16 - text.Length; if (spaces &lt; 0) spaces = 0;
          int padLeft = (spaces / 2) + text.Length;
          text = text.PadLeft(padLeft).PadRight(16);          
          break;
        }
      	if (command.EndsWith("2"))
        {
	      	ssd1306.DrawText(font2L, text);
        }
      	else if (command.EndsWith("3"))
        {
	      	ssd1306.DrawText(font3L, text);
        }
      	else
        {
	      	ssd1306.DrawText(fontFixed, text);
        }
      	break;
    }
  }
  return response;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>64</Address>
    <Name>SSD1306 OLED display (128x64)</Name>
    <Description>Display driver for I2C Ssd 1306 Oled display.</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>hg.Program.Run();
</ScriptCondition>
    <ScriptSource>var oled = hg.Modules.InDomain("Components.Ssd1306").WithAddress("0");
var temperature = hg.Modules.InDomain("Components.MCP3008").WithAddress("CH0").Get().Parameter("Sensor.Temperature");
var luminance = hg.Modules.InDomain("Components.MCP3008").WithAddress("CH1").Get().Parameter("Sensor.Luminance");
var energyMonitor = hg.Modules.InDomain("HomeAutomation.EnergyMonitor").WithAddress("1").Get();
var energyLoad = energyMonitor.Parameter("EnergyMonitor.WattLoad");
var operatingLights = energyMonitor.Parameter("EnergyMonitor.OperatingLights");
var operatingSwitches = energyMonitor.Parameter("EnergyMonitor.OperatingSwitches");
var weather = hg.Program.WithName("Weather Underground");

var monthNames = new Array("JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC");
var dayNames = new Array("SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT");

oled.Command("Oled.DisplayClear").Execute();

while (hg.Program.IsEnabled)
{
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Eden TMP36 sensor
    oled.Command("Oled.GoTo").Execute("42/0");
    oled.Command("Oled.DrawText3").Execute("|" + (Math.round(temperature.DecimalValue * 10) / 10) + "\\");

    // Eden photo cell light sensor
    var lux = luminance.DecimalValue.toFixed(0);
    while (lux.length &lt; 4) lux = " " + lux;
    oled.Command("Oled.GoTo").Execute("0/0");
    oled.Command("Oled.DrawText2").Execute(lux);
    oled.Command("Oled.GoTo").Execute("0/2");
    oled.Command("Oled.DrawText").Execute("*LUX");

    // Current date time
    var today = new Date();
    var time = formatTime(today);
    var displayDate = dayNames[today.getDay()] + ',' + monthNames[today.getMonth()] + ' ' + today.getDate(); 
    oled.Command("Oled.GoTo").Execute("0/4");
    oled.Command("Oled.DrawText2").Execute(displayDate + "/CENTER");
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute(time.Time + ' ' + time.AmPm + "/CENTER");
    hg.Pause(5);
  }
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Weather Underground data  
    var weatherText = weather.Parameter("Conditions.City").Value + " " + weather.Parameter("Conditions.TemperatureC").Value;
    if (weatherText.trim() != '')
    {
      oled.Command("Oled.GoTo").Execute("0/4");
      oled.Command("Oled.DrawText2").Execute(weatherText + "/CENTER");
      oled.Command("Oled.GoTo").Execute("0/6");
      oled.Command("Oled.DrawText2").Execute(weather.Parameter("Conditions.Description").Value + "/CENTER");
      hg.Pause(5);
    }
  }
  if (hg.Settings.Parameter('EdenDisplay.MenuMode').Value != 'ON')
  {
    // Energy monitor Watt load
    oled.Command("Oled.GoTo").Execute("0/4");
    oled.Command("Oled.DrawText2").Execute("Energy Use/CENTER");
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute('/CENTER');
    oled.Command("Oled.GoTo").Execute("0/6");
    oled.Command("Oled.DrawText2").Execute('#' + operatingLights.Value + ' |' + operatingSwitches.Value + ' ^' + (Math.round(energyLoad.DecimalValue * 10) / 10));
  }  
  hg.Pause(5);
}

function formatTime(date) {
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var ampm = hours &gt;= 12 ? 'PM' : 'AM';
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  minutes = minutes &lt; 10 ? '0'+minutes : minutes;
  var strTime = hours + ':' + minutes;
  return { 'Time' : strTime, 'AmPm' : ampm};
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>65</Address>
    <Name>Eden Oled Display</Name>
    <Description>Push Eden Board data to Ssd 1306 Oled Display connected to Raspberry Pi I2C port.
(Ssd 1306 display program must be also enabled)</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>hg.Program.AddOption("EdenDisplay.Thermostat", "", "Thermostat name", "text");
hg.Program.AddOption("EdenDisplay.ButtonProgram.1", "", "Button #1 program", "text");
hg.Program.AddOption("EdenDisplay.ButtonProgram.2", "", "Button #2 program", "text");
hg.Program.AddOption("EdenDisplay.ButtonProgram.3", "", "Button #3 program", "text");
hg.Program.AddOption("EdenDisplay.ButtonProgram.4", "", "Button #4 program", "text");
hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.1", "Toggle by button #1", "checkbox");
hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.2", "Toggle by button #2", "checkbox");
hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.3", "Toggle by button #3", "checkbox");
hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton.4", "Toggle by button #4", "checkbox");
hg.Program.Run();
</ScriptCondition>
    <ScriptSource>// Get a reference to the OLED object
var oled = hg.Modules.InDomain("Components.Ssd1306").WithAddress("0");

// Get a reference to other programs of which data will be displayed on the OLED screen
var thermostatName = hg.Program.Option("EdenDisplay.Thermostat").Value;
var thermostat = hg.Modules.WithName(thermostatName).Get();
var setPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
var securitySystem = hg.Modules.WithName("Security Alarm System").Get();
var securityArmed = securitySystem.Parameter("HomeGenie.SecurityArmed");

// Global state variables
var currentContext = '';
var displayMode = 'normal';
var lastButton = '';
var startPressTs = new Date().getTime();
// This system wide parameter is used to prevent other apps
// from writing on the OLED screen  when the menu is open
hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';

// Menu screens

function menuShowMain()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("----[ MENU ]----");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("1 Set Point/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText").Execute("2 Security/LEFT");
  oled.Command("Oled.GoTo").Execute("0/6");
  oled.Command("Oled.DrawText").Execute("3 Invert Display/LEFT");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("4 Exit/LEFT");
}

function menuShowSetPoint()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Set Point:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute(setPoint.Value + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("2 + 3 -   EXIT 4/CENTER");  
}

function menuShowSecurity()
{
  var level = securitySystem.Parameter("Status.Level");
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Security:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute((securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0 ? "ARMED" : "DISARMED") + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  if (securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0)
  {
    oled.Command("Oled.DrawText").Execute("2 DISARM  EXIT 4/CENTER");
  }
  else
  {
    oled.Command("Oled.DrawText").Execute("2 ARM     EXIT 4/CENTER");
  }
}

// Context switch functions

function setContext(ctx)
{
  currentContext = ctx;
  hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'ON';
  switch(ctx)
  {
    case 'main':
      menuShowMain();
      break;
    case 'setpoint':
      menuShowSetPoint();
      break;
    case 'security':
      menuShowSecurity();
      break;
    case 'energysaving':
      menuShowEnergySaving();
      break;
    case 'exit':
      oled.Command("Oled.GoTo").Execute("0/3");
      oled.Command("Oled.DrawText").Execute("/CENTER");
      oled.Command("Oled.GoTo").Execute("0/4");
      oled.Command("Oled.ShowLogo").Execute();
      hg.Pause(2);
      hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';
      break;
  }
}

function setContextInput(input)
{
  switch (input)
  {
    case '1': // BUTTON #1
      switch (currentContext)
      {
        case 'main':
          setContext('setpoint');
          break;
      }
      break;
    case '2': // BUTTON #2
      switch (currentContext)
      {
        case 'main':
          setContext('security');
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue + 1));
          menuShowSetPoint();
          break;
        case 'security':
          if (securityArmed.DecimalValue == 0)
          {
            securitySystem.Command("Control.On").Execute();
          }
          else
          {
            securitySystem.Command("Control.Off").Execute();
          }
          menuShowSecurity();
          break;
      }
      break;
    case '3': // BUTTON #3
      switch (currentContext)
      {
        case 'main':
          if (displayMode == 'normal')
          {
            displayMode = 'inverse';
            oled.Command("Oled.DisplayInvert").Execute();
          }
          else
          {
            displayMode = 'normal';
            oled.Command("Oled.DisplayNormal").Execute();
          }
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue - 1));
          menuShowSetPoint();
          break;
      }
      break;
    case '4': // BUTTON #4
      switch (currentContext)
      {
        case 'main':
          setContext('exit');
          break;
        default:
          setContext('main');
          break;
      }
      break;
  }

}

hg.When.ModuleParameterChange(function(module, parameter){
  if (module.Instance.Domain == 'RaspberryPi.Gpio' &amp;&amp; parameter.Is("Status.Level") &amp;&amp; parameter.DecimalValue &gt; 0)
  {
    // A button was pressed, store the timestamp
    startPressTs = new Date().getTime();
    if (currentContext == '')
    {
      // A long press of 3 seconds will open the settings menu
      var duration = 0;
      while (duration &lt; 3 &amp;&amp; parameter.DecimalValue &gt; 0)
      {
          hg.Pause(1);
          duration++;
      }
      if (duration &gt;= 3) setContext('main');
      return true;
    }
    //
    // The input is only processed when the settings menu is opened
    switch (module.Instance.Address)
    {
        // BUTTON #1 pressed
      case 'GPIO22': 
        setContextInput('1');
        break;
        // BUTTON #2 pressed
      case 'GPIO23':
        setContextInput('2');
        break;
        // BUTTON #3 pressed
      case 'GPIO24':
        setContextInput('3');
        break;
        // BUTTON #4 pressed
      case 'GPIO25':
        setContextInput('4');
        break;
    }
  }
  else if (module.Instance.Domain == 'RaspberryPi.Gpio' &amp;&amp; parameter.Is("Status.Level") &amp;&amp; parameter.DecimalValue == 0)
  {
    // A button was released
    var currentTs = new Date().getTime();
    if (currentContext == 'exit')
    {
      currentContext = '';
    }
    else if (currentContext == '' &amp;&amp; currentTs - startPressTs &lt; 3000) // 3 seconds
    {
      // We are outside the settings menu, so
      // the buttons functionality is to toggle scenarios/devices
      lastButton = '';
      switch (module.Instance.Address)
      {
          // BUTTON #1 released
        case 'GPIO22': 
          lastButton = '1';
          break;
          // BUTTON #2 released
        case 'GPIO23': 
          lastButton = '2';
          break;
          // BUTTON #3 released
        case 'GPIO24': 
          lastButton = '3';
          break;
          // BUTTON #4 released
        case 'GPIO25':
          lastButton= '4';
          break;
      }
      if (lastButton != '')
      {
        hg.Modules.WithFeature("EdenDisplay.ToggleButton." + lastButton).Toggle();
        var program = hg.Program.Option("EdenDisplay.ButtonProgram." + lastButton).Value;
        // scenarios are specified in the form &lt;program_id_or_name&gt;/&lt;options&gt;
        if (program != '')
        {
          // it is a scenario
          var options = '';
          if (program.lastIndexOf('/') &gt; 0) 
          {
            options = program.substring(program.lastIndexOf('/') + 1);
            program = program.substring(0, program.lastIndexOf('/'));
          }
          hg.Program.Run(program, options);
        }
      }
    }
    // Reset long press timestamp
    startPressTs = new Date().getTime();
  }
  else if (parameter.Is("HomeGenie.SecurityArmed") &amp;&amp; currentContext == "security")
  {
    // update security menu
    menuShowSecurity();
  }
  return true;
});

hg.Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>66</Address>
    <Name>Eden Oled Menu</Name>
    <Description>Implement a settings menu for Eden Oled Display.
It requires 4 input buttons connected to GPIO#22,#23,#24,#25.
A long press of at least 3 seconds will open the settings menu.
A normal press will toggle scenarios/devices associated to the buttons.
</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>Javascript</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>// Connector CN8
Program.AddOption("Gpio.PC19", "OFF", "#03 PC19", "text");
Program.AddOption("Gpio.PC21", "OFF", "#04 PC21", "text");
Program.AddOption("Gpio.PC20", "OFF", "#05 PC20", "text");
Program.AddOption("Gpio.PC22", "OFF", "#06 PC22", "text");
Program.AddOption("Gpio.PB14", "OFF", "#07 PB14", "text");
Program.AddOption("Gpio.PB16", "OFF", "#08 PB16", "text");
Program.AddOption("Gpio.PB15", "OFF", "#09 PB15", "text");
Program.AddOption("Gpio.PB17", "OFF", "#10 PB17", "text");
Program.AddOption("Gpio.PI20", "OFF", "#11 PI20", "text");
Program.AddOption("Gpio.PI14", "OFF", "#12 PI14", "text");
Program.AddOption("Gpio.PI21", "OFF", "#13 PI21", "text");
Program.AddOption("Gpio.PI15", "OFF", "#14 PI15", "text");
Program.AddOption("Gpio.PI03", "OFF", "#15 PI03", "text");
Program.AddOption("Gpio.PB03", "OFF", "#16 PB03", "text");
Program.AddOption("Gpio.PB02", "OFF", "#17 PB02", "text");
Program.AddOption("Gpio.PB04", "OFF", "#18 PB04", "text");
Program.AddOption("Gpio.PB18", "OFF", "#19 PB18", "text");
Program.AddOption("Gpio.PB19", "OFF", "#20 PB19", "text");
// Connector CN9
Program.AddOption("Gpio.PG00", "OFF", "#21 PG00", "text");
Program.AddOption("Gpio.PG03", "OFF", "#22 PG03", "text");
Program.AddOption("Gpio.PG02", "OFF", "#23 PG02", "text");
Program.AddOption("Gpio.PG01", "OFF", "#24 PG01", "text");
Program.AddOption("Gpio.PG04", "OFF", "#25 PG04", "text");
Program.AddOption("Gpio.PG05", "OFF", "#26 PG05", "text");
Program.AddOption("Gpio.PG06", "OFF", "#27 PG06", "text");
Program.AddOption("Gpio.PG07", "OFF", "#28 PG07", "text");
Program.AddOption("Gpio.PG08", "OFF", "#29 PG08", "text");
Program.AddOption("Gpio.PG09", "OFF", "#30 PG09", "text");
Program.AddOption("Gpio.PG10", "OFF", "#31 PG10", "text");
Program.AddOption("Gpio.PG11", "OFF", "#32 PG11", "text");

Program.Run();
</ScriptCondition>
    <ScriptSource>var moduleDomain = "CubieBoard.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
// GPIO on connector CN8
var pc19 = Program.Option("Gpio.PC19").Value.ToLower();
var pc21 = Program.Option("Gpio.PC21").Value.ToLower();
var pc20 = Program.Option("Gpio.PC20").Value.ToLower();
var pc22 = Program.Option("Gpio.PC22").Value.ToLower();
var pb14 = Program.Option("Gpio.PB14").Value.ToLower();
var pb16 = Program.Option("Gpio.PB16").Value.ToLower();
var pb15 = Program.Option("Gpio.PB15").Value.ToLower();
var pb17 = Program.Option("Gpio.PB17").Value.ToLower();
var pi20 = Program.Option("Gpio.PI20").Value.ToLower();
var pi14 = Program.Option("Gpio.PI14").Value.ToLower();
var pi21 = Program.Option("Gpio.PI21").Value.ToLower();
var pi15 = Program.Option("Gpio.PI15").Value.ToLower();
var pi03 = Program.Option("Gpio.PI03").Value.ToLower();
var pb03 = Program.Option("Gpio.PB03").Value.ToLower();
var pb02 = Program.Option("Gpio.PB02").Value.ToLower();
var pb04 = Program.Option("Gpio.PB04").Value.ToLower();
var pb18 = Program.Option("Gpio.PB18").Value.ToLower();
var pb19 = Program.Option("Gpio.PB19").Value.ToLower();
// GPIO on connector CN9
var pg00 = Program.Option("Gpio.PG00").Value.ToLower();
var pg03 = Program.Option("Gpio.PG03").Value.ToLower();
var pg02 = Program.Option("Gpio.PG02").Value.ToLower();
var pg01 = Program.Option("Gpio.PG01").Value.ToLower();
var pg04 = Program.Option("Gpio.PG04").Value.ToLower();
var pg05 = Program.Option("Gpio.PG05").Value.ToLower();
var pg06 = Program.Option("Gpio.PG06").Value.ToLower();
var pg07 = Program.Option("Gpio.PG07").Value.ToLower();
var pg08 = Program.Option("Gpio.PG08").Value.ToLower();
var pg09 = Program.Option("Gpio.PG09").Value.ToLower();
var pg10 = Program.Option("Gpio.PG10").Value.ToLower();
var pg11 = Program.Option("Gpio.PG11").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
// GPIO on connector CN8
if (pc19 != "off") pinMapping.Add(new { Config = pc19, Address = "PC19", Pin = ConnectorPin.CB3_CN8Pin05, Direction = (pc19 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc21 != "off") pinMapping.Add(new { Config = pc21, Address = "PC21", Pin = ConnectorPin.CB3_CN8Pin06, Direction = (pc21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc20 != "off") pinMapping.Add(new { Config = pc20, Address = "PC20", Pin = ConnectorPin.CB3_CN8Pin07, Direction = (pc20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc22 != "off") pinMapping.Add(new { Config = pc22, Address = "PC22", Pin = ConnectorPin.CB3_CN8Pin08, Direction = (pc22 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb14 != "off") pinMapping.Add(new { Config = pb14, Address = "PB14", Pin = ConnectorPin.CB3_CN8Pin09, Direction = (pb14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb16 != "off") pinMapping.Add(new { Config = pb16, Address = "PB16", Pin = ConnectorPin.CB3_CN8Pin10, Direction = (pb16 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb15 != "off") pinMapping.Add(new { Config = pb15, Address = "PB15", Pin = ConnectorPin.CB3_CN8Pin11, Direction = (pb15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb17 != "off") pinMapping.Add(new { Config = pb17, Address = "PB17", Pin = ConnectorPin.CB3_CN8Pin12, Direction = (pb17 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi20 != "off") pinMapping.Add(new { Config = pi20, Address = "PI20", Pin = ConnectorPin.CB3_CN8Pin15, Direction = (pi20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi14 != "off") pinMapping.Add(new { Config = pi14, Address = "PI14", Pin = ConnectorPin.CB3_CN8Pin16, Direction = (pi14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi21 != "off") pinMapping.Add(new { Config = pi21, Address = "PI21", Pin = ConnectorPin.CB3_CN8Pin17, Direction = (pi21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi15 != "off") pinMapping.Add(new { Config = pi15, Address = "PI15", Pin = ConnectorPin.CB3_CN8Pin18, Direction = (pi15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi03 != "off") pinMapping.Add(new { Config = pi03, Address = "PI03", Pin = ConnectorPin.CB3_CN8Pin19, Direction = (pi03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb03 != "off") pinMapping.Add(new { Config = pb03, Address = "PB03", Pin = ConnectorPin.CB3_CN8Pin20, Direction = (pb03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb02 != "off") pinMapping.Add(new { Config = pb02, Address = "PB02", Pin = ConnectorPin.CB3_CN8Pin21, Direction = (pb02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb04 != "off") pinMapping.Add(new { Config = pb04, Address = "PB04", Pin = ConnectorPin.CB3_CN8Pin22, Direction = (pb04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb18 != "off") pinMapping.Add(new { Config = pb18, Address = "PB18", Pin = ConnectorPin.CB3_CN8Pin23, Direction = (pb18 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb19 != "off") pinMapping.Add(new { Config = pb19, Address = "PB19", Pin = ConnectorPin.CB3_CN8Pin25, Direction = (pb19 == "out" ? PinDirection.Output : PinDirection.Input) });
// GPIO on connector CN9
if (pg00 != "off") pinMapping.Add(new { Config = pg00, Address = "PG00", Pin = ConnectorPin.CB3_CN9Pin03, Direction = (pg00 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg03 != "off") pinMapping.Add(new { Config = pg03, Address = "PG03", Pin = ConnectorPin.CB3_CN9Pin04, Direction = (pg03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg02 != "off") pinMapping.Add(new { Config = pg02, Address = "PG02", Pin = ConnectorPin.CB3_CN9Pin05, Direction = (pg02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg01 != "off") pinMapping.Add(new { Config = pg01, Address = "PG01", Pin = ConnectorPin.CB3_CN9Pin06, Direction = (pg01 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg04 != "off") pinMapping.Add(new { Config = pg04, Address = "PG04", Pin = ConnectorPin.CB3_CN9Pin07, Direction = (pg04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg05 != "off") pinMapping.Add(new { Config = pg05, Address = "PG05", Pin = ConnectorPin.CB3_CN9Pin08, Direction = (pg05 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg06 != "off") pinMapping.Add(new { Config = pg06, Address = "PG06", Pin = ConnectorPin.CB3_CN9Pin09, Direction = (pg06 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg07 != "off") pinMapping.Add(new { Config = pg07, Address = "PG07", Pin = ConnectorPin.CB3_CN9Pin10, Direction = (pg07 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg08 != "off") pinMapping.Add(new { Config = pg08, Address = "PG08", Pin = ConnectorPin.CB3_CN9Pin11, Direction = (pg08 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg09 != "off") pinMapping.Add(new { Config = pg09, Address = "PG09", Pin = ConnectorPin.CB3_CN9Pin12, Direction = (pg09 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg10 != "off") pinMapping.Add(new { Config = pg10, Address = "PG10", Pin = ConnectorPin.CB3_CN9Pin13, Direction = (pg10 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg11 != "off") pinMapping.Add(new { Config = pg11, Address = "PG11", Pin = ConnectorPin.CB3_CN9Pin14, Direction = (pg11 == "out" ? PinDirection.Output : PinDirection.Input) });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	if (pc.Direction == PinDirection.Input)
    {
	  	configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
      	if (pc.Config.EndsWith("+"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
        }
      	else if (pc.Config.EndsWith("-"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
        }
		Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
    }
  	else
    {
	  	configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
		Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
    }
    configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
	connection = new GpioConnection(configuration);
}
catch 
{
  	Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  	Pause(10);
  	return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  	var address = args.Configuration.Name;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
    Program.RaiseEvent(module, "Status.Level", 
                       args.Enabled ? "1" : "0",
                       address);
  
});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	var address = pc.Address;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
	module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errorMessage = "";
	try
	{
		string address = reqs[1];
      	string command = reqs[2];
        //
        switch(command)
        {
          // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
          case "Control.On":
          connection[address] = true;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
          case "Control.Off":
          connection[address] = false;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
          case "Control.Toggle":
          connection.Toggle(address);
          break;
        }
      	//
        return "{ 'ResponseValue' : 'OK' }";    
    } 
  	catch (Exception ex) 
    { 
	    errorMessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>150</Address>
    <Name>GPIO Modules</Name>
    <Description>CubieTruck/CubieBoard3 GPIOs mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1).
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
    <Group>CubieTruck</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("PollInterval", "45", "Poll Interval (seconds)", "text");
Program.AddFeature("HomeAutomation.ZWave", "Light,Dimmer,Switch,Sensor", "HomeGenie.ZWaveMeterPoll", "Poll meter Watt", "checkbox");
Program.Run();
</ScriptCondition>
    <ScriptSource>while (Program.IsEnabled)
{
  // basic get will returns current device level 
  Modules.WithFeature("HomeGenie.ZWaveMeterPoll").Each((module) =&gt; {
    //Program.Notify("Z-Wave Level Poll", "Polling node " + module.Instance.Address + "&lt;br&gt;" + module.Instance.Name);
    module.Command("Meter.Get").Execute("2");
    return false; // do not break, continue iterating...
  });
  // pause between each poll
  var delay = Program.Option("PollInterval").DecimalValue;
  if (delay &lt; 5) delay = 5;
  Pause(delay);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>40</Address>
    <Name>Meter Watt Poll</Name>
    <Description>Periodically reads instant Watt value from meter devices</Description>
    <Group>Z-Wave</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains>HomeAutomation.ZWave</ForDomains>
        <ForTypes>Light,Dimmer,Switch,Sensor</ForTypes>
        <Property>HomeGenie.ZWaveMeterPoll</Property>
        <Description>Poll meter Watt</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.Run();
</ScriptCondition>
    <ScriptSource>var address = 0x38;

var clockPin = Pcf8574Pin.P2;
var readWritePin = Pcf8574Pin.P1;
var registerSelectPin = Pcf8574Pin.P0;
var backlightPin = Pcf8574Pin.P3;

var dataPins = new[]
{
  Pcf8574Pin.P4,
  Pcf8574Pin.P5,
  Pcf8574Pin.P6,
  Pcf8574Pin.P7
};

var sdaPin = ConnectorPin.P1Pin03;
var sclPin = ConnectorPin.P1Pin05;
var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor()) { ClockDivider = 512 };
var connection = new Pcf8574I2cConnection(driver.Connect(address));

dynamic configuration = new dynamic();
configuration.Pins = new Hd44780Pins(
  connection.Out(registerSelectPin),
  connection.Out(clockPin),
  dataPins.Select(p =&gt; (IOutputBinaryPin)connection.Out(p)))
{
  Backlight = connection.Out(backlightPin),
  ReadWrite = connection.Out(readWritePin),
};

var settings = new Hd44780LcdConnectionSettings
{
  ScreenWidth = 20,
  ScreenHeight = 2,
};

using (var display = new Hd44780LcdConnection(settings, configuration.Pins))
{
  display.SetCustomCharacter(1, new byte[] {0x0, 0x0, 0x04, 0xe, 0x1f, 0x0, 0x0});
  display.SetCustomCharacter(2, new byte[] {0x0, 0x0, 0x1f, 0xe, 0x04, 0x0, 0x0});
  display.Clear();
  display.WriteLine("OS Version");
  display.WriteLine(Environment.OSVersion);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>67</Address>
    <Name>HD44780 LCD PCF8574</Name>
    <Description>Example of using HD44780 LCD with PCF8574 I2C I/O expander</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.UseWidget("homegenie/generic/timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Weekend", "Timetable to use for weekend", "text");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Workday", "Timetable to use for workday", "text");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Holiday", "Timetable to use for holiday", "text");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Special", "Timetable to use for special day", "text");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Enable", "Enable Timetable scheduling", "checkbox");
// Initialize Calendar if not already defined
var calendarSettings = Settings.Parameter("Timetable.Calendar.Year");
while (calendarSettings.Value.Length &lt; 366) calendarSettings.Value += '0';
if (calendarSettings.Value[0] == '0')
  calendarSettings.Value = "2" + calendarSettings.Value.Substring(1); // first of the year marked as holiday (2)
Program.Run();
</ScriptCondition>
    <ScriptSource>// HomeGenie Timetable Widget
// based on "Table Horaire"" widget idea by Daniel Maillard

var timeResolution = 5d;
var tableLength = (int)((24 * 60) / timeResolution);
var tablePrefix = "Timetable.Table.";
var calendarTableSettings = "Timetable.Calendar.Year";
var timetableModules = Modules.WithFeature("TimeTable.Enable");

var GetTableSettings = new Func&lt;string, ModuleParameter&gt;((table)=&gt;{
  var settingPath = tablePrefix + table;
  var setting = Settings.Parameter(settingPath);
  while (setting.Value.Length &lt; tableLength) setting.Value += '0';
  setting.Value = setting.Value.Substring(0, tableLength);
  return setting;
});

var GetTableIndex = new Func&lt;ModuleHelper, DateTime, int&gt;((module, date) =&gt; {
    var dayIndex = date.DayOfYear - 1;
    // normalize if not leap year
    if (!DateTime.IsLeapYear(date.Year) &amp;&amp; date.Month &gt; 2) dayIndex++;
    var isWeekend = (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday);
    // Get day type from Calendar (Weekday, Weekend, Holiday, Special)
    // and select Timetable table to be used
    var tableIndex = 0d; // 0 stand for not used, accepted values are 1 to 10
    bool isHoliday = false, isWorkday = false, isSpecial = false;
    var calendar = Settings.Parameter(calendarTableSettings);
    var dayType = calendar.Value[dayIndex];
    switch (dayType)
    {
      case '0':
        if (!isWeekend) isWorkday = true;
        break;
      case '1':
        isWorkday = true;
        break;
      case '2':
        isHoliday = true;
        break;
      case '3':
        isSpecial = true;
        break;
    }
    if (isWorkday) 
    {
      tableIndex = module.Parameter("TimeTable.Workday").DecimalValue;
    }
    else if (isHoliday) 
    {
      tableIndex = module.Parameter("TimeTable.Holiday").DecimalValue;
    }
    else if (isSpecial) 
    {
      tableIndex = module.Parameter("TimeTable.Special").DecimalValue;
    }
    else if (isWeekend) 
    {
      tableIndex = module.Parameter("TimeTable.Weekend").DecimalValue;
    }
  	return (int)tableIndex;
});

var GetTableSliceAction = new Func&lt;string, DateTime, ExpandoObject&gt;((table, date)=&gt;{
  var sliceIndex = (int)Math.Floor((date - DateTime.Today).TotalMinutes / timeResolution);
  var previous = (sliceIndex == 0 ? (tableLength - 1) : sliceIndex - 1);
  dynamic action = new ExpandoObject();
  action.Previous = table[previous];
  action.Value = table[sliceIndex];
  action.Index = sliceIndex;
  return action;
});

var PerformAction = new Func&lt;ModuleHelper, string, dynamic, bool&gt;((module, tableType, action) =&gt;{
  bool performed = false;
  switch (tableType)  
  {
    case "OnOff":
      if (action.Value == '1' &amp;&amp; action.Previous == '0')
      {
      	Program.Notify("Timetable", module.Instance.Name + " ON");
        module.On();
        performed = true;
      }
      else if (action.Value == '0' &amp;&amp; action.Previous == '1')
      {
      	Program.Notify("Timetable", module.Instance.Name + " OFF");
        module.Off();
        performed = true;
      }
      break;
	case "Level":
      // Level values are '0' = Off, '1' = 10%, '2' = 20%, ..., '9' = 90%, 'A' = 100%
      var level = ((int)action.Value - 48);
      if (action.Value == 'A') level = 10;
      if (action.Value != '0' &amp;&amp; action.Previous != action.Value)
      {
      	Program.Notify("Timetable", module.Instance.Name + " Level " + (level * 10) + "%");
        module.Level = level * 10;
        performed = true;
      }
      else if (action.Value == '0' &amp;&amp; action.Previous != action.Value)
      {
      	Program.Notify("Timetable", module.Instance.Name + " OFF");
        module.Off();
        performed = true;
      }
      break;
    case "Therm":
      var command = module.Command("Thermostat.ModeSet");
      if (action.Value != action.Previous)
      switch ((char)action.Value)
      {
        case '0':
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          command.Execute("Off");
	      performed = true;
          break;
        case '1':
          Program.Notify("Timetable", module.Instance.Name + " Heat");
          command.Execute("Heat");
	      performed = true;
          break;
        case '2':
          Program.Notify("Timetable", module.Instance.Name + " Cool");
          command.Execute("Cool");
	      performed = true;
          break;
        case '3':
          Program.Notify("Timetable", module.Instance.Name + " Auto");
          command.Execute("Auto");
	      performed = true;
          break;
        case '4':
          Program.Notify("Timetable", module.Instance.Name + " FanOnly");
          command.Execute("FanOnly");
	      performed = true;
          break;
        case '5':
          Program.Notify("Timetable", module.Instance.Name + " AutoChangeover");
          command.Execute("AutoChangeover");
	      performed = true;
          break;
        case '6':
          Program.Notify("Timetable", module.Instance.Name + " HeatEconomy");
          command.Execute("HeatEconomy");
	      performed = true;
          break;
        case '7':
          Program.Notify("Timetable", module.Instance.Name + " CoolEconomy");
          command.Execute("CoolEconomy");
	      performed = true;
          break;
        case '8':
          Program.Notify("Timetable", module.Instance.Name + " Away");
          command.Execute("Away");
	      performed = true;
          break;
      }
      break;
  }
  return performed;
});

When.WebServiceCallReceived(Program.Module.Domain + "/" + Program.Module.Address, (args)=&gt;{
  var request = args.ToString().Split('/');
  var response = "ERROR";
  var command = request[2];
  ModuleParameter setting = null;
  switch (command)
  {
    case "Calendar.Get":
      setting = Settings.Parameter(calendarTableSettings);
      response = setting.Value;
      break;
    case "Calendar.Set":
      setting = Settings.Parameter(calendarTableSettings);
      setting.Value = request[3];
      response = "OK";
      break;
    case "Timetable.Set":
      setting = GetTableSettings(request[3]);
      var slotFrom = int.Parse(request[4]);
      var slotTo = int.Parse(request[5]);
      var slotValue = request[6];
      var slotRangeStart = int.Parse(request[7]);
      var slotRangeEnd = int.Parse(request[8]);
      var newValue = new System.Text.StringBuilder(setting.Value);
      newValue.Remove(slotFrom, slotTo - slotFrom);
      newValue.Insert(slotFrom, new String(slotValue.ToString()[0], slotTo - slotFrom));
      if (slotRangeStart &lt; slotFrom &amp;&amp; setting.Value[slotRangeStart] == slotValue.ToString()[0])
      {
        newValue.Remove(slotRangeStart, slotFrom - slotRangeStart);
        newValue.Insert(slotRangeStart, new String('0', slotFrom - slotRangeStart));
      }
      if (slotRangeEnd &gt; slotTo &amp;&amp; setting.Value[slotRangeEnd - 1] == slotValue.ToString()[0])
      {
        newValue.Remove(slotTo, slotRangeEnd - slotTo);
        newValue.Insert(slotTo, new String('0', slotRangeEnd - slotTo));
      }
      setting.Value = newValue.ToString();
      response = "OK";
      break;
    case "Timetable.Get":
      setting = GetTableSettings(request[3]);
      response = setting.Value;
      break;
  }
  return "[{ 'ResponseValue': '" + response + "' }]";
});

// Timetable control loop
while (Program.IsEnabled)
{
  timetableModules.Each((module)=&gt;{

    // determine table type
    var tableType = "OnOff";
    if (module.IsOfDeviceType("Shutter,Dimmer"))
    {
      tableType = "Level";
    }
    else if (module.IsOfDeviceType("Thermostat"))
    {
      tableType = "Therm";
    }

    // calculate current day of year as interval from 0 to 365 (non-leap year normalized)
    var todayDate = DateTime.Now;
	var tableIndex = GetTableIndex(module, todayDate);
    // Perform action on current module
    if (tableIndex &gt; 0)
    {
      var timetable = GetTableSettings(tableType + "." + (tableIndex - 1)); // tables are stored as zero indexed
      dynamic action = GetTableSliceAction(timetable.Value, todayDate);
      // check for exception in crossing from different table types on midnight
      var previousTableIndex = GetTableIndex(module, todayDate.AddMinutes(-timeResolution));
      if (previousTableIndex != tableIndex) 
      {
        var previousTable = GetTableSettings(tableType + "." + (previousTableIndex - 1));
        action.Previous = previousTable.Value[tableLength - 1];
      }
      // perform action
      if (PerformAction(module, tableType, action))
      {
      	Program.Notify("Timetable", "Performed action from table '" + tableType + "' #" + tableIndex);
      }
    }

    return false; // do not stop iterating, continue processing next module
  });
  
  // Pause until next slice of time of "timeResolution" size
  var nextCheck = (Math.Floor(DateTime.Now.Minute / timeResolution) + 1) * timeResolution;
  var pause = ((nextCheck - DateTime.Now.Minute) * 60) - DateTime.Now.Second;
  Pause(pause);
}
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>36</Address>
    <Name>Timetable</Name>
    <Description>Widget for scheduling thermostats, lights and shutters.</Description>
    <Group>Scheduling</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Weekend</Property>
        <Description>Timetable to use for weekend</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Workday</Property>
        <Description>Timetable to use for workday</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Holiday</Property>
        <Description>Timetable to use for holiday</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Special</Property>
        <Description>Timetable to use for special day</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Light,Switch,Shutter,Dimmer,Thermostat</ForTypes>
        <Property>TimeTable.Enable</Property>
        <Description>Enable Timetable scheduling</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:18.053073Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>//Example program for the BeNext Tag reader
//This program allows to save tag IDs and remove them
//The event TagReader.Alarm is sent when a tag is recognized
//Author: Alexandre Schnegg &lt;alexandre.schnegg@gmail.com&gt;
Program.AddOption("LearningMode", "0", "LearningMode (1: enable, 0: disable)", "text");
Program.AddOption("Reset", "0", "Reset tag codes (1: enable, 0: disable), reset start after scanning a known tag", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>//Example program for the BeNext Tag reader
//This program allows to save tag IDs and remove them
//The event TagReader.Alarm is sent when a tag is recognized
//Author: Alexandre Schnegg &lt;alexandre.schnegg@gmail.com&gt;

var userId=1;

When.ModuleParameterChanged((module, parameter)=&gt;{
  //Tag reader report unknowm tag code
  if(module.Is("Tag reader") &amp;&amp; parameter.Is("EntryControl.UserCode"))
  {
    //Learning mode
    if(Program.Option("LearningMode").Value == "1")
    {
      Program.Notify("Tag reader", "User ID: "+userId.ToString()+" saved, tag value: "+parameter.Value);
      module.Command("UserCode.Set").Set(userId+"/1/"+parameter.Value); //1 : user id status,. should be 1 to save new user id
      userId++;
    }
    else
    {
      Program.Notify("Tag reader", "Unknown tag value: "+parameter.Value);
    }
  }
  //Reset mode
  else if(Program.Option("Reset").Value == "1" &amp;&amp; parameter.Is("Sensor.Alarm"))
  {
    for(var i=1;i&lt;=10;i++)
    {
      module.Command("UserCode.Set").Set(i+"/0/"+"00000000000000000000"); //0 : user id status,. should be 0 to remove user id, the third option doesn't matter
    }
    Program.Notify("Tag reader", "Reset done !");
  }
  //If tag is recognized
  else if(module.Is("Tag reader") &amp;&amp; parameter.Is("Sensor.Alarm"))
  {
    if(parameter.Value!="255")
    {
      Program.RaiseEvent("TagReader.Alarm", "0", "Tag reader");
      module.On(); //Notify the user with the tag reader's buzzer
    }
    else
    {
      Program.RaiseEvent("TagReader.Alarm", "1", "Tag reader");
      module.On(); //Notify the user with the tag reader's buzzer
    }
  }
  return true;
});

while (Program.IsEnabled)
{
  Pause(1);
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>504</Address>
    <Name>Tag Reader</Name>
    <Description>Example program for the BeNext TagReader</Description>
    <Group>Z-Wave</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>const string MODULES_DOMAIN = "HomeAutomation.KNX";

Program.AddOption("KnxLocalIp", "", "Local endpoint IP address (optional)", "text");
Program.AddOption("KnxLocalPort","", "Local endpoint port (optional)", "text");
Program.AddOption("KnxRemoteIp", "", "Remote endpoint IP address (optional)", "text");
Program.AddOption("KnxRemotePort","", "Remote endpoint port (optional)", "text");

// Create 5 virtual modules with the domain "HomeAutomation.KNX" and with address from 1 to 5
Program.AddVirtualModules(MODULES_DOMAIN, "Light", "", 1, 5);
Program.AddFeature(MODULES_DOMAIN, "Dimmer,Light,Sensor", "KNX.Address", "KNX Address", "text");

Program.Run();
</ScriptCondition>
    <ScriptSource>const string MODULES_DOMAIN = "HomeAutomation.KNX";
const string EVENT_DESCRIPTION = "KNX Module";
var knxModules = Modules.InDomain(MODULES_DOMAIN);

var localIp = Program.Option("KnxLocalIp").Value;
var localPort = (int)Program.Option("KnxLocalPort").DecimalValue;
var remoteIp = Program.Option("KnxRemoteIp").Value;
var remotePort = (int)Program.Option("KnxRemotePort").DecimalValue;

var knx = KnxClient;
if (!String.IsNullOrWhiteSpace(localIp) &amp;&amp; !String.IsNullOrWhiteSpace(remoteIp))
{
  knx.EndPoint(localIp, localPort &gt; 0 ? localPort : 3671, remoteIp, remotePort &gt; 0 ? remotePort : 3671);
}
else if (!String.IsNullOrWhiteSpace(localIp))
{
  if (localPort &gt; 0)  
  {
    knx.EndPoint(localIp, localPort);
  }
  else
  {
    knx.EndPoint(localIp);
  }
}

knx
  .Connect()
  .OnStatusReceived((address, status)=&gt;{ 
    // TODO: should update virtual module parameters
    Program.Notify("KNX Status", "Device " + address + " -&gt; " + status);
  })
  .OnEventReceived((address, status)=&gt;{ 
    // TODO: should update virtual module parameters
    Program.Notify("KNX Event", "Device " + address + " -&gt; " + status);
  });  

// - http://&lt;hg_address&gt;/api/HomeAutomation.KNX/...
When.WebServiceCallReceived(MODULES_DOMAIN, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  try
  {
    string lightnumber = reqs[1];
    string command = reqs[2];
    //string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
    //
    var module = knxModules.WithAddress(lightnumber).Get();
    var knxAddress = module.Parameter("KNX.Address");
    if (knxAddress == null)
    {
      return "{ 'ResponseValue' : 'ERROR: module KNX address not configured.' }";
    }
    //
    switch(command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.On
      case "Control.On":
      knx.Action(knxAddress.Value, true);
      Program.RaiseEvent(module, "Status.Level", "1", EVENT_DESCRIPTION);
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.Off
      case "Control.Off":
      knx.Action(knxAddress.Value, false);
      Program.RaiseEvent(module, "Status.Level", "0", EVENT_DESCRIPTION);
      break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.KNX/&lt;light_number&gt;/Control.Toggle
      case "Control.Toggle":
      if (module.Parameter("Status.Level").DecimalValue == 0)
      {
        knx.Action(knxAddress.Value, true);
        Program.RaiseEvent(module, "Status.Level", "1", EVENT_DESCRIPTION);
      }
      else
      {
        knx.Action(knxAddress.Value, false);
        Program.RaiseEvent(module, "Status.Level", "0", EVENT_DESCRIPTION);
      }
      break;
    }
    return "{ 'ResponseValue' : 'OK' }";    
  } catch (Exception e) { 
    Program.Notify(MODULES_DOMAIN + " ERROR!", e.Message);
  }
  return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>27</Address>
    <Name>KNX device modules</Name>
    <Description>Adds 5 virtual modules. KNX address of each device can be configured from the module options popup.</Description>
    <Group>Devices and Things</Group>
    <Features>
      <ProgramFeature>
        <FieldType>text</FieldType>
        <ForDomains>HomeAutomation.KNX</ForDomains>
        <ForTypes>Dimmer,Light,Sensor</ForTypes>
        <Property>KNX.Address</Property>
        <Description>KNX Address</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>hg.Program.AddOption('SerialPort', '/dev/ttyUSB0', 'Serial port path (enter "pi", for using GPIO)', 'text')
hg.Program.AddOption('VirtualModules', 'A,B', 'Create virtual modules (comma separated house codes)', 'text')
hg.Program.Run()
    </ScriptCondition>
    <ScriptSource>"""
X10 Firecracker CM17A Interface
"""

#-----------------------------------------------------------
# Copyright (c) 2010-2013 Collin J. Delker
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.# 
#-----------------------------------------------------------
#
# NOTES:
#   This software requires the pySerial python module:
#   http://pyserial.sourceforge.net/
#
#   Commands can be sent from the command line or from
#   python scripts by calling send_command().
#
#   X10 Firecracker CM17A protocol specificaiton:
#   ftp://ftp.x10.com/pub/manuals/cm17a_protocol.txt
#
#-----------------------------------------------------------
import sys
# this will tell HG where to look for libraries
sys.path.append("/usr/lib/python2.7")
sys.path.append("/usr/lib/python2.7/dist-packages")

# Check for serial port or RPi-GPIO support
serial_installed = False
try:
    import serial
    serial_installed = True
except:
    pass

try:
    import RPi.GPIO as GPIO
    serial_installed = True
except:
    pass

import time
#import sys

if not serial_installed:
    raise ValueError, 'No python serial module installed.'

#----------------------------------------------------------
# Constants
#----------------------------------------------------------
__version__ = '0.4'
__domain__ = 'HomeAutomation.FireCracker'
__event_description__ = 'X10 FireCracker'

# Firecracker spec requires at least 0.5ms between bits
DELAY_BIT = 0.001 # Seconds between bits
DELAY_INIT = 0.5  # Powerup delay
DELAY_FIN = 1     # Seconds to wait before disabling after transmit

# House and unit code table
HOUSE_LIST = [
   0x6000, # a
   0x7000, # b
   0x4000, # c
   0x5000, # d
   0x8000, # e
   0x9000, # f
   0xA000, # g
   0xB000, # h
   0xE000, # i
   0xF000, # j
   0xC000, # k
   0xD000, # l
   0x0000, # m
   0x1000, # n
   0x2000, # o
   0x3000  # p
   ]

UNIT_LIST = [
  0x0000, # 1
  0x0010, # 2
  0x0008, # 3
  0x0018, # 4
  0x0040, # 5
  0x0050, # 6
  0x0048, # 7
  0x0058, # 8
  0x0400, # 9
  0x0410, # 10
  0x0408, # 11
  0x0400, # 12
  0x0440, # 13
  0x0450, # 14
  0x0448, # 15
  0x0458  # 16
  ]
MAX_UNIT = 16
    
# Command Code Masks
CMD_ON   = 0x0000
CMD_OFF  = 0x0020
CMD_BRT  = 0x0088
CMD_DIM  = 0x0098

# Data header and footer
DATA_HDR = 0xD5AA
DATA_FTR = 0xAD

# Raspberry Pi GPIO pins. Change to whatever you want to use.
DTR_PIN = 24
RTS_PIN = 25

#----------------------------------------------------------
# Raspberry Pi GPIO class
#----------------------------------------------------------
class RPiGPIO():
    """ Class to emulate serial port using Raspberry Pi GPIO. Only DTR and RTS pins are used. 
        DTR = pin 4 of DB9 serial connector
        RTS = pin 7 of DB9 serial connector
        GND = pin 5 of DB9 serial connector.
        Must use level-shifter to convert RPi's 3.3V output to 5V.
    """
    def __init__( self ):
        GPIO.setmode( GPIO.BCM )
        GPIO.setup( DTR_PIN, GPIO.OUT )
        GPIO.setup( RTS_PIN, GPIO.OUT )

    def setDTR( self, val ):
        GPIO.output( DTR_PIN, val )
    
    def setRTS( self, val ):
        GPIO.output( RTS_PIN, val )

    def close( self ):
        GPIO.cleanup()


#----------------------------------------------------------
# Functions
#----------------------------------------------------------
def set_standby(s):
    """ Put Firecracker in standby """
    s.setDTR(True)
    s.setRTS(True)


def set_off(s):
    """ Turn firecracker 'off' """
    s.setDTR(False)
    s.setRTS(False)


def send_data(s, data, bytes):
    """ Send data to firecracker """
    mask = 1 &lt;&lt; (bytes - 1)
    
    for i in range(bytes):
        bit = data &amp; mask
        if bit == mask:
            s.setDTR(False)
        elif bit == 0:
            s.setRTS(False)

        time.sleep(DELAY_BIT)
        set_standby(s)
        time.sleep(DELAY_BIT)      # Then stay in standby at least 0.5ms before next bit
        data = data &lt;&lt; 1           # Move to next bit in sequence


def build_command(house, unit, action):
    """ Generate the command word """
    cmd = 0x00000000    
    house_int = ord(house.upper()) - ord('A')

    # Add in the house code
    if house_int &gt;= 0 and house_int &lt;= ord('P') - ord('A'):
        cmd = cmd | HOUSE_LIST[ house_int ]
    else:
        print "Invalid house code ", house, house_int
        return

    # Add in the unit code. Ignore if bright or dim command,
    # which just applies to last unit.
    if unit &gt; 0 and unit &lt; MAX_UNIT:
        if action.upper() != 'BRT' and action.upper() != 'DIM':
            cmd = cmd | UNIT_LIST[ unit - 1 ]
    else:
        print "Invalid Unit Code", unit
        return

    # Add the action code
    if action.upper() == 'ON':
        cmd = cmd | CMD_ON
    elif action.upper() == 'OFF':
        cmd = cmd | CMD_OFF
    elif action.upper() == 'BRT':
        cmd = cmd | CMD_BRT
    elif action.upper() == 'DIM':
        cmd = cmd | CMD_DIM
    else:
        print "Invalid Action Code", action
        return
    
    return cmd


def send_command( portname, house, unit, action ):
    """ Send Command to Firecracker

    portname: Serial port to send to
    house:    house code, character 'a' to 'p'
    unit:     unit code, integer 1 to 16
    action:   string 'ON', 'OFF', 'BRT' or 'DIM'
    """

    cmd = build_command( house, unit, action )
    if cmd != None:
        try:
            if portname == 'pi':
                s = RPiGPIO()
            else:
                s = serial.Serial(portname)
        except serial.SerialException:
            print 'ERROR opening serial port', portname
            return False

        set_standby(s)               # Initialize the firecracker
        time.sleep( DELAY_INIT )     # Make sure it powers up
        send_data( s, DATA_HDR, 16 ) # Send data header
        send_data( s, cmd, 16 )      # Send data
        send_data( s, DATA_FTR, 8 )  # Send footer
        time.sleep( DELAY_FIN )      # Wait for firecracker to finish transmitting
        set_off(s)                   # Shut off the firecracker
        s.close()
        return True

      
def web_service_handler( args ):
  path = args.split('/')
  house = path[1][0]
  unit = int(path[1][1:])
  command = path[2]
  port = hg.Program.Option('SerialPort').Value
  module = hg.Modules.InDomain(__domain__).WithAddress(house+`unit`).Get()
  if command == 'Control.On':
    hg.Program.RaiseEvent(module, 'Status.Level', '1', __event_description__)
    send_command( port, house, unit, 'ON' )
  elif command == 'Control.Off':
    hg.Program.RaiseEvent(module, 'Status.Level', '0', __event_description__)
    send_command( port, house, unit, 'OFF' )
  elif command == 'Control.Level':
    option = float(path[3]) / 100
    level = float((module.Level / 100) * 22)
    dimbrt = int((option*22) - level)
    option = (level + dimbrt) / 22;
    hg.Program.RaiseEvent(module, 'Status.Level', `option`, __event_description__)
    if dimbrt &gt; 0:
        for l in range(1, dimbrt):
            send_command( port, house, unit, 'BRT' )
    elif dimbrt &lt; 0:
        for l in range(1, abs(dimbrt)):
            send_command( port, house, unit, 'DIM' )
  return


#
# Program MAIN
#
# create virtual modules
virtualModules = hg.Program.Option('VirtualModules').Value.split(',')
for h in virtualModules:
  for unit in range(0, 16):
    hg.Program.AddVirtualModule(__domain__, h+`1+unit`, 'Switch', '')
# listen to web service calls
hg.When.WebServiceCallReceived(__domain__, web_service_handler)
# go background
hg.Program.GoBackground()
    </ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>25</Address>
    <Name>X10 Firecracker Modules</Name>
    <Description>FireCracker driver with X10 virtual modules.
python-serial module must be installed &lt;strong&gt;(sudo apt-get install python-serial)&lt;/strong&gt;</Description>
    <Group>Devices and Things</Group>
    <Features />
    <ActivationTime>2015-03-08T13:27:04.35216Z</ActivationTime>
    <TriggerTime>2015-03-08T13:27:04.36428Z</TriggerTime>
    <Type>Python</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddOption("KeypadChannel", "CH2", "MCP3008 channel where the keypad is connected to", "text");
// Wait for MCP3008 program to start first
Program.WaitFor("38");
// Starting in 5 seconds
Pause(5);
Program.Run();
</ScriptCondition>
    <ScriptSource>const string MCP3008_DOMAIN = "Components.MCP3008";

// Setup Keypad virtual modules
Program.AddVirtualModule(MCP3008_DOMAIN, "Keypad", "Sensor", "");
var keypadModule = Modules.InDomain(MCP3008_DOMAIN).WithAddress("Keypad").Get();

var keySample = new Dictionary&lt;string, double&gt;();
keySample.Add("1", 10);
keySample.Add("2", 422);
keySample.Add("3", 651);
keySample.Add("4", 127);
keySample.Add("5", 477);
keySample.Add("6", 682);
keySample.Add("7", 240);
keySample.Add("8", 533);
keySample.Add("9", 714);
keySample.Add("*", 331);
keySample.Add("0", 582);
keySample.Add("#", 742);

// Get a reference to MCP3008 channel where the keypad is connected
var analogChannel = Program.Option("KeypadChannel").Value;
var keypadChannel = Modules.InDomain(MCP3008_DOMAIN).WithAddress(analogChannel).Command("ChannelValue.Get");

while(Program.IsEnabled)
{
  var v = (AnalogValue)keypadChannel.GetValue();
  if (v.Value &lt; 1000)
  {
    var keyLevel = 0D; var pc = 0D;
    // get sample and average value
    while(pc &lt; 10)
    {
      v = (AnalogValue)keypadChannel.GetValue();
      keyLevel += (double)v.Value;
      pc++;
    }
    keyLevel /= pc; 

    // translate value into the corresponding key
    var keyPressed = "";
    var tolerance = 20d; 
    foreach (var kv in keySample.Keys)
    {
      var t = Math.Abs(keyLevel - keySample[kv]);
      if (t &lt; tolerance)
      {
        keyPressed = kv;
        tolerance = t;
      }
    }

    if (keyPressed != "")
    {
      Program.RaiseEvent(keypadModule, "NumericPad.Key", keyPressed, "MCP3008 Keypad");
    }
    // Wait key release
    do
    {
      Pause(0.050); // 50ms
      v = (AnalogValue)keypadChannel.GetValue();
    } while (v.Value &lt; 1000);
    Program.RaiseEvent(keypadModule, "NumericPad.Key", "", "MCP3008 Keypad");
  }
  else
  {
    Pause(0.25); // 250ms
  }
}</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>41</Address>
    <Name>MCP3008 - Keypad Input</Name>
    <Description>3x4 numeric keypad module connected to one MCP3008 analog channel</Description>
    <Group>Raspberry Pi</Group>
    <Features />
    <ActivationTime xsi:nil="true" />
    <TriggerTime xsi:nil="true" />
    <Type>CSharp</Type>
    <IsEnabled>false</IsEnabled>
  </ProgramBlock>
  <ProgramBlock>
    <ConditionType>OnTrue</ConditionType>
    <Conditions />
    <Commands />
    <ScriptCondition>Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.Enable", "Enable control by IR remote", "checkbox");
Program.AddFeature("", "Switch,Light,Dimmer", "HomeGenie.IRControler.IRCode", "Toggle module with IR button (enter code)", "capture:Receiver.RawData");
Program.AddOption("DimmerUpCode", "Microsoft_Xbox360/UpArrow", "1. Dimmer Up (enter IR button code)", "text");
Program.AddOption("DimmerDownCode", "Microsoft_Xbox360/DownArrow", "2. Dimmer Down (enter IR button code)", "text");
Program.AddOption("DimmerInterval", "5", "4. Dimmer Interval", "text");
Program.Run();
</ScriptCondition>
    <ScriptSource>// 
// Code adapted from: http://www.homegenie.it/forum/index.php?topic=950.0
//
// Allows adding conditional IR code for Lights, Switches and Dimmers.
// Also let you dim last light using Up/Down button which you can define in configuration
// Skip Command IR code is designed for disabling the next command and it is useful in case you just want to change the dimmer value.
// 

var dimmerInterval = Program.Option("DimmerInterval");
var dimmerUp = Program.Option("DimmerUpCode");
var dimmerDown = Program.Option("DimmerDownCode");
var irControlModules = Modules.WithFeature("HomeGenie.IRControler.Enable");

When.ModuleParameterChanged((module, parameter) =&gt; {
  if(parameter.Name == "Receiver.RawData" )
  {
    var irData = parameter;
    var lastButton = module.Parameter("IrController.LastButton");
    if (irData.Value != "") 
    {
      if (lastButton.Value != "" &amp;&amp; (irData.Value == dimmerUp.Value || irData.Value == dimmerDown.Value)) 
      {
        irControlModules.Each((m) =&gt; {
          if (m.Parameter("HomeGenie.IRControler.IRCode").Value == lastButton.Value) 
          {
            var level = m.Level;
            if (irData.Value == dimmerUp.Value &amp;&amp; level &lt; 100) 
            {
              level += dimmerInterval.DecimalValue;
              m.Level = (level &gt; 100 ? 100 : level);
              Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;Dimmer value: " + level);
            }
            else if (irData.Value == dimmerDown.Value &amp;&amp; level &gt; dimmerInterval.DecimalValue) 
            {
              level -= dimmerInterval.DecimalValue;
              m.Level = (level &lt; dimmerInterval.DecimalValue ? dimmerInterval.DecimalValue : level);
              Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;Dimmer value: " + level);
            }
          }
          return false; // do not break, continue iterating...
        });
      }
      else
      {
        irControlModules.Each((m) =&gt; {
          if (m.Parameter("HomeGenie.IRControler.IRCode").Value == irData.Value) 
          {
            lastButton.Value = irData.Value;
            m.Toggle();
            Program.Notify("IR Remote Controller", m.Instance.Name + "&lt;br&gt;toggled.");
          }
          return false; // do not break, continue iterating...
        });
      }
    }
  }
  return true;
});

Program.GoBackground();</ScriptSource>
    <ScriptErrors>[]</ScriptErrors>
    <Domain>HomeAutomation.HomeGenie.Automation</Domain>
    <Address>505</Address>
    <Name>IR Remote Controller</Name>
    <Description>Control module using an IR remote.
When you press the assigned remote button, it will toggle the module on/off.
Also it lets you dim last addressed module using Up/Down button which can be defined through program's configuration options.
"Skip Command IR code" option is designed for disabling the next command and it's useful when you just want to change the dimmer value.</Description>
    <Group>Lights</Group>
    <Features>
      <ProgramFeature>
        <FieldType>checkbox</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.Enable</Property>
        <Description>Enable control by IR remote</Description>
      </ProgramFeature>
      <ProgramFeature>
        <FieldType>capture:Receiver.RawData</FieldType>
        <ForDomains />
        <ForTypes>Switch,Light,Dimmer</ForTypes>
        <Property>HomeGenie.IRControler.IRCode</Property>
        <Description>Toggle module with IR button (enter code)</Description>
      </ProgramFeature>
    </Features>
    <ActivationTime xsi:nil="true" />
    <TriggerTime>2015-09-15T07:38:18.540701Z</TriggerTime>
    <Type>CSharp</Type>
    <IsEnabled>true</IsEnabled>
  </ProgramBlock>
</ArrayOfProgramBlock>
